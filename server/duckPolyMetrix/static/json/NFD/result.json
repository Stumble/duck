{
  "classes": {
    "class nfd::fw::asf::ProbingModule": {
      "fields": {
        "m_probingInterval": "class time::seconds", 
        "m_measurements": "class nfd::fw::asf::AsfMeasurements"
      }, 
      "methods": {
        "getFaceToProbe(const class nfd::face::Face &, const class ndn::Interest &, const fib::Entry &, const class nfd::face::Face &)": {
          "return_type": "class nfd::face::Face", 
          "linesOfCode": 47, 
          "parameter": {
            "faceUsed": "class nfd::face::Face", 
            "inFace": "class nfd::face::Face", 
            "fibEntry": "class fib::Entry", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFaceBasedOnProbability(const FaceInfoFacePairSet &)": {
          "return_type": "class nfd::face::Face", 
          "linesOfCode": 33, 
          "parameter": {
            "rankedFaces": "class FaceInfoFacePairSet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "scheduleProbe(const fib::Entry &, const time::milliseconds &)": {
          "return_type": "class void", 
          "linesOfCode": 19, 
          "parameter": {
            "interval": "class time::milliseconds", 
            "fibEntry": "class fib::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterForwardingProbe(const fib::Entry &, const class ndn::Interest &)": {
          "return_type": "class void", 
          "linesOfCode": 10, 
          "parameter": {
            "fibEntry": "class fib::Entry", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getProbingProbability(uint64_t, uint64_t, uint64_t)": {
          "return_type": "class double", 
          "linesOfCode": 8, 
          "parameter": {
            "rankSum": "class uint64_t", 
            "nFaces": "class uint64_t", 
            "rank": "class uint64_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isProbingNeeded(const fib::Entry &, const class ndn::Interest &)": {
          "return_type": "class bool", 
          "linesOfCode": 17, 
          "parameter": {
            "fibEntry": "class fib::Entry", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRandomNumber(double, double)": {
          "return_type": "class double", 
          "linesOfCode": 6, 
          "parameter": {
            "start": "class double", 
            "end": "class double"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::tools::nfdc::CommandDefinition": {
      "fields": {
        "m_args": "class ArgMap", 
        "m_positionalArgs": "class std::vector<std::string>", 
        "m_verb": "class std::string", 
        "m_title": "class std::string", 
        "m_requiredArgs": "class std::set<std::string>", 
        "m_noun": "class std::string"
      }, 
      "methods": {
        "addArg(const std::string &, enum nfd::tools::nfdc::ArgValueType, enum nfd::tools::nfdc::Required, enum nfd::tools::nfdc::Positional, const std::string &)": {
          "return_type": "class nfd::tools::nfdc::CommandDefinition", 
          "linesOfCode": 0, 
          "parameter": {
            "isRequired": "class nfd::tools::nfdc::Required", 
            "valueType": "class nfd::tools::nfdc::ArgValueType", 
            "name": "class std::string", 
            "allowPositional": "class nfd::tools::nfdc::Positional", 
            "metavar": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "parse(const std::vector<std::string> &, size_t)": {
          "return_type": "class nfd::tools::nfdc::CommandArguments", 
          "linesOfCode": 0, 
          "parameter": {
            "tokens": "class std::vector<std::string>", 
            "start": "class size_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "parseValue(enum nfd::tools::nfdc::ArgValueType, const std::string &)": {
          "return_type": "class boost::any", 
          "linesOfCode": 0, 
          "parameter": {
            "valueType": "class nfd::tools::nfdc::ArgValueType", 
            "token": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getVerb()": {
          "return_type": "class std::string", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getNoun()": {
          "return_type": "class std::string", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setTitle(const std::string &)": {
          "return_type": "class nfd::tools::nfdc::CommandDefinition", 
          "linesOfCode": 6, 
          "parameter": {
            "title": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getTitle()": {
          "return_type": "class std::string", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::rib::ReadvertisedRoute": {
      "fields": {
        "m_prefix": "class ndn::Name", 
        "m_ribRoutes": "class std::vector<RibRouteRef>", 
        "m_signer": "class ndn::security::SigningInfo"
      }, 
      "methods": {
        "getSigner()": {
          "return_type": "class ndn::security::SigningInfo", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getPrefix()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRibRoutes()": {
          "return_type": "class std::vector<RibRouteRef>", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::rib::AutoPrefixPropagator": {
      "fields": {
        "m_baseRetryWait": "class time::seconds", 
        "m_afterInsertConnection": "class ndn::util::signal::ScopedConnection", 
        "m_nfdController": "class ndn::nfd::Controller", 
        "m_maxRetryWait": "class time::seconds", 
        "m_rib": "class nfd::rib::Rib", 
        "m_commandOptions": "class ndn::nfd::CommandOptions", 
        "m_propagatedEntries": "class PropagatedEntryList", 
        "m_afterEraseConnection": "class ndn::util::signal::ScopedConnection", 
        "m_controlParameters": "class ndn::nfd::ControlParameters", 
        "m_refreshInterval": "class time::seconds", 
        "m_keyChain": "class ndn::KeyChain", 
        "m_hasConnectedHub": "class bool"
      }, 
      "methods": {
        "afterRibInsert(const class ndn::nfd::ControlParameters &, const class ndn::nfd::CommandOptions &)": {
          "return_type": "class void", 
          "linesOfCode": 19, 
          "parameter": {
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterInsertRibEntry(const class ndn::Name &)": {
          "return_type": "class void", 
          "linesOfCode": 32, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterHubConnect()": {
          "return_type": "class void", 
          "linesOfCode": 22, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "enable()": {
          "return_type": "class void", 
          "linesOfCode": 8, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getPrefixPropagationParameters(const class ndn::Name &)": {
          "return_type": "class AutoPrefixPropagator::PrefixPropagationParameters", 
          "linesOfCode": 34, 
          "parameter": {
            "localRibPrefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doesCurrentPropagatedPrefixWork(const class ndn::Name &)": {
          "return_type": "class bool", 
          "linesOfCode": 14, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterRibErase(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterHubDisconnect()": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterRevokeFail(const ndn::nfd::ControlResponse &, const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "response": "class ndn::nfd::ControlResponse", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "options": "class ndn::nfd::CommandOptions"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "advertise(const class ndn::nfd::ControlParameters &, const class ndn::nfd::CommandOptions &, time::seconds)": {
          "return_type": "class void", 
          "linesOfCode": 20, 
          "parameter": {
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "retryWaitTime": "class time::seconds"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "advertise(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "retryWaitTime": "class time::seconds"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "withdraw(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "retryWaitTime": "class time::seconds"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterRevokeSucceed(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "retryWaitTime": "class time::seconds"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "redoPropagation(PropagatedEntryIt, const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "entryIt": "class PropagatedEntryIt", 
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "retryWaitTime": "class time::seconds"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterRevokeFail(const ndn::nfd::ControlResponse &, const class ndn::nfd::ControlParameters &, const class ndn::nfd::CommandOptions &)": {
          "return_type": "class void", 
          "linesOfCode": 8, 
          "parameter": {
            "response": "class ndn::nfd::ControlResponse", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "options": "class ndn::nfd::CommandOptions"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterPropagateFail(const ndn::nfd::ControlResponse &, const class ndn::nfd::ControlParameters &, const class ndn::nfd::CommandOptions &, time::seconds, const ndn::class Scheduler::Event &)": {
          "return_type": "class void", 
          "linesOfCode": 21, 
          "parameter": {
            "retryEvent": "class ndn::Scheduler::Event", 
            "retryWaitTime": "class time::seconds", 
            "response": "class ndn::nfd::ControlResponse", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "options": "class ndn::nfd::CommandOptions"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onRefreshTimer(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterRibErase(const class ndn::nfd::ControlParameters &, const class ndn::nfd::CommandOptions &)": {
          "return_type": "class void", 
          "linesOfCode": 24, 
          "parameter": {
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterRevokeSucceed(const class ndn::nfd::ControlParameters &, const class ndn::nfd::CommandOptions &, time::seconds)": {
          "return_type": "class void", 
          "linesOfCode": 20, 
          "parameter": {
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "retryWaitTime": "class time::seconds"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterPropagateSucceed(const class ndn::nfd::ControlParameters &, const class ndn::nfd::CommandOptions &, const ndn::class Scheduler::Event &)": {
          "return_type": "class void", 
          "linesOfCode": 19, 
          "parameter": {
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "refreshEvent": "class ndn::Scheduler::Event"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "disable()": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterRibInsert(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onRetryTimer(const class ndn::nfd::ControlParameters &, const class ndn::nfd::CommandOptions &, time::seconds)": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "retryWaitTime": "class time::seconds"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterEraseRibEntry(const class ndn::Name &)": {
          "return_type": "class void", 
          "linesOfCode": 40, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onRefreshTimer(const class ndn::nfd::ControlParameters &, const class ndn::nfd::CommandOptions &)": {
          "return_type": "class void", 
          "linesOfCode": 8, 
          "parameter": {
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "loadConfig(const ConfigSection &)": {
          "return_type": "class void", 
          "linesOfCode": 41, 
          "parameter": {
            "configSection": "class ConfigSection"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onRetryTimer(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "retryWaitTime": "class time::seconds"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterPropagateSucceed(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, const ndn::class Scheduler::Event &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "refreshEvent": "class ndn::Scheduler::Event"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "redoPropagation(PropagatedEntryIt, const class ndn::nfd::ControlParameters &, const class ndn::nfd::CommandOptions &, time::seconds)": {
          "return_type": "class void", 
          "linesOfCode": 22, 
          "parameter": {
            "entryIt": "class PropagatedEntryIt", 
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "retryWaitTime": "class time::seconds"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterPropagateFail(const ndn::nfd::ControlResponse &, const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds, const ndn::class Scheduler::Event &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "retryEvent": "class ndn::Scheduler::Event", 
            "retryWaitTime": "class time::seconds", 
            "response": "class ndn::nfd::ControlResponse", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "options": "class ndn::nfd::CommandOptions"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "withdraw(const class ndn::nfd::ControlParameters &, const class ndn::nfd::CommandOptions &, time::seconds)": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {
            "options": "class ndn::nfd::CommandOptions", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "retryWaitTime": "class time::seconds"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::fw::asf::FaceInfo::Error": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::runtime_error"
      ]
    }, 
    "class nfd::tools::nfdc::CommandDefinition::Error": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::invalid_argument"
      ]
    }, 
    "class nfd::ForwarderCounters": {
      "fields": {
        "nInData": "class nfd::PacketCounter", 
        "nOutData": "class nfd::PacketCounter", 
        "nInNacks": "class nfd::PacketCounter", 
        "nOutInterests": "class nfd::PacketCounter", 
        "nOutNacks": "class nfd::PacketCounter", 
        "nInInterests": "class nfd::PacketCounter"
      }, 
      "methods": {
        "getCounters()": {
          "return_type": "class nfd::ForwarderCounters", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::face::Face": {
      "fields": {
        "m_id": "class FaceId", 
        "m_counters": "class nfd::face::FaceCounters", 
        "afterReceiveData": "class signal::Signal<LinkService, Data>", 
        "afterReceiveInterest": "class signal::Signal<LinkService, Interest>", 
        "m_service": "class unique_ptr<nfd::face::LinkService>", 
        "afterReceiveNack": "class signal::Signal<LinkService, lp::Nack>", 
        "afterStateChange": "class signal::Signal<Transport, FaceState, FaceState>", 
        "m_transport": "class unique_ptr<nfd::face::Transport>"
      }, 
      "methods": {
        "sendNack(const lp::Nack &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "nack": "class lp::Nack"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getExpirationTime()": {
          "return_type": "class time::steady_clock::TimePoint", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "sendInterest(const class ndn::Interest &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRemoteUri()": {
          "return_type": "class ndn::util::FaceUri", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getCounters()": {
          "return_type": "class nfd::face::FaceCounters", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getPersistency()": {
          "return_type": "class ndn::nfd::FacePersistency", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFace(FaceId)": {
          "return_type": "class nfd::face::Face", 
          "linesOfCode": 5, 
          "parameter": {
            "id": "class FaceId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "sendData(const class ndn::Data &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "data": "class ndn::Data"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getLinkType()": {
          "return_type": "class ndn::nfd::LinkType", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getLocalUri()": {
          "return_type": "class ndn::util::FaceUri", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getScope()": {
          "return_type": "class ndn::nfd::FaceScope", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getTransport()": {
          "return_type": "class nfd::face::Transport", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getId()": {
          "return_type": "class FaceId", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setId(FaceId)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "id": "class FaceId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getState()": {
          "return_type": "class FaceState", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "close()": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setPersistency(ndn::nfd::FacePersistency)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "persistency": "class ndn::nfd::FacePersistency"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getLinkService()": {
          "return_type": "class nfd::face::LinkService", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFace()": {
          "return_type": "class nfd::face::Face", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "enable_shared_from_this<class nfd::face::Face>", 
        "noncopyable"
      ]
    }, 
    "class nfd::tools::nfdc::ForwarderGeneralModule": {
      "fields": {
        "m_nfdIdCollector": "class nfd::tools::nfdc::NfdIdCollector", 
        "m_status": "class ndn::nfd::ForwarderStatus"
      }, 
      "methods": {
        "fetchStatus(class ndn::nfd::Controller &, const function<void (void)> &, const class Controller::DatasetFailCallback &, const class ndn::nfd::CommandOptions &)": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {
            "controller": "class ndn::nfd::Controller", 
            "onSuccess": "class function<void ()>", 
            "onFailure": "class Controller::DatasetFailCallback", 
            "options": "class ndn::nfd::CommandOptions"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatItemXml(std::ostream &, const class ndn::nfd::ForwarderStatus &, const class ndn::Name &)": {
          "return_type": "class void", 
          "linesOfCode": 33, 
          "parameter": {
            "item": "class ndn::nfd::ForwarderStatus", 
            "nfdId": "class ndn::Name", 
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatStatusXml(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setNfdIdCollector(const class nfd::tools::nfdc::NfdIdCollector &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "nfdIdCollector": "class nfd::tools::nfdc::NfdIdCollector"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatStatusText(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatItemText(std::ostream &, const class ndn::nfd::ForwarderStatus &, const class ndn::Name &)": {
          "return_type": "class void", 
          "linesOfCode": 23, 
          "parameter": {
            "item": "class ndn::nfd::ForwarderStatus", 
            "nfdId": "class ndn::Name", 
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getNfdId()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 10, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::tools::nfdc::Module", 
        "noncopyable"
      ]
    }, 
    "class nfd::fw::AccessStrategy": {
      "fields": {
        "m_fit": "class FaceInfoTable", 
        "m_retxSuppression": "class nfd::fw::RetxSuppressionFixed", 
        "m_removeFaceInfoConn": "class signal::ScopedConnection"
      }, 
      "methods": {
        "sendToLastNexthop(const class nfd::face::Face &, const class ndn::Interest &, const shared_ptr<pit::Entry> &, class nfd::fw::AccessStrategy::MtInfo &, const fib::Entry &)": {
          "return_type": "class bool", 
          "linesOfCode": 40, 
          "parameter": {
            "mi": "class nfd::fw::AccessStrategy::MtInfo", 
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "fibEntry": "class fib::Entry", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterRtoTimeout(weak_ptr<pit::Entry>, FaceId, FaceId)": {
          "return_type": "class void", 
          "linesOfCode": 28, 
          "parameter": {
            "inFaceId": "class FaceId", 
            "pitWeak": "class weak_ptr<pit::Entry>", 
            "firstOutFaceId": "class FaceId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterReceiveNewInterest(const class nfd::face::Face &, const class ndn::Interest &, const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 35, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterReceiveInterest(const class nfd::face::Face &, const class ndn::Interest &, const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 20, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "removeFaceInfo(const class nfd::face::Face &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterReceiveRetxInterest(const class nfd::face::Face &, const class ndn::Interest &, const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 8, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "addPrefixMeasurements(const class ndn::Data &)": {
          "return_type": "class AccessStrategy::MtInfo", 
          "linesOfCode": 18, 
          "parameter": {
            "data": "class ndn::Data"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getStrategyName()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "multicast(const class nfd::face::Face &, const class ndn::Interest &, const shared_ptr<pit::Entry> &, const fib::Entry &, FaceId)": {
          "return_type": "class int", 
          "linesOfCode": 19, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "exceptFace": "class FaceId", 
            "inFace": "class nfd::face::Face", 
            "fibEntry": "class fib::Entry", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "beforeSatisfyInterest(const shared_ptr<pit::Entry> &, const class nfd::face::Face &, const class ndn::Data &)": {
          "return_type": "class void", 
          "linesOfCode": 27, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "data": "class ndn::Data"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findPrefixMeasurements(const pit::Entry &)": {
          "return_type": "class std::tuple<Name, AccessStrategy::MtInfo >", 
          "linesOfCode": 14, 
          "parameter": {
            "pitEntry": "class pit::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "updateMeasurements(const class nfd::face::Face &, const class ndn::Data &, const class RttEstimator::Duration &)": {
          "return_type": "class void", 
          "linesOfCode": 17, 
          "parameter": {
            "data": "class ndn::Data", 
            "inFace": "class nfd::face::Face", 
            "rtt": "class RttEstimator::Duration"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::Strategy"
      ]
    }, 
    "class nfd::pit::Pit": {
      "fields": {
        "m_nItems": "class size_t", 
        "m_nameTree": "class nfd::name_tree::NameTree"
      }, 
      "methods": {
        "getPit()": {
          "return_type": "class nfd::pit::Pit", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "size()": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "find(const class ndn::Interest &)": {
          "return_type": "class shared_ptr<nfd::pit::Entry>", 
          "linesOfCode": 0, 
          "parameter": {
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "erase(class nfd::pit::Entry *)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "entry": "class nfd::pit::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findOrInsert(const class ndn::Interest &, _Bool)": {
          "return_type": "class std::pair<shared_ptr<Entry>, bool>", 
          "linesOfCode": 0, 
          "parameter": {
            "interest": "class ndn::Interest", 
            "allowInsert": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "deleteInOutRecords(class nfd::pit::Entry *, const class nfd::face::Face &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "entry": "class nfd::pit::Entry", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findAllDataMatches(const class ndn::Data &)": {
          "return_type": "class DataMatchResult", 
          "linesOfCode": 0, 
          "parameter": {
            "data": "class ndn::Data"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "erase(class nfd::pit::Entry *, _Bool)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "pitEntry": "class nfd::pit::Entry", 
            "canDeleteNte": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "begin()": {
          "return_type": "class _iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "end()": {
          "return_type": "class _iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "insert(const class ndn::Interest &)": {
          "return_type": "class std::pair<shared_ptr<Entry>, bool>", 
          "linesOfCode": 0, 
          "parameter": {
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::name_tree::Hash32": {
      "fields": {}, 
      "methods": {
        "compute(const void *, size_t)": {
          "return_type": "class HashValue", 
          "linesOfCode": 0, 
          "parameter": {
            "buffer": "class void", 
            "length": "class size_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::Network": {
      "fields": {
        "m_minAddress": "class boost::asio::ip::address", 
        "m_maxAddress": "class boost::asio::ip::address"
      }, 
      "methods": {
        "getMaxRangeV4()": {
          "return_type": "class nfd::Network", 
          "linesOfCode": 7, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getMaxRangeV6()": {
          "return_type": "class nfd::Network", 
          "linesOfCode": 9, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doesContain(const boost::asio::ip::address &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "address": "class boost::asio::ip::address"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isValidCidr(const std::string &)": {
          "return_type": "class bool", 
          "linesOfCode": 31, 
          "parameter": {
            "cidr": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator==(const class nfd::Network &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "rhs": "class nfd::Network"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator!=(const class nfd::Network &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "rhs": "class nfd::Network"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class ndn::tools::autoconfig::HttpException": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::runtime_error"
      ]
    }, 
    "class nfd::face::ProtocolFactory": {
      "fields": {
        "providedSchemes": "class std::set<std::string>"
      }, 
      "methods": {
        "getProvidedSchemes()": {
          "return_type": "class std::set<std::string>", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "create(const std::string &)": {
          "return_type": "class unique_ptr<nfd::face::ProtocolFactory>", 
          "linesOfCode": 7, 
          "parameter": {
            "id": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createFace(const class ndn::util::FaceUri &, ndn::nfd::FacePersistency, _Bool, const FaceCreatedCallback &, const FaceCreationFailedCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "wantLocalFieldsEnabled": "class bool", 
            "persistency": "class ndn::nfd::FacePersistency", 
            "onCreated": "class FaceCreatedCallback", 
            "uri": "class ndn::util::FaceUri", 
            "onFailure": "class FaceCreationFailedCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "processConfig(OptionalConfigSection, class FaceSystem::ConfigContext &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "context": "class FaceSystem::ConfigContext", 
            "configSection": "class OptionalConfigSection"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getChannels()": {
          "return_type": "class std::vector<shared_ptr< Channel> >", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "listRegistered()": {
          "return_type": "class std::set<std::string>", 
          "linesOfCode": 8, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRegistry()": {
          "return_type": "class ProtocolFactory::Registry", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::cs::lru::LruPolicy": {
      "fields": {
        "m_queue": "class Queue"
      }, 
      "methods": {
        "doAfterInsert(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "insertToQueue(iterator, _Bool)": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {
            "i": "class iterator", 
            "isNewEntry": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doBeforeUse(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doBeforeErase(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doAfterRefresh(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "evictEntries()": {
          "return_type": "class void", 
          "linesOfCode": 11, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::cs::Policy"
      ]
    }, 
    "class nfd::fw::asf::AsfStrategy": {
      "fields": {
        "m_measurements": "class nfd::fw::asf::AsfMeasurements", 
        "m_probing": "class nfd::fw::asf::ProbingModule", 
        "m_retxSuppression": "class nfd::fw::RetxSuppressionExponential"
      }, 
      "methods": {
        "onTimeout(const class ndn::Name &, face::FaceId)": {
          "return_type": "class void", 
          "linesOfCode": 21, 
          "parameter": {
            "faceId": "class face::FaceId", 
            "interestName": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getStrategyName()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterReceiveNack(const class nfd::face::Face &, const lp::Nack &, const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {
            "nack": "class lp::Nack", 
            "inFace": "class nfd::face::Face", 
            "pitEntry": "class shared_ptr<pit::Entry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getBestFaceForForwarding(const fib::Entry &, const class ndn::Interest &, const class nfd::face::Face &)": {
          "return_type": "class nfd::face::Face", 
          "linesOfCode": 58, 
          "parameter": {
            "inFace": "class nfd::face::Face", 
            "fibEntry": "class fib::Entry", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterReceiveInterest(const class nfd::face::Face &, const class ndn::Interest &, const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 46, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "beforeSatisfyInterest(const shared_ptr<pit::Entry> &, const class nfd::face::Face &, const class ndn::Data &)": {
          "return_type": "class void", 
          "linesOfCode": 22, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "data": "class ndn::Data"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "forwardInterest(const class ndn::Interest &, const fib::Entry &, const shared_ptr<pit::Entry> &, class nfd::face::Face &, _Bool)": {
          "return_type": "class void", 
          "linesOfCode": 39, 
          "parameter": {
            "outFace": "class nfd::face::Face", 
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "fibEntry": "class fib::Entry", 
            "interest": "class ndn::Interest", 
            "wantNewNonce": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "sendNoRouteNack(const class nfd::face::Face &, const class ndn::Interest &, const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 10, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::Strategy"
      ]
    }, 
    "class nfd::fw::asf::FaceInfo": {
      "fields": {
        "m_lastInterestName": "class ndn::Name", 
        "m_isTimeoutScheduled": "class bool", 
        "m_timeoutEventId": "class scheduler::EventId", 
        "m_rttStats": "class nfd::fw::asf::RttStats", 
        "m_measurementExpirationId": "class scheduler::EventId"
      }, 
      "methods": {
        "cancelTimeoutEvent()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "recordTimeout(const class ndn::Name &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "interestName": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setTimeoutEvent(const scheduler::EventId &, const class ndn::Name &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "id": "class scheduler::EventId", 
            "interestName": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isTimeoutScheduled()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getMeasurementExpirationEventId()": {
          "return_type": "class scheduler::EventId", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "cancelTimeoutEvent(const class ndn::Name &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doesNameMatchLastInterest(const class ndn::Name &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setMeasurementExpirationEventId(const scheduler::EventId &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "id": "class scheduler::EventId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "get(nfd::face::FaceId)": {
          "return_type": "class nfd::fw::asf::FaceInfo", 
          "linesOfCode": 5, 
          "parameter": {
            "faceId": "class nfd::face::FaceId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRtt()": {
          "return_type": "class RttStats::Rtt", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasSrttMeasurement()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "recordRtt(const shared_ptr<pit::Entry> &, const class nfd::face::Face &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isTimeout()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "computeRto()": {
          "return_type": "class RttEstimator::Duration", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getSrtt()": {
          "return_type": "class RttStats::Rtt", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::name_tree::Iterator": {
      "fields": {
        "m_state": "class int", 
        "m_ref": "class nfd::name_tree::Entry", 
        "m_entry": "class nfd::name_tree::Entry", 
        "m_impl": "class shared_ptr<nfd::name_tree::EnumerationImpl>"
      }, 
      "methods": {
        "operator!=(const class nfd::name_tree::Iterator &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "other": "class nfd::name_tree::Iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator*()": {
          "return_type": "class nfd::name_tree::Entry", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator==(const class nfd::name_tree::Iterator &)": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {
            "other": "class nfd::name_tree::Iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator++()": {
          "return_type": "class nfd::name_tree::Iterator", 
          "linesOfCode": 8, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator->()": {
          "return_type": "class nfd::name_tree::Entry", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator++(int)": {
          "return_type": "class nfd::name_tree::Iterator", 
          "linesOfCode": 7, 
          "parameter": {
            "": "class int"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "std::iterator<std::forward_iterator_tag, const Entry>"
      ]
    }, 
    "class nfd::tools::nfdc::text::Separator": {
      "fields": {
        "m_count": "class int", 
        "m_first": "class std::string", 
        "m_subsequent": "class std::string"
      }, 
      "methods": {
        "getCount()": {
          "return_type": "class int", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::face::GenericLinkService": {
      "fields": {
        "m_fragmenter": "class nfd::face::LpFragmenter", 
        "m_reassembler": "class nfd::face::LpReassembler", 
        "m_options": "class nfd::face::GenericLinkService::Options", 
        "m_lastSeqNo": "class lp::Sequence"
      }, 
      "methods": {
        "assignSequences(std::vector<lp::Packet> &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "pkts": "class std::vector<lp::Packet>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "decodeNetPacket(const class ndn::Block &, const lp::Packet &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "netPkt": "class ndn::Block", 
            "firstPkt": "class lp::Packet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getOptions()": {
          "return_type": "class GenericLinkService::Options", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doSendInterest(const class ndn::Interest &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getCounters()": {
          "return_type": "class GenericLinkService::Counters", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "sendNetPacket(lp::Packet &&)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "pkt": "class lp::Packet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doSendNack(const ndn::lp::Nack &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "nack": "class ndn::lp::Nack"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "decodeNack(const class ndn::Block &, const lp::Packet &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "netPkt": "class ndn::Block", 
            "firstPkt": "class lp::Packet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setOptions(const class nfd::face::GenericLinkService::Options &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "options": "class nfd::face::GenericLinkService::Options"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "encodeLpFields(const ndn::TagHost &, lp::Packet &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "lpPacket": "class lp::Packet", 
            "netPkt": "class ndn::TagHost"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doSendData(const class ndn::Data &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "data": "class ndn::Data"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "decodeInterest(const class ndn::Block &, const lp::Packet &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "netPkt": "class ndn::Block", 
            "firstPkt": "class lp::Packet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "decodeData(const class ndn::Block &, const lp::Packet &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "netPkt": "class ndn::Block", 
            "firstPkt": "class lp::Packet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "assignSequence(lp::Packet &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "pkt": "class lp::Packet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setOptions(const class GenericLinkService::Options &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "options": "class GenericLinkService::Options"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doReceivePacket(class Transport::Packet &&)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "packet": "class Transport::Packet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::face::LinkService", 
        "class nfd::face::GenericLinkServiceCounters"
      ]
    }, 
    "class nfd::face::NfdAutoUnixStreamFactoryProtocolFactoryRegistrationClass": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::face::LpFragmenter": {
      "fields": {
        "m_options": "class nfd::face::LpFragmenter::Options", 
        "m_linkService": "class nfd::face::LinkService"
      }, 
      "methods": {
        "fragmentPacket(const lp::Packet &, size_t)": {
          "return_type": "class std::tuple<bool, std::vector<lp::Packet> >", 
          "linesOfCode": 66, 
          "parameter": {
            "packet": "class lp::Packet", 
            "mtu": "class size_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getLinkService()": {
          "return_type": "class nfd::face::LinkService", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setOptions(const class nfd::face::LpFragmenter::Options &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "options": "class nfd::face::LpFragmenter::Options"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::SimpleCounter": {
      "fields": {
        "m_value": "class rep"
      }, 
      "methods": {
        "operator=(const class nfd::SimpleCounter &)": {
          "return_type": "class nfd::SimpleCounter", 
          "linesOfCode": 0, 
          "parameter": {
            "0": "class nfd::SimpleCounter"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "set(rep)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "value": "class rep"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::fw::asf::NfdAutoAsfStrategyStrategyRegistrationClass": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::face::Transport": {
      "fields": {
        "m_mtu": "class ssize_t", 
        "m_localUri": "class ndn::util::FaceUri", 
        "m_face": "class nfd::face::Face", 
        "m_expirationTime": "class time::steady_clock::TimePoint", 
        "m_remoteUri": "class ndn::util::FaceUri", 
        "m_persistency": "class ndn::nfd::FacePersistency", 
        "m_service": "class nfd::face::LinkService", 
        "m_scope": "class ndn::nfd::FaceScope", 
        "m_state": "class nfd::face::TransportState", 
        "afterStateChange": "class signal::Signal<Transport, TransportState, TransportState>", 
        "m_linkType": "class ndn::nfd::LinkType"
      }, 
      "methods": {
        "getExpirationTime()": {
          "return_type": "class time::steady_clock::TimePoint", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "canChangePersistencyTo(ndn::nfd::FacePersistency)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "newPersistency": "class ndn::nfd::FacePersistency"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterChangePersistency(ndn::nfd::FacePersistency)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "oldPersistency": "class ndn::nfd::FacePersistency"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getPersistency()": {
          "return_type": "class ndn::nfd::FacePersistency", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setExpirationTime(const time::class steady_clock::TimePoint &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "expirationTime": "class time::steady_clock::TimePoint"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setRemoteUri(const class ndn::util::FaceUri &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "uri": "class ndn::util::FaceUri"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setState(enum nfd::face::TransportState)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "newState": "class nfd::face::TransportState"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doSend(class nfd::face::Transport::Packet &&)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "packet": "class nfd::face::Transport::Packet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setLocalUri(const class ndn::util::FaceUri &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "uri": "class ndn::util::FaceUri"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setScope(ndn::nfd::FaceScope)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "scope": "class ndn::nfd::FaceScope"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getLinkType()": {
          "return_type": "class ndn::nfd::LinkType", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getScope()": {
          "return_type": "class ndn::nfd::FaceScope", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "receive(class nfd::face::Transport::Packet &&)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "packet": "class nfd::face::Transport::Packet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setLinkType(ndn::nfd::LinkType)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "linkType": "class ndn::nfd::LinkType"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRemoteUri()": {
          "return_type": "class ndn::util::FaceUri", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getLinkService()": {
          "return_type": "class nfd::face::LinkService", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setMtu(ssize_t)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "mtu": "class ssize_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setFaceAndLinkService(class nfd::face::Face &, class nfd::face::LinkService &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "service": "class nfd::face::LinkService", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "send(class nfd::face::Transport::Packet &&)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "packet": "class nfd::face::Transport::Packet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "close()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFace()": {
          "return_type": "class nfd::face::Face", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getCounters()": {
          "return_type": "class Transport::Counters", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getMtu()": {
          "return_type": "class ssize_t", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doClose()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getLocalUri()": {
          "return_type": "class ndn::util::FaceUri", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "canChangePersistencyToImpl(ndn::nfd::FacePersistency)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "newPersistency": "class ndn::nfd::FacePersistency"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getState()": {
          "return_type": "class nfd::face::TransportState", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setPersistency(ndn::nfd::FacePersistency)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "newPersistency": "class ndn::nfd::FacePersistency"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::face::TransportCounters", 
        "noncopyable"
      ]
    }, 
    "class nfd::rib::ReadvertiseDestination": {
      "fields": {}, 
      "methods": {
        "advertise(nfd::rib::ReadvertisedRoute &, std::function<void (void)>, std::function<void (const std::string &)>)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "failureCb": "class std::function<void ( std::string )>", 
            "successCb": "class std::function<void ()>", 
            "rr": "class nfd::rib::ReadvertisedRoute"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "withdraw(nfd::rib::ReadvertisedRoute &, std::function<void (void)>, std::function<void (const std::string &)>)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "failureCb": "class std::function<void ( std::string )>", 
            "successCb": "class std::function<void ()>", 
            "rr": "class nfd::rib::ReadvertisedRoute"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::rib::FibUpdater::Error": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::runtime_error"
      ]
    }, 
    "class nfd::face::InternalClientTransport": {
      "fields": {
        "m_fwTransportStateConn": "class signal::ScopedConnection", 
        "m_fwToClientTransmitConn": "class signal::ScopedConnection", 
        "m_clientToFwTransmitConn": "class signal::ScopedConnection"
      }, 
      "methods": {
        "pause()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "resume()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "send(const class ndn::Block &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "wire": "class ndn::Block"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "connectToForwarder(class nfd::face::InternalForwarderTransport *)": {
          "return_type": "class void", 
          "linesOfCode": 20, 
          "parameter": {
            "forwarderTransport": "class nfd::face::InternalForwarderTransport"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "send(const class ndn::Block &, const class ndn::Block &)": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {
            "header": "class ndn::Block", 
            "payload": "class ndn::Block"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "receiveFromLink(const class ndn::Block &)": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {
            "packet": "class ndn::Block"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "close()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "ndn::Transport", 
        "class nfd::face::InternalTransportBase"
      ]
    }, 
    "class nfd::face::LpReassembler::Options": {
      "fields": {
        "nMaxFragments": "class size_t", 
        "reassemblyTimeout": "class time::nanoseconds"
      }, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::fw::NfdAutoClientControlStrategyStrategyRegistrationClass": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class ndn::tools::autoconfig::Base": {
      "fields": {
        "m_nextStageOnFailure": "class NextStageCallback", 
        "m_controller": "class ndn::nfd::Controller", 
        "m_face": "class ndn::Face", 
        "m_keyChain": "class ndn::security::v1::KeyChain"
      }, 
      "methods": {
        "onHubConnectError(const ControlResponse &)": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {
            "response": "class ControlResponse"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onPrefixRegistrationError(const ControlResponse &)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "response": "class ControlResponse"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "connectToHub(const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 11, 
          "parameter": {
            "uri": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "registerPrefix(const class ndn::Name &, uint64_t)": {
          "return_type": "class void", 
          "linesOfCode": 14, 
          "parameter": {
            "prefix": "class ndn::Name", 
            "faceId": "class uint64_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "start()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onPrefixRegistrationSuccess(const class ndn::nfd::ControlParameters &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "commandSuccessResult": "class ndn::nfd::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onHubConnectSuccess(const class ndn::nfd::ControlParameters &)": {
          "return_type": "class void", 
          "linesOfCode": 11, 
          "parameter": {
            "resp": "class ndn::nfd::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onCanonizeFailure(const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "reason": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onCanonizeSuccess(const class ndn::util::FaceUri &)": {
          "return_type": "class void", 
          "linesOfCode": 8, 
          "parameter": {
            "canonicalUri": "class ndn::util::FaceUri"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "boost::noncopyable"
      ]
    }, 
    "class nfd::strategy_choice::StrategyChoice::InsertResult": {
      "fields": {
        "m_exceptionMessage": "class std::string", 
        "m_status": "class nfd::strategy_choice::StrategyChoice::InsertResult::Status"
      }, 
      "methods": {
        "isRegistered()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::fw::AccessStrategy::MtInfo": {
      "fields": {
        "rtt": "class nfd::RttEstimator", 
        "lastNexthop": "class FaceId"
      }, 
      "methods": {
        "getTypeId()": {
          "return_type": "class int", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::StrategyInfo"
      ]
    }, 
    "class nfd::PrivilegeHelper": {
      "fields": {}, 
      "methods": {
        "drop()": {
          "return_type": "class void", 
          "linesOfCode": 27, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "initialize(const std::string &, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 95, 
          "parameter": {
            "userName": "class std::string", 
            "groupName": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "raise()": {
          "return_type": "class void", 
          "linesOfCode": 26, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "runElevated(function<void (void)>)": {
          "return_type": "class void", 
          "linesOfCode": 16, 
          "parameter": {
            "f": "class function<void ()>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::fw::BestRouteStrategy": {
      "fields": {}, 
      "methods": {
        "getStrategyName()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::BestRouteStrategyBase"
      ]
    }, 
    "class nfd::cs::priority_fifo::PriorityFifoPolicy": {
      "fields": {
        "m_entryInfoMap": "class EntryInfoMapFifo", 
        "m_queues": "class Queue [3]"
      }, 
      "methods": {
        "attachQueue(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 25, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "evictOne()": {
          "return_type": "class void", 
          "linesOfCode": 21, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doAfterInsert(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "moveToStaleQueue(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 15, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doBeforeUse(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doBeforeErase(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doAfterRefresh(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "detachQueue(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 14, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "evictEntries()": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::cs::Policy"
      ]
    }, 
    "class nfd::fw::AccessStrategy::FaceInfo": {
      "fields": {
        "rtt": "class nfd::RttEstimator"
      }, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::pit::Iterator": {
      "fields": {
        "m_ntIt": "class NameTree::_iterator", 
        "m_iPitEntry": "class size_t"
      }, 
      "methods": {
        "operator==(const class nfd::pit::Iterator &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "other": "class nfd::pit::Iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator!=(const class nfd::pit::Iterator &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "other": "class nfd::pit::Iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator*()": {
          "return_type": "class nfd::pit::Entry", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator++()": {
          "return_type": "class nfd::pit::Iterator", 
          "linesOfCode": 14, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator->()": {
          "return_type": "class shared_ptr<nfd::pit::Entry>", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator++(int)": {
          "return_type": "class nfd::pit::Iterator", 
          "linesOfCode": 7, 
          "parameter": {
            "": "class int"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "std::iterator<std::forward_iterator_tag, const Entry>"
      ]
    }, 
    "class nfd::fw::NfdAutoDropAllUnsolicitedDataPolicyUnsolicitedDataPolicyRegistrationClass": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::tools::nfdc::LegacyNfdc": {
      "fields": {
        "m_face": "class ndn::Face", 
        "m_controller": "class ndn::nfd::Controller", 
        "m_faceId": "class uint64_t", 
        "m_commandLineArguments": "class std::vector<std::string>", 
        "m_flags": "class uint64_t", 
        "m_facePersistency": "class ndn::nfd::FacePersistency", 
        "m_origin": "class uint64_t", 
        "m_cost": "class uint64_t", 
        "m_expires": "class time::milliseconds", 
        "m_name": "class std::string"
      }, 
      "methods": {
        "fibAddNextHop()": {
          "return_type": "class void", 
          "linesOfCode": 20, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onObtainFaceIdFailure(const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "message": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onError(const ndn::nfd::ControlResponse &, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {
            "message": "class std::string", 
            "response": "class ndn::nfd::ControlResponse"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "strategyChoiceSet()": {
          "return_type": "class void", 
          "linesOfCode": 15, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "ribUnregisterPrefix()": {
          "return_type": "class void", 
          "linesOfCode": 20, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "startFaceCreate(const class ndn::util::FaceUri &)": {
          "return_type": "class void", 
          "linesOfCode": 11, 
          "parameter": {
            "canonicalUri": "class ndn::util::FaceUri"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onSuccess(const class ndn::nfd::ControlParameters &, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "message": "class std::string", 
            "commandSuccessResult": "class ndn::nfd::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "faceCreate()": {
          "return_type": "class void", 
          "linesOfCode": 14, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "ribRegisterPrefix()": {
          "return_type": "class void", 
          "linesOfCode": 25, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "startFaceCreate(const ndn::util::FaceUri &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "canonicalUri": "class ndn::util::FaceUri"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "fibRemoveNextHop()": {
          "return_type": "class void", 
          "linesOfCode": 19, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "dispatch(const std::string &)": {
          "return_type": "class bool", 
          "linesOfCode": 48, 
          "parameter": {
            "command": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "faceDestroy()": {
          "return_type": "class void", 
          "linesOfCode": 17, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "strategyChoiceUnset()": {
          "return_type": "class void", 
          "linesOfCode": 12, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onCanonizeFailure(const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "reason": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onSuccess(const ndn::nfd::ControlParameters &, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "message": "class std::string", 
            "commandSuccessResult": "class ndn::nfd::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::cs::Entry": {
      "fields": {
        "m_isUnsolicited": "class bool", 
        "m_data": "class shared_ptr< ndn::Data>", 
        "m_staleTime": "class time::steady_clock::TimePoint"
      }, 
      "methods": {
        "setData(shared_ptr<const class ndn::Data>, _Bool)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "isUnsolicited": "class bool", 
            "data": "class shared_ptr< ndn::Data>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasData()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isStale()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setData(const class ndn::Data &, _Bool)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "isUnsolicited": "class bool", 
            "data": "class ndn::Data"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getName()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "updateStaleTime()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFullName()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator()(const class nfd::cs::EntryImpl &)": {
          "return_type": "class nfd::cs::Entry", 
          "linesOfCode": 5, 
          "parameter": {
            "entry": "class nfd::cs::EntryImpl"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getData()": {
          "return_type": "class ndn::Data", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isUnsolicited()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "canSatisfy(const class ndn::Interest &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "reset()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getStaleTime()": {
          "return_type": "class time::steady_clock::TimePoint", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::face::GenericLinkServiceCounters": {
      "fields": {
        "nOutOverMtu": "class nfd::PacketCounter", 
        "nFragmentationErrors": "class nfd::PacketCounter", 
        "nReassembling": "class SizeCounter<nfd::face::LpReassembler>", 
        "nInNetInvalid": "class nfd::PacketCounter", 
        "nInLpInvalid": "class nfd::PacketCounter", 
        "nReassemblyTimeouts": "class nfd::PacketCounter"
      }, 
      "methods": {}, 
      "base_list": [
        "class LinkService::Counters"
      ]
    }, 
    "class nfd::fw::AdmitLocalUnsolicitedDataPolicy": {
      "fields": {}, 
      "methods": {
        "decide(const class nfd::face::Face &, const class ndn::Data &)": {
          "return_type": "class nfd::fw::UnsolicitedDataDecision", 
          "linesOfCode": 8, 
          "parameter": {
            "data": "class ndn::Data", 
            "inFace": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::UnsolicitedDataPolicy"
      ]
    }, 
    "class nfd::ConfigFile::Error": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::runtime_error"
      ]
    }, 
    "class nfd::tools::nfdc::StrategyChoiceModule": {
      "fields": {
        "m_status": "class std::vector<StrategyChoice>"
      }, 
      "methods": {
        "fetchStatus(class ndn::nfd::Controller &, const function<void (void)> &, const class Controller::DatasetFailCallback &, const class ndn::nfd::CommandOptions &)": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {
            "controller": "class ndn::nfd::Controller", 
            "onSuccess": "class function<void ()>", 
            "onFailure": "class Controller::DatasetFailCallback", 
            "options": "class ndn::nfd::CommandOptions"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatStatusXml(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatItemXml(std::ostream &, const class ndn::nfd::StrategyChoice &)": {
          "return_type": "class void", 
          "linesOfCode": 8, 
          "parameter": {
            "item": "class ndn::nfd::StrategyChoice", 
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatItemText(std::ostream &, const class ndn::nfd::StrategyChoice &)": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {
            "item": "class ndn::nfd::StrategyChoice", 
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatStatusText(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 8, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::tools::nfdc::Module", 
        "noncopyable"
      ]
    }, 
    "class nfd::fw::asf::RttStats": {
      "fields": {
        "m_rttEstimator": "class nfd::RttEstimator", 
        "m_srtt": "class Rtt", 
        "m_rtt": "class Rtt"
      }, 
      "methods": {
        "computeSrtt(Rtt, Rtt)": {
          "return_type": "class RttStats::Rtt", 
          "linesOfCode": 9, 
          "parameter": {
            "previousSrtt": "class Rtt", 
            "currentRtt": "class Rtt"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "addRttMeasurement(class RttEstimator::Duration &)": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {
            "durationRtt": "class RttEstimator::Duration"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "recordTimeout()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRtt()": {
          "return_type": "class Rtt", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "computeRto()": {
          "return_type": "class RttEstimator::Duration", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getSrtt()": {
          "return_type": "class Rtt", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::tools::nfdc::LegacyNfdc::Error": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::runtime_error"
      ]
    }, 
    "class nfd::face::LinkService": {
      "fields": {
        "m_transport": "class nfd::face::Transport", 
        "m_face": "class nfd::face::Face", 
        "afterReceiveNack": "class signal::Signal<LinkService, lp::Nack>", 
        "afterReceiveData": "class signal::Signal<LinkService, Data>", 
        "afterReceiveInterest": "class signal::Signal<LinkService, Interest>"
      }, 
      "methods": {
        "sendNack(const ndn::lp::Nack &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "nack": "class ndn::lp::Nack"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "receiveNack(const lp::Nack &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "nack": "class lp::Nack"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "sendInterest(const class ndn::Interest &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doSendInterest(const class ndn::Interest &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "receiveData(const class ndn::Data &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "data": "class ndn::Data"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getCounters()": {
          "return_type": "class LinkService::Counters", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "receivePacket(class Transport::Packet &&)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "packet": "class Transport::Packet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "sendPacket(class Transport::Packet &&)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "packet": "class Transport::Packet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "sendData(const class ndn::Data &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "data": "class ndn::Data"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doSendData(const class ndn::Data &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "data": "class ndn::Data"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getTransport()": {
          "return_type": "class nfd::face::Transport", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "receiveInterest(const class ndn::Interest &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doSendNack(const lp::Nack &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "nack": "class lp::Nack"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFace()": {
          "return_type": "class nfd::face::Face", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setFaceAndTransport(class nfd::face::Face &, class nfd::face::Transport &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "transport": "class nfd::face::Transport", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doReceivePacket(class Transport::Packet &&)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "packet": "class Transport::Packet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::face::LinkServiceCounters", 
        "noncopyable"
      ]
    }, 
    "class nfd::rib::PropagatedEntry": {
      "fields": {
        "m_signingIdentity": "class ndn::Name", 
        "m_propagationStatus": "class nfd::rib::PropagationStatus", 
        "m_rePropagateEvent": "class scheduler::ScopedEventId"
      }, 
      "methods": {
        "fail(const scheduler::EventId &)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "event": "class scheduler::EventId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getSigningIdentity()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isNew()": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator=(const class nfd::rib::PropagatedEntry &)": {
          "return_type": "class nfd::rib::PropagatedEntry", 
          "linesOfCode": 0, 
          "parameter": {
            "other": "class nfd::rib::PropagatedEntry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isPropagating()": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setSigningIdentity(const class ndn::Name &)": {
          "return_type": "class nfd::rib::PropagatedEntry", 
          "linesOfCode": 6, 
          "parameter": {
            "identity": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "startPropagation()": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isPropagateFail()": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "succeed(const scheduler::EventId &)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "event": "class scheduler::EventId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isPropagated()": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "initialize()": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::fib::Fib": {
      "fields": {
        "m_nItems": "class size_t", 
        "m_nameTree": "class nfd::name_tree::NameTree"
      }, 
      "methods": {
        "erase(const class ndn::Name &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findExactMatch(const class ndn::Name &)": {
          "return_type": "class nfd::fib::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "size()": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "insert(const class ndn::Name &)": {
          "return_type": "class std::pair<Entry , bool>", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findLongestPrefixMatch(const class ndn::Name &)": {
          "return_type": "class nfd::fib::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findLongestPrefixMatch(const pit::Entry &)": {
          "return_type": "class nfd::fib::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "pitEntry": "class pit::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findLongestPrefixMatch(const measurements::Entry &)": {
          "return_type": "class nfd::fib::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "measurementsEntry": "class measurements::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "erase(name_tree::Entry *, _Bool)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "nte": "class name_tree::Entry", 
            "canDeleteNte": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFib()": {
          "return_type": "class nfd::fib::Fib", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRange()": {
          "return_type": "class Range", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "begin()": {
          "return_type": "class _iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "end()": {
          "return_type": "class _iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "erase(const class nfd::fib::Entry &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "entry": "class nfd::fib::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "removeNextHop(class nfd::fib::Entry &, const class nfd::face::Face &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "entry": "class nfd::fib::Entry", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::rib::RibEntry": {
      "fields": {
        "m_parent": "class shared_ptr<nfd::rib::RibEntry>", 
        "m_children": "class std::list<shared_ptr<RibEntry> >", 
        "m_nRoutesWithCaptureSet": "class uint64_t", 
        "m_routes": "class RouteList", 
        "m_inheritedRoutes": "class RouteList", 
        "m_name": "class ndn::Name"
      }, 
      "methods": {
        "getNRoutes()": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRoutes()": {
          "return_type": "class RibEntry::RouteList", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getChildren()": {
          "return_type": "class std::list<shared_ptr<RibEntry> >", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRouteWithSecondLowestCostByFaceId(uint64_t)": {
          "return_type": "class nfd::rib::Route", 
          "linesOfCode": 0, 
          "parameter": {
            "faceId": "class uint64_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "insertRoute(const class nfd::rib::Route &)": {
          "return_type": "class std::pair<RibEntry::iterator, bool>", 
          "linesOfCode": 0, 
          "parameter": {
            "route": "class nfd::rib::Route"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasChildInheritOnFaceId(uint64_t)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "faceId": "class uint64_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasChildren()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasRoute(const class nfd::rib::Route &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "route": "class nfd::rib::Route"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getName()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "eraseRoute(RouteList::iterator)": {
          "return_type": "class iterator", 
          "linesOfCode": 0, 
          "parameter": {
            "route": "class RouteList::iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "end()": {
          "return_type": "class RibEntry::iterator", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "addChild(shared_ptr<class nfd::rib::RibEntry>)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "child": "class shared_ptr<nfd::rib::RibEntry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasCapture()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setParent(shared_ptr<class nfd::rib::RibEntry>)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "parent": "class shared_ptr<nfd::rib::RibEntry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findRoute(const class nfd::rib::Route &)": {
          "return_type": "class _iterator", 
          "linesOfCode": 0, 
          "parameter": {
            "route": "class nfd::rib::Route"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasParent()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "addInheritedRoute(const class nfd::rib::Route &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "route": "class nfd::rib::Route"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findInheritedRoute(const class nfd::rib::Route &)": {
          "return_type": "class RouteList::_iterator", 
          "linesOfCode": 0, 
          "parameter": {
            "route": "class nfd::rib::Route"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasFaceId(const uint64_t)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "faceId": "class uint64_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "begin()": {
          "return_type": "class RibEntry::iterator", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasInheritedRoute(const class nfd::rib::Route &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "route": "class nfd::rib::Route"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setName(const class ndn::Name &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getParent()": {
          "return_type": "class shared_ptr<nfd::rib::RibEntry>", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "removeChild(shared_ptr<class nfd::rib::RibEntry>)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "child": "class shared_ptr<nfd::rib::RibEntry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "eraseRoute(const class nfd::rib::Route &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "route": "class nfd::rib::Route"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRouteWithLowestCostByFaceId(uint64_t)": {
          "return_type": "class nfd::rib::Route", 
          "linesOfCode": 0, 
          "parameter": {
            "faceId": "class uint64_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "removeInheritedRoute(const class nfd::rib::Route &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "route": "class nfd::rib::Route"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRouteWithLowestCostAndChildInheritByFaceId(uint64_t)": {
          "return_type": "class nfd::rib::Route", 
          "linesOfCode": 0, 
          "parameter": {
            "faceId": "class uint64_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getInheritedRoutes()": {
          "return_type": "class RibEntry::RouteList", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "enable_shared_from_this<class nfd::rib::RibEntry>"
      ]
    }, 
    "class nfd::TablesConfigSection": {
      "fields": {
        "m_forwarder": "class nfd::Forwarder", 
        "m_isConfigured": "class bool"
      }, 
      "methods": {
        "processStrategyChoiceSection(const ConfigSection &, _Bool)": {
          "return_type": "class void", 
          "linesOfCode": 37, 
          "parameter": {
            "section": "class ConfigSection", 
            "isDryRun": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setConfigFile(class nfd::ConfigFile &)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "configFile": "class nfd::ConfigFile"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "processConfig(const ConfigSection &, _Bool)": {
          "return_type": "class void", 
          "linesOfCode": 58, 
          "parameter": {
            "section": "class ConfigSection", 
            "isDryRun": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "ensureConfigured()": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "processNetworkRegionSection(const ConfigSection &, _Bool)": {
          "return_type": "class void", 
          "linesOfCode": 14, 
          "parameter": {
            "section": "class ConfigSection", 
            "isDryRun": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::name_tree::Hashtable": {
      "fields": {
        "m_expandThreshold": "class size_t", 
        "m_options": "class Options", 
        "m_buckets": "class std::vector<Node >", 
        "m_size": "class size_t", 
        "m_shrinkThreshold": "class size_t"
      }, 
      "methods": {
        "detach(size_t, class nfd::name_tree::Node *)": {
          "return_type": "class void", 
          "linesOfCode": 19, 
          "parameter": {
            "node": "class nfd::name_tree::Node", 
            "bucket": "class size_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "attach(size_t, class nfd::name_tree::Node *)": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {
            "node": "class nfd::name_tree::Node", 
            "bucket": "class size_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "find(const class ndn::Name &, size_t)": {
          "return_type": "class nfd::name_tree::Node", 
          "linesOfCode": 6, 
          "parameter": {
            "prefixLen": "class size_t", 
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "insert(const class ndn::Name &, size_t, const HashSequence &)": {
          "return_type": "class std::pair< Node , bool>", 
          "linesOfCode": 6, 
          "parameter": {
            "prefixLen": "class size_t", 
            "hashes": "class HashSequence", 
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getBucket(size_t)": {
          "return_type": "class nfd::name_tree::Node", 
          "linesOfCode": 0, 
          "parameter": {
            "bucket": "class size_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "find(const class ndn::Name &, size_t, const HashSequence &)": {
          "return_type": "class nfd::name_tree::Node", 
          "linesOfCode": 6, 
          "parameter": {
            "prefixLen": "class size_t", 
            "hashes": "class HashSequence", 
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findOrInsert(const class ndn::Name &, size_t, HashValue, _Bool)": {
          "return_type": "class std::pair< Node , bool>", 
          "linesOfCode": 28, 
          "parameter": {
            "prefixLen": "class size_t", 
            "h": "class HashValue", 
            "name": "class ndn::Name", 
            "allowInsert": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "computeBucketIndex(HashValue)": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {
            "h": "class HashValue"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "computeThresholds()": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getNBuckets()": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "size()": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "erase(class nfd::name_tree::Node *)": {
          "return_type": "class void", 
          "linesOfCode": 19, 
          "parameter": {
            "node": "class nfd::name_tree::Node"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "resize(size_t)": {
          "return_type": "class void", 
          "linesOfCode": 21, 
          "parameter": {
            "newNBuckets": "class size_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::ManagerBase::Error": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::runtime_error"
      ]
    }, 
    "class nfd::name_tree::Node": {
      "fields": {
        "entry": "class nfd::name_tree::Entry", 
        "prev": "class nfd::name_tree::Node", 
        "hash": "class HashValue", 
        "next": "class nfd::name_tree::Node"
      }, 
      "methods": {
        "getBucket(size_t)": {
          "return_type": "class nfd::name_tree::Node", 
          "linesOfCode": 6, 
          "parameter": {
            "bucket": "class size_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::cs::EntryImpl": {
      "fields": {
        "m_queryName": "class ndn::Name"
      }, 
      "methods": {
        "unsetUnsolicited()": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isQuery()": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator<(const class nfd::cs::EntryImpl &)": {
          "return_type": "class bool", 
          "linesOfCode": 20, 
          "parameter": {
            "other": "class nfd::cs::EntryImpl"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "canStale()": {
          "return_type": "class bool", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::cs::Entry"
      ]
    }, 
    "class nfd::fw::RetxSuppression": {
      "fields": {}, 
      "methods": {
        "decide(const class nfd::face::Face &, const class ndn::Interest &, pit::Entry &)": {
          "return_type": "class nfd::fw::RetxSuppression::Result", 
          "linesOfCode": 0, 
          "parameter": {
            "pitEntry": "class pit::Entry", 
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getLastOutgoing(const pit::Entry &)": {
          "return_type": "class time::steady_clock::TimePoint", 
          "linesOfCode": 12, 
          "parameter": {
            "pitEntry": "class pit::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::face::NfdAutoTcpFactoryProtocolFactoryRegistrationClass": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::face::FaceSystem::ConfigContext": {
      "fields": {
        "addFace": "class FaceCreatedCallback", 
        "isDryRun": "class bool", 
        "m_netifs": "class std::vector<NetworkInterfaceInfo>"
      }, 
      "methods": {
        "listNetifs()": {
          "return_type": "class std::vector<NetworkInterfaceInfo>", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class boost::noncopyable_::noncopyable"
      ]
    }, 
    "class nfd::fw::BestRouteStrategy2": {
      "fields": {
        "m_retxSuppression": "class nfd::fw::RetxSuppressionExponential"
      }, 
      "methods": {
        "getStrategyName()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterReceiveInterest(const class nfd::face::Face &, const class ndn::Interest &, const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 63, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterReceiveNack(const class nfd::face::Face &, const lp::Nack &, const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 48, 
          "parameter": {
            "nack": "class lp::Nack", 
            "inFace": "class nfd::face::Face", 
            "pitEntry": "class shared_ptr<pit::Entry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::Strategy"
      ]
    }, 
    "class nfd::face::MulticastUdpTransport": {
      "fields": {
        "m_sendSocket": "class protocol::socket", 
        "m_multicastGroup": "class protocol::endpoint"
      }, 
      "methods": {
        "doSend(class Transport::Packet &&)": {
          "return_type": "class void", 
          "linesOfCode": 11, 
          "parameter": {
            "packet": "class Transport::Packet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doClose()": {
          "return_type": "class void", 
          "linesOfCode": 15, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "DatagramTransport<boost::asio::ip::udp, struct nfd::face::Multicast>"
      ]
    }, 
    "class nfd::NfdRunner": {
      "fields": {
        "m_nfdKeyChain": "class ndn::KeyChain", 
        "m_configFile": "class std::string", 
        "m_nfd": "class nfd::Nfd", 
        "m_reloadSignalSet": "class boost::asio::signal_set", 
        "m_terminationSignalSet": "class boost::asio::signal_set"
      }, 
      "methods": {
        "printModules(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "reload(const boost::system::error_code &, int)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "signalNo": "class int", 
            "error": "class boost::system::error_code"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "printUsage(std::ostream &, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "os": "class std::ostream", 
            "programName": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "terminate(const boost::system::error_code &, int)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "signalNo": "class int", 
            "error": "class boost::system::error_code"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "run()": {
          "return_type": "class int", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "initialize()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::cs::priority_fifo::NfdAutoPriorityFifoPolicyCsPolicyRegistrationClass": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::face::UdpFactory::Error": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "class ProtocolFactory::Error"
      ]
    }, 
    "class nfd::name_tree::PrefixMatchImpl": {
      "fields": {
        "m_pred": "class EntrySelector"
      }, 
      "methods": {
        "advance(class nfd::name_tree::Iterator &)": {
          "return_type": "class void", 
          "linesOfCode": 25, 
          "parameter": {
            "i": "class nfd::name_tree::Iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::name_tree::EnumerationImpl"
      ]
    }, 
    "class nfd::fw::Strategy": {
      "fields": {
        "m_measurements": "class nfd::measurements::MeasurementsAccessor", 
        "m_forwarder": "class nfd::Forwarder", 
        "beforeRemoveFace": "class signal::Signal<FaceTable, Face >", 
        "afterAddFace": "class signal::Signal<FaceTable, Face >", 
        "m_name": "class ndn::Name"
      }, 
      "methods": {
        "sendNacks(const shared_ptr<pit::Entry> &, const lp::NackHeader &, std::initializer_list<const Face *>)": {
          "return_type": "class void", 
          "linesOfCode": 21, 
          "parameter": {
            "exceptFaces": "class std::initializer_list< Face >", 
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "header": "class lp::NackHeader"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "parseInstanceName(const class ndn::Name &)": {
          "return_type": "class Strategy::ParsedInstanceName", 
          "linesOfCode": 10, 
          "parameter": {
            "input": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFaceTable()": {
          "return_type": "class nfd::FaceTable", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "sendInterest(const shared_ptr<pit::Entry> &, class nfd::face::Face &, const class ndn::Interest &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "outFace": "class nfd::face::Face", 
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setInstanceName(const class ndn::Name &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFace(FaceId)": {
          "return_type": "class nfd::face::Face", 
          "linesOfCode": 0, 
          "parameter": {
            "id": "class FaceId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterReceiveInterest(const class nfd::face::Face &, const class ndn::Interest &, const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "listRegistered()": {
          "return_type": "class std::set<Name>", 
          "linesOfCode": 8, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "create(const class ndn::Name &, class nfd::Forwarder &)": {
          "return_type": "class unique_ptr<nfd::fw::Strategy>", 
          "linesOfCode": 15, 
          "parameter": {
            "forwarder": "class nfd::Forwarder", 
            "instanceName": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "canCreate(const class ndn::Name &)": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {
            "instanceName": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "beforeExpirePendingInterest(const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "beforeSatisfyInterest(const shared_ptr<pit::Entry> &, const class nfd::face::Face &, const class ndn::Data &)": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "data": "class ndn::Data"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterReceiveNack(const class nfd::face::Face &, const lp::Nack &, const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {
            "nack": "class lp::Nack", 
            "inFace": "class nfd::face::Face", 
            "pitEntry": "class shared_ptr<pit::Entry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "find(const class ndn::Name &)": {
          "return_type": "class Strategy::Registry::_iterator", 
          "linesOfCode": 37, 
          "parameter": {
            "instanceName": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "sendNack(const shared_ptr<pit::Entry> &, const class nfd::face::Face &, const lp::NackHeader &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "outFace": "class nfd::face::Face", 
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "header": "class lp::NackHeader"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "areSameType(const class ndn::Name &, const class ndn::Name &)": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {
            "instanceNameA": "class ndn::Name", 
            "instanceNameB": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "lookupFib(const pit::Entry &)": {
          "return_type": "class fib::Entry", 
          "linesOfCode": 61, 
          "parameter": {
            "pitEntry": "class pit::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "rejectPendingInterest(const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRegistry()": {
          "return_type": "class Strategy::Registry", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getMeasurements()": {
          "return_type": "class nfd::measurements::MeasurementsAccessor", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "makeInstanceName(const class ndn::Name &, const class ndn::Name &)": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 9, 
          "parameter": {
            "input": "class ndn::Name", 
            "strategyName": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getInstanceName()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::measurements::AnyEntry": {
      "fields": {}, 
      "methods": {
        "operator()(const class nfd::measurements::Entry &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "entry": "class nfd::measurements::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::tools::nfdc::CommandParser::Error": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::invalid_argument"
      ]
    }, 
    "class nfd::PacketCounter": {
      "fields": {}, 
      "methods": {
        "operator++()": {
          "return_type": "class nfd::PacketCounter", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::SimpleCounter"
      ]
    }, 
    "class nfd::face::UdpFactory": {
      "fields": {
        "m_prohibitedEndpoints": "class std::set<udp::Endpoint>", 
        "m_channels": "class std::map<udp::Endpoint, shared_ptr<UdpChannel> >", 
        "m_mcastFaces": "class std::map<udp::Endpoint, shared_ptr<Face> >", 
        "m_mcastConfig": "class nfd::face::UdpFactory::MulticastConfig"
      }, 
      "methods": {
        "getChannels()": {
          "return_type": "class std::vector<shared_ptr< Channel> >", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createFace(const class ndn::util::FaceUri &, ndn::nfd::FacePersistency, _Bool, const FaceCreatedCallback &, const FaceCreationFailedCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 50, 
          "parameter": {
            "wantLocalFieldsEnabled": "class bool", 
            "persistency": "class ndn::nfd::FacePersistency", 
            "onCreated": "class FaceCreatedCallback", 
            "uri": "class ndn::util::FaceUri", 
            "onFailure": "class FaceCreationFailedCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findMulticastFace(const udp::Endpoint &)": {
          "return_type": "class shared_ptr<nfd::face::Face>", 
          "linesOfCode": 9, 
          "parameter": {
            "localEndpoint": "class udp::Endpoint"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createChannel(const std::string &, const std::string &, const time::seconds &)": {
          "return_type": "class shared_ptr<nfd::UdpChannel>", 
          "linesOfCode": 8, 
          "parameter": {
            "localIp": "class std::string", 
            "localPort": "class std::string", 
            "timeout": "class time::seconds"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findChannel(const udp::Endpoint &)": {
          "return_type": "class shared_ptr<nfd::UdpChannel>", 
          "linesOfCode": 9, 
          "parameter": {
            "localEndpoint": "class udp::Endpoint"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "prohibitAllIpv4Endpoints(uint16_t)": {
          "return_type": "class void", 
          "linesOfCode": 18, 
          "parameter": {
            "port": "class uint16_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "processConfig(OptionalConfigSection, class FaceSystem::ConfigContext &)": {
          "return_type": "class void", 
          "linesOfCode": 140, 
          "parameter": {
            "context": "class FaceSystem::ConfigContext", 
            "configSection": "class OptionalConfigSection"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "applyMulticastConfig(const class FaceSystem::ConfigContext &)": {
          "return_type": "class void", 
          "linesOfCode": 48, 
          "parameter": {
            "context": "class FaceSystem::ConfigContext"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getId()": {
          "return_type": "class std::string", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "prohibitAllIpv6Endpoints(uint16_t)": {
          "return_type": "class void", 
          "linesOfCode": 11, 
          "parameter": {
            "port": "class uint16_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "prohibitEndpoint(const udp::Endpoint &)": {
          "return_type": "class void", 
          "linesOfCode": 15, 
          "parameter": {
            "endpoint": "class udp::Endpoint"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createChannel(const udp::Endpoint &, const time::seconds &)": {
          "return_type": "class shared_ptr<nfd::UdpChannel>", 
          "linesOfCode": 28, 
          "parameter": {
            "endpoint": "class udp::Endpoint", 
            "timeout": "class time::seconds"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createMulticastFace(const udp::Endpoint &, const udp::Endpoint &, const std::string &)": {
          "return_type": "class shared_ptr<nfd::face::Face>", 
          "linesOfCode": 90, 
          "parameter": {
            "multicastEndpoint": "class udp::Endpoint", 
            "networkInterfaceName": "class std::string", 
            "localEndpoint": "class udp::Endpoint"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createMulticastFace(const std::string &, const std::string &, const std::string &, const std::string &)": {
          "return_type": "class shared_ptr<nfd::face::Face>", 
          "linesOfCode": 12, 
          "parameter": {
            "localIp": "class std::string", 
            "multicastPort": "class std::string", 
            "multicastIp": "class std::string", 
            "networkInterfaceName": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::face::ProtocolFactory"
      ]
    }, 
    "class nfd::name_tree::Hash64": {
      "fields": {}, 
      "methods": {
        "compute(const void *, size_t)": {
          "return_type": "class HashValue", 
          "linesOfCode": 0, 
          "parameter": {
            "buffer": "class void", 
            "length": "class size_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::rib::RibUpdateBatch": {
      "fields": {
        "m_updates": "class RibUpdateList", 
        "m_faceId": "class uint64_t"
      }, 
      "methods": {
        "begin()": {
          "return_type": "class _iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFaceId()": {
          "return_type": "class uint64_t", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "end()": {
          "return_type": "class _iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "size()": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "add(const class nfd::rib::RibUpdate &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "update": "class nfd::rib::RibUpdate"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::name_tree::PartialEnumerationImpl": {
      "fields": {
        "m_pred": "class EntrySubTreeSelector"
      }, 
      "methods": {
        "advance(class nfd::name_tree::Iterator &)": {
          "return_type": "class void", 
          "linesOfCode": 63, 
          "parameter": {
            "i": "class nfd::name_tree::Iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::name_tree::EnumerationImpl"
      ]
    }, 
    "class nfd::StrategyChoiceManager": {
      "fields": {
        "m_table": "class strategy_choice::StrategyChoice"
      }, 
      "methods": {
        "unsetStrategy(class ndn::nfd::ControlParameters, const ndn::mgmt::CommandContinuation &)": {
          "return_type": "class void", 
          "linesOfCode": 12, 
          "parameter": {
            "done": "class ndn::mgmt::CommandContinuation", 
            "parameters": "class ndn::nfd::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setStrategy(class ndn::nfd::ControlParameters, const ndn::mgmt::CommandContinuation &)": {
          "return_type": "class void", 
          "linesOfCode": 21, 
          "parameter": {
            "done": "class ndn::mgmt::CommandContinuation", 
            "parameters": "class ndn::nfd::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "listChoices(ndn::mgmt::StatusDatasetContext &)": {
          "return_type": "class void", 
          "linesOfCode": 11, 
          "parameter": {
            "context": "class ndn::mgmt::StatusDatasetContext"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::NfdManagerBase"
      ]
    }, 
    "class nfd::Channel": {
      "fields": {
        "m_uri": "class ndn::util::FaceUri"
      }, 
      "methods": {
        "setUri(const class ndn::util::FaceUri &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "uri": "class ndn::util::FaceUri"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getUri()": {
          "return_type": "class ndn::util::FaceUri", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::scheduler::ScopedEventId": {
      "fields": {
        "m_event": "class ndn::util::scheduler::EventId"
      }, 
      "methods": {
        "cancel()": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator=(const class ndn::util::scheduler::EventId &)": {
          "return_type": "class nfd::scheduler::ScopedEventId", 
          "linesOfCode": 9, 
          "parameter": {
            "event": "class ndn::util::scheduler::EventId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "release()": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::DeadNonceList": {
      "fields": {
        "m_lifetime": "class time::nanoseconds", 
        "m_adjustCapacityInterval": "class time::nanoseconds", 
        "m_actualMarkCounts": "class std::multiset<size_t>", 
        "m_capacity": "class size_t", 
        "m_ht": "class Hashtable", 
        "m_markInterval": "class time::nanoseconds", 
        "m_queue": "class Queue", 
        "m_index": "class Index", 
        "m_markEvent": "class scheduler::EventId", 
        "m_adjustCapacityEvent": "class scheduler::EventId"
      }, 
      "methods": {
        "size()": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "add(const class ndn::Name &, uint32_t)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "nonce": "class uint32_t", 
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "adjustCapacity()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getLifetime()": {
          "return_type": "class time::nanoseconds", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "has(const class ndn::Name &, uint32_t)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "nonce": "class uint32_t", 
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "mark()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getDeadNonceList()": {
          "return_type": "class nfd::DeadNonceList", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "evictEntries()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "countMarks()": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "makeEntry(const class ndn::Name &, uint32_t)": {
          "return_type": "class Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "nonce": "class uint32_t", 
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::PrivilegeHelper::Error": {
      "fields": {
        "m_whatMessage": "class std::string"
      }, 
      "methods": {
        "what()": {
          "return_type": "class char", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::rib::RibManager::Error": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::runtime_error"
      ]
    }, 
    "class nfd::fw::UnsolicitedDataPolicy": {
      "fields": {}, 
      "methods": {
        "getUnsolicitedDataPolicy()": {
          "return_type": "class fw::UnsolicitedDataPolicy", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "create(const std::string &)": {
          "return_type": "class unique_ptr<nfd::fw::UnsolicitedDataPolicy>", 
          "linesOfCode": 0, 
          "parameter": {
            "policyName": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getPolicyNames()": {
          "return_type": "class std::set<std::string>", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRegistry()": {
          "return_type": "class Registry", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "decide(const class nfd::face::Face &, const class ndn::Data &)": {
          "return_type": "class nfd::fw::UnsolicitedDataDecision", 
          "linesOfCode": 0, 
          "parameter": {
            "data": "class ndn::Data", 
            "inFace": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::FaceTable": {
      "fields": {
        "m_lastFaceId": "class FaceId", 
        "beforeRemove": "class signal::Signal<FaceTable, Face >", 
        "afterAdd": "class signal::Signal<FaceTable, Face >", 
        "m_faces": "class FaceMap"
      }, 
      "methods": {
        "add(shared_ptr<class nfd::face::Face>)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "face": "class shared_ptr<nfd::face::Face>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "remove(FaceId)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "faceId": "class FaceId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "addImpl(shared_ptr<class nfd::face::Face>, FaceId)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "faceId": "class FaceId", 
            "face": "class shared_ptr<nfd::face::Face>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "get(FaceId)": {
          "return_type": "class nfd::face::Face", 
          "linesOfCode": 0, 
          "parameter": {
            "id": "class FaceId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "addReserved(shared_ptr<class nfd::face::Face>, FaceId)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "faceId": "class FaceId", 
            "face": "class shared_ptr<nfd::face::Face>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "begin()": {
          "return_type": "class _iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "size()": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFaceTable()": {
          "return_type": "class nfd::FaceTable", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "end()": {
          "return_type": "class _iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getForwardRange()": {
          "return_type": "class ForwardRange", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::tools::nfdc::FaceModule": {
      "fields": {
        "m_status": "class std::vector<FaceStatus>"
      }, 
      "methods": {
        "fetchStatus(class ndn::nfd::Controller &, const function<void (void)> &, const class Controller::DatasetFailCallback &, const class ndn::nfd::CommandOptions &)": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {
            "controller": "class ndn::nfd::Controller", 
            "onSuccess": "class function<void ()>", 
            "onFailure": "class Controller::DatasetFailCallback", 
            "options": "class ndn::nfd::CommandOptions"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatStatusXml(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatItemXml(std::ostream &, const class ndn::nfd::FaceStatus &)": {
          "return_type": "class void", 
          "linesOfCode": 48, 
          "parameter": {
            "item": "class ndn::nfd::FaceStatus", 
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatItemText(std::ostream &, const class ndn::nfd::FaceStatus &)": {
          "return_type": "class void", 
          "linesOfCode": 34, 
          "parameter": {
            "item": "class ndn::nfd::FaceStatus", 
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatStatusText(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 8, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::tools::nfdc::Module", 
        "noncopyable"
      ]
    }, 
    "class nfd::fw::NfdAutoAdmitNetworkUnsolicitedDataPolicyUnsolicitedDataPolicyRegistrationClass": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::measurements::Entry": {
      "fields": {
        "m_expiry": "class time::steady_clock::TimePoint", 
        "m_nameTreeEntry": "class name_tree::Entry", 
        "m_cleanup": "class scheduler::EventId", 
        "m_name": "class ndn::Name"
      }, 
      "methods": {
        "getMeasurementsEntry()": {
          "return_type": "class measurements::Entry", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getName()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::StrategyInfoHost", 
        "noncopyable"
      ]
    }, 
    "class nfd::tools::nfdc::FaceIdFetcher": {
      "fields": {
        "m_face": "class ndn::Face", 
        "m_onSucceed": "class SuccessCallback", 
        "m_onFail": "class FailureCallback", 
        "m_controller": "class ndn::nfd::Controller", 
        "m_allowCreate": "class bool", 
        "m_validator": "class ndn::ValidatorNull"
      }, 
      "methods": {
        "start(ndn::Face &, ndn::nfd::Controller &, const std::string &, _Bool, const SuccessCallback &, const FailureCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 42, 
          "parameter": {
            "allowCreate": "class bool", 
            "onSucceed": "class SuccessCallback", 
            "onFail": "class FailureCallback", 
            "face": "class ndn::Face", 
            "controller": "class ndn::nfd::Controller", 
            "input": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onFaceCreateError(const ndn::nfd::ControlResponse &, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 8, 
          "parameter": {
            "message": "class std::string", 
            "response": "class ndn::nfd::ControlResponse"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "succeed(uint32_t)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "faceId": "class uint32_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "startFaceCreate(const class ndn::util::FaceUri &)": {
          "return_type": "class void", 
          "linesOfCode": 10, 
          "parameter": {
            "canonicalUri": "class ndn::util::FaceUri"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onQueryFailure(uint32_t, const class ndn::util::FaceUri &)": {
          "return_type": "class void", 
          "linesOfCode": 8, 
          "parameter": {
            "errorCode": "class uint32_t", 
            "canonicalUri": "class ndn::util::FaceUri"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onQuerySuccess(const ndn::ConstBufferPtr &, const class ndn::util::FaceUri &)": {
          "return_type": "class void", 
          "linesOfCode": 28, 
          "parameter": {
            "canonicalUri": "class ndn::util::FaceUri", 
            "data": "class ndn::ConstBufferPtr"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "fail(const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "reason": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "startGetFaceId(const class ndn::util::FaceUri &)": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {
            "faceUri": "class ndn::util::FaceUri"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onCanonizeFailure(const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "reason": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onCanonizeSuccess(const class ndn::util::FaceUri &)": {
          "return_type": "class void", 
          "linesOfCode": 18, 
          "parameter": {
            "canonicalUri": "class ndn::util::FaceUri"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::NfdManagerBase": {
      "fields": {
        "m_authenticator": "class nfd::CommandAuthenticator"
      }, 
      "methods": {
        "makeAuthorization(const std::string &)": {
          "return_type": "class ndn::mgmt::Authorization", 
          "linesOfCode": 5, 
          "parameter": {
            "verb": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::ManagerBase"
      ]
    }, 
    "class nfd::rib::Service::Error": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::runtime_error"
      ]
    }, 
    "class nfd::tools::nfdc::StatusReport": {
      "fields": {
        "sections": "class std::vector<unique_ptr<Module> >"
      }, 
      "methods": {
        "formatXml(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "processEvents(class ndn::Face &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "face": "class ndn::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "collect(class ndn::Face &, class ndn::security::v1::KeyChain &, class ndn::security::Validator &, const class ndn::nfd::CommandOptions &)": {
          "return_type": "class uint32_t", 
          "linesOfCode": 20, 
          "parameter": {
            "validator": "class ndn::security::Validator", 
            "keyChain": "class ndn::security::v1::KeyChain", 
            "options": "class ndn::nfd::CommandOptions", 
            "face": "class ndn::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatText(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::name_tree::NameTree": {
      "fields": {
        "m_ht": "class nfd::name_tree::Hashtable"
      }, 
      "methods": {
        "lookup(const fib::Entry &)": {
          "return_type": "class nfd::name_tree::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "fibEntry": "class fib::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findExactMatch(const class ndn::Name &)": {
          "return_type": "class nfd::name_tree::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "size()": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "lookup(const strategy_choice::Entry &)": {
          "return_type": "class nfd::name_tree::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "strategyChoiceEntry": "class strategy_choice::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "fullEnumerate(const EntrySelector &)": {
          "return_type": "class Range", 
          "linesOfCode": 0, 
          "parameter": {
            "entrySelector": "class EntrySelector"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findLongestPrefixMatch(const class nfd::name_tree::Entry &, const EntrySelector &)": {
          "return_type": "class nfd::name_tree::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "entry": "class nfd::name_tree::Entry", 
            "entrySelector": "class EntrySelector"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "eraseIfEmpty(class nfd::name_tree::Entry *, _Bool)": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {
            "entry": "class nfd::name_tree::Entry", 
            "canEraseAncestors": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findLongestPrefixMatch(const pit::Entry &, const EntrySelector &)": {
          "return_type": "class nfd::name_tree::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "pitEntry": "class pit::Entry", 
            "entrySelector": "class EntrySelector"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "lookup(const class ndn::Name &)": {
          "return_type": "class nfd::name_tree::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findLongestPrefixMatch(const class ndn::Name &, const EntrySelector &)": {
          "return_type": "class nfd::name_tree::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "name": "class ndn::Name", 
            "entrySelector": "class EntrySelector"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "lookup(const pit::Entry &)": {
          "return_type": "class nfd::name_tree::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "pitEntry": "class pit::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getNBuckets()": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "begin()": {
          "return_type": "class _iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "lookup(const measurements::Entry &)": {
          "return_type": "class nfd::name_tree::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "measurementsEntry": "class measurements::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "end()": {
          "return_type": "class _iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findAllMatches(const class ndn::Name &, const EntrySelector &)": {
          "return_type": "class Range", 
          "linesOfCode": 0, 
          "parameter": {
            "name": "class ndn::Name", 
            "entrySelector": "class EntrySelector"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getNameTree()": {
          "return_type": "class nfd::name_tree::NameTree", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "partialEnumerate(const class ndn::Name &, const EntrySubTreeSelector &)": {
          "return_type": "class Range", 
          "linesOfCode": 0, 
          "parameter": {
            "entrySubTreeSelector": "class EntrySubTreeSelector", 
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::fw::asf::NamespaceInfo": {
      "fields": {
        "m_fit": "class FaceInfoTable", 
        "m_isProbingDue": "class bool", 
        "m_hasFirstProbeBeenScheduled": "class bool"
      }, 
      "methods": {
        "isProbingDue()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getTypeId()": {
          "return_type": "class int", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "end()": {
          "return_type": "class FaceInfoTable::iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setHasFirstProbeBeenScheduled(_Bool)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "hasBeenScheduled": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "expireFaceInfo(nfd::face::FaceId)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "faceId": "class nfd::face::FaceId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFaceInfo(const fib::Entry &, const class nfd::face::Face &)": {
          "return_type": "class nfd::fw::asf::FaceInfo", 
          "linesOfCode": 12, 
          "parameter": {
            "fibEntry": "class fib::Entry", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "find(nfd::face::FaceId)": {
          "return_type": "class FaceInfoTable::iterator", 
          "linesOfCode": 0, 
          "parameter": {
            "faceId": "class nfd::face::FaceId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "get(nfd::face::FaceId)": {
          "return_type": "class nfd::fw::asf::FaceInfo", 
          "linesOfCode": 0, 
          "parameter": {
            "faceId": "class nfd::face::FaceId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "extendFaceInfoLifetime(class nfd::fw::asf::FaceInfo &, const class nfd::face::Face &)": {
          "return_type": "class void", 
          "linesOfCode": 12, 
          "parameter": {
            "info": "class nfd::fw::asf::FaceInfo", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getOrCreateFaceInfo(const fib::Entry &, const class nfd::face::Face &)": {
          "return_type": "class nfd::fw::asf::FaceInfo", 
          "linesOfCode": 19, 
          "parameter": {
            "fibEntry": "class fib::Entry", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setIsProbingDue(_Bool)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "isProbingDue": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "insert(nfd::face::FaceId)": {
          "return_type": "class FaceInfoTable::iterator", 
          "linesOfCode": 0, 
          "parameter": {
            "faceId": "class nfd::face::FaceId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isFirstProbeScheduled()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::StrategyInfo"
      ]
    }, 
    "class nfd::strategy_choice::Entry": {
      "fields": {
        "m_nameTreeEntry": "class name_tree::Entry", 
        "m_prefix": "class ndn::Name", 
        "m_strategy": "class unique_ptr<fw::Strategy>"
      }, 
      "methods": {
        "setStrategy(unique_ptr<fw::Strategy>)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "strategy": "class unique_ptr<fw::Strategy>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getPrefix()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getStrategyChoiceEntry()": {
          "return_type": "class strategy_choice::Entry", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getStrategyInstanceName()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getStrategy()": {
          "return_type": "class fw::Strategy", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::face::LpReassembler": {
      "fields": {
        "m_options": "class nfd::face::LpReassembler::Options", 
        "m_linkService": "class nfd::face::LinkService", 
        "m_partialPackets": "class std::map<Key, PartialPacket>", 
        "beforeTimeout": "class signal::Signal<LpReassembler, Transport::EndpointId, size_t>"
      }, 
      "methods": {
        "size()": {
          "return_type": "class size_t", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "receiveFragment(class Transport::EndpointId, const lp::Packet &)": {
          "return_type": "class std::tuple<bool, Block, lp::Packet>", 
          "linesOfCode": 0, 
          "parameter": {
            "packet": "class lp::Packet", 
            "remoteEndpoint": "class Transport::EndpointId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doReassembly(const Key &)": {
          "return_type": "class ndn::Block", 
          "linesOfCode": 0, 
          "parameter": {
            "key": "class Key"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setOptions(const class nfd::face::LpReassembler::Options &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "options": "class nfd::face::LpReassembler::Options"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "timeoutPartialPacket(const Key &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "key": "class Key"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getLinkService()": {
          "return_type": "class nfd::face::LinkService", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::ManagerBase": {
      "fields": {
        "m_module": "class std::string", 
        "m_dispatcher": "class ndn::mgmt::Dispatcher"
      }, 
      "methods": {
        "makeAuthorization(const std::string &)": {
          "return_type": "class ndn::mgmt::Authorization", 
          "linesOfCode": 0, 
          "parameter": {
            "verb": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "registerStatusDatasetHandler(const std::string &, const ndn::mgmt::StatusDatasetHandler &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "handler": "class ndn::mgmt::StatusDatasetHandler", 
            "verb": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "extractRequester(const class ndn::Interest &, ndn::mgmt::AcceptContinuation)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "accept": "class ndn::mgmt::AcceptContinuation", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "validateParameters(const nfd::ControlCommand &, const ndn::mgmt::ControlParameters &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "command": "class nfd::ControlCommand", 
            "parameters": "class ndn::mgmt::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "registerNotificationStream(const std::string &)": {
          "return_type": "class ndn::mgmt::PostNotification", 
          "linesOfCode": 0, 
          "parameter": {
            "verb": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "makeRelPrefix(const std::string &)": {
          "return_type": "class PartialName", 
          "linesOfCode": 5, 
          "parameter": {
            "verb": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getModule()": {
          "return_type": "class std::string", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "handleCommand(shared_ptr<nfd::ControlCommand>, const ControlCommandHandler &, const class ndn::Name &, const class ndn::Interest &, const ndn::mgmt::ControlParameters &, ndn::mgmt::CommandContinuation)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "command": "class shared_ptr<nfd::ControlCommand>", 
            "prefix": "class ndn::Name", 
            "handler": "class ControlCommandHandler", 
            "done": "class ndn::mgmt::CommandContinuation", 
            "interest": "class ndn::Interest", 
            "params": "class ndn::mgmt::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::fw::MulticastStrategy": {
      "fields": {}, 
      "methods": {
        "getStrategyName()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterReceiveInterest(const class nfd::face::Face &, const class ndn::Interest &, const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 19, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::Strategy"
      ]
    }, 
    "class nfd::tools::nfdc::CommandArguments": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::map<std::string, boost::any>"
      ]
    }, 
    "class nfd::NetworkInterfaceInfo": {
      "fields": {
        "index": "class int", 
        "name": "class std::string", 
        "ipv4Addresses": "class std::vector<boost::asio::ip::address_v4>", 
        "broadcastAddress": "class boost::asio::ip::address_v4", 
        "etherAddress": "class ethernet::Address", 
        "ipv6Addresses": "class std::vector<boost::asio::ip::address_v6>", 
        "flags": "class unsigned int"
      }, 
      "methods": {
        "isUp()": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isLoopback()": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isMulticastCapable()": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isBroadcastCapable()": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "listNetifs()": {
          "return_type": "class std::vector<NetworkInterfaceInfo>", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::fw::AdmitNetworkUnsolicitedDataPolicy": {
      "fields": {}, 
      "methods": {
        "decide(const class nfd::face::Face &, const class ndn::Data &)": {
          "return_type": "class nfd::fw::UnsolicitedDataDecision", 
          "linesOfCode": 8, 
          "parameter": {
            "data": "class ndn::Data", 
            "inFace": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::UnsolicitedDataPolicy"
      ]
    }, 
    "class nfd::LoggerFactory": {
      "fields": {
        "m_defaultLevel": "class nfd::LogLevel", 
        "m_levelNames": "class LevelMap", 
        "m_loggersGuard": "class std::mutex", 
        "m_loggers": "class LoggerMap"
      }, 
      "methods": {
        "setConfigFile(class nfd::ConfigFile &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "config": "class nfd::ConfigFile"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "flushBackend()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setDefaultLevel(enum nfd::LogLevel)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "level": "class nfd::LogLevel"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createLogger(const std::string &)": {
          "return_type": "class nfd::Logger", 
          "linesOfCode": 0, 
          "parameter": {
            "moduleName": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onConfig(const ConfigSection &, _Bool, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "section": "class ConfigSection", 
            "isDryRun": "class bool", 
            "filename": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getInstance()": {
          "return_type": "class nfd::LoggerFactory", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "create(const std::string &)": {
          "return_type": "class nfd::Logger", 
          "linesOfCode": 0, 
          "parameter": {
            "moduleName": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getModules()": {
          "return_type": "class std::list<std::string>", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "extractLevel(const ConfigSection &, const std::string &)": {
          "return_type": "class nfd::LogLevel", 
          "linesOfCode": 0, 
          "parameter": {
            "item": "class ConfigSection", 
            "key": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "parseLevel(const std::string &)": {
          "return_type": "class nfd::LogLevel", 
          "linesOfCode": 0, 
          "parameter": {
            "level": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getDefaultLevel()": {
          "return_type": "class nfd::LogLevel", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::face::UnicastUdpTransport": {
      "fields": {
        "m_idleTimeout": "class time::nanoseconds", 
        "m_closeIfIdleEvent": "class scheduler::ScopedEventId"
      }, 
      "methods": {
        "canChangePersistencyToImpl(ndn::nfd::FacePersistency)": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {
            "newPersistency": "class ndn::nfd::FacePersistency"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "scheduleClosureWhenIdle()": {
          "return_type": "class void", 
          "linesOfCode": 15, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterChangePersistency(ndn::nfd::FacePersistency)": {
          "return_type": "class void", 
          "linesOfCode": 12, 
          "parameter": {
            "oldPersistency": "class ndn::nfd::FacePersistency"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "DatagramTransport<boost::asio::ip::udp, struct nfd::face::Unicast>"
      ]
    }, 
    "class nfd::ConfigFile": {
      "fields": {
        "m_unknownSectionCallback": "class UnknownConfigSectionHandler", 
        "m_subscriptions": "class std::map<std::string, ConfigSectionHandler>", 
        "m_global": "class ConfigSection"
      }, 
      "methods": {
        "ignoreUnknownSection(const std::string &, const std::string &, const ConfigSection &, _Bool)": {
          "return_type": "class void", 
          "linesOfCode": 8, 
          "parameter": {
            "section": "class ConfigSection", 
            "sectionName": "class std::string", 
            "isDryRun": "class bool", 
            "filename": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "parseYesNo(const ConfigSection &, const std::string &, const std::string &)": {
          "return_type": "class bool", 
          "linesOfCode": 16, 
          "parameter": {
            "node": "class ConfigSection", 
            "key": "class std::string", 
            "sectionName": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "parseYesNo(const ConfigSection::value_type &, const std::string &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "option": "class ConfigSection::value_type", 
            "sectionName": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "parse(const std::string &, _Bool, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "input": "class std::string", 
            "isDryRun": "class bool", 
            "filename": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "addSectionHandler(const std::string &, ConfigSectionHandler)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "subscriber": "class ConfigSectionHandler", 
            "sectionName": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "parse(const std::string &, _Bool)": {
          "return_type": "class void", 
          "linesOfCode": 10, 
          "parameter": {
            "isDryRun": "class bool", 
            "filename": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "parse(const ConfigSection &, _Bool, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "isDryRun": "class bool", 
            "config": "class ConfigSection", 
            "filename": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "parse(std::istream &, _Bool, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 16, 
          "parameter": {
            "input": "class std::istream", 
            "isDryRun": "class bool", 
            "filename": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "process(_Bool, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 22, 
          "parameter": {
            "isDryRun": "class bool", 
            "filename": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "throwErrorOnUnknownSection(const std::string &, const std::string &, const ConfigSection &, _Bool)": {
          "return_type": "class void", 
          "linesOfCode": 12, 
          "parameter": {
            "section": "class ConfigSection", 
            "sectionName": "class std::string", 
            "isDryRun": "class bool", 
            "filename": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::rib::Route": {
      "fields": {
        "origin": "class uint64_t", 
        "m_expirationEvent": "class scheduler::EventId", 
        "expires": "class time::steady_clock::TimePoint", 
        "cost": "class uint64_t", 
        "flags": "class uint64_t", 
        "faceId": "class uint64_t"
      }, 
      "methods": {
        "getExpirationEvent()": {
          "return_type": "class scheduler::EventId", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setExpirationEvent(const scheduler::EventId)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "eid": "class scheduler::EventId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isCapture()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator==(const class nfd::rib::Route &)": {
          "return_type": "class bool", 
          "linesOfCode": 9, 
          "parameter": {
            "other": "class nfd::rib::Route"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isChildInherit()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::face::FaceSystem": {
      "fields": {
        "m_factories": "class std::map<std::string, unique_ptr<ProtocolFactory> >", 
        "m_faceTable": "class nfd::FaceTable", 
        "m_factoryByScheme": "class std::map<std::string, ProtocolFactory >"
      }, 
      "methods": {
        "listProtocolFactories()": {
          "return_type": "class std::set< ProtocolFactory >", 
          "linesOfCode": 9, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFactoryById(const std::string &)": {
          "return_type": "class nfd::face::ProtocolFactory", 
          "linesOfCode": 6, 
          "parameter": {
            "id": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "processConfig(const ConfigSection &, _Bool, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 51, 
          "parameter": {
            "isDryRun": "class bool", 
            "configSection": "class ConfigSection", 
            "filename": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFactoryByScheme(const std::string &)": {
          "return_type": "class nfd::face::ProtocolFactory", 
          "linesOfCode": 6, 
          "parameter": {
            "scheme": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setConfigFile(class nfd::ConfigFile &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "configFile": "class nfd::ConfigFile"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::pit::Entry": {
      "fields": {
        "m_stragglerTimer": "class scheduler::EventId", 
        "m_nameTreeEntry": "class name_tree::Entry", 
        "m_outRecords": "class OutRecordCollection", 
        "m_unsatisfyTimer": "class scheduler::EventId", 
        "m_inRecords": "class InRecordCollection", 
        "m_interest": "class shared_ptr< ndn::Interest>"
      }, 
      "methods": {
        "getPitEntries()": {
          "return_type": "class std::vector<shared_ptr<pit::Entry> >", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "out_begin()": {
          "return_type": "class OutRecordCollection::_iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getInRecords()": {
          "return_type": "class InRecordCollection", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator*()": {
          "return_type": "class nfd::pit::Entry", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasOutRecords()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "insert(const class ndn::Interest &)": {
          "return_type": "class std::pair<shared_ptr<Entry>, bool>", 
          "linesOfCode": 5, 
          "parameter": {
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getInterest()": {
          "return_type": "class ndn::Interest", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getName()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getOutRecord(const class nfd::face::Face &)": {
          "return_type": "class OutRecordCollection::iterator", 
          "linesOfCode": 0, 
          "parameter": {
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "insertOrUpdateOutRecord(class nfd::face::Face &, const class ndn::Interest &)": {
          "return_type": "class OutRecordCollection::iterator", 
          "linesOfCode": 0, 
          "parameter": {
            "interest": "class ndn::Interest", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "deleteOutRecord(const class nfd::face::Face &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "deleteInRecord(const class nfd::face::Face &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "in_end()": {
          "return_type": "class InRecordCollection::_iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator->()": {
          "return_type": "class shared_ptr<nfd::pit::Entry>", 
          "linesOfCode": 7, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "insertOrUpdateInRecord(class nfd::face::Face &, const class ndn::Interest &)": {
          "return_type": "class InRecordCollection::iterator", 
          "linesOfCode": 0, 
          "parameter": {
            "interest": "class ndn::Interest", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getInRecord(const class nfd::face::Face &)": {
          "return_type": "class InRecordCollection::iterator", 
          "linesOfCode": 0, 
          "parameter": {
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "find(const class ndn::Interest &)": {
          "return_type": "class shared_ptr<nfd::pit::Entry>", 
          "linesOfCode": 5, 
          "parameter": {
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "out_end()": {
          "return_type": "class OutRecordCollection::_iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "clearInRecords()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "canMatch(const class ndn::Interest &, size_t)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "nEqualNameComps": "class size_t", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "in_begin()": {
          "return_type": "class InRecordCollection::_iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getOutRecords()": {
          "return_type": "class OutRecordCollection", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasInRecords()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::StrategyInfoHost", 
        "noncopyable"
      ]
    }, 
    "class ndn::tools::autoconfig::MulticastDiscovery": {
      "fields": {
        "m_nFinishedRegs": "class size_t", 
        "m_nRequestedRegs": "class size_t"
      }, 
      "methods": {
        "requestHubData()": {
          "return_type": "class void", 
          "linesOfCode": 12, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onRegisterFailure(const ControlResponse &)": {
          "return_type": "class void", 
          "linesOfCode": 16, 
          "parameter": {
            "response": "class ControlResponse"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onSuccess(const class ndn::Data &)": {
          "return_type": "class void", 
          "linesOfCode": 15, 
          "parameter": {
            "data": "class ndn::Data"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onRegisterSuccess()": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "start()": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setStrategy()": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onSetStrategyFailure(const ControlResponse &)": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {
            "response": "class ControlResponse"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "collectMulticastFaces()": {
          "return_type": "class void", 
          "linesOfCode": 11, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "registerHubDiscoveryPrefix(const std::vector<ndn::nfd::FaceStatus> &)": {
          "return_type": "class void", 
          "linesOfCode": 29, 
          "parameter": {
            "dataset": "class std::vector<ndn::nfd::FaceStatus>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class ndn::tools::autoconfig::Base"
      ]
    }, 
    "class nfd::TcpChannel": {
      "fields": {
        "m_acceptor": "class boost::asio::ip::tcp::acceptor", 
        "m_acceptSocket": "class boost::asio::ip::tcp::socket", 
        "m_localEndpoint": "class tcp::Endpoint", 
        "m_channelFaces": "class std::map<tcp::Endpoint, shared_ptr<Face> >"
      }, 
      "methods": {
        "accept(const FaceCreatedCallback &, const FaceCreationFailedCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "onAcceptFailed": "class FaceCreationFailedCallback", 
            "onFaceCreated": "class FaceCreatedCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "size()": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "listen(const FaceCreatedCallback &, const FaceCreationFailedCallback &, int)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "onAcceptFailed": "class FaceCreationFailedCallback", 
            "onFaceCreated": "class FaceCreatedCallback", 
            "backlog": "class int"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createFace(boost::asio::ip::class tcp::socket &&, _Bool, _Bool, const FaceCreatedCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "wantLocalFieldsEnabled": "class bool", 
            "isOnDemand": "class bool", 
            "socket": "class boost::asio::ip::tcp::socket", 
            "onFaceCreated": "class FaceCreatedCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isListening()": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "handleConnectTimeout(const shared_ptr<boost::asio::ip::class tcp::socket> &, const FaceCreationFailedCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "onConnectFailed": "class FaceCreationFailedCallback", 
            "socket": "class shared_ptr<boost::asio::ip::tcp::socket>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "handleConnect(const boost::system::error_code &, const shared_ptr<boost::asio::ip::class tcp::socket> &, _Bool, const scheduler::EventId &, const FaceCreatedCallback &, const FaceCreationFailedCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "wantLocalFieldsEnabled": "class bool", 
            "socket": "class shared_ptr<boost::asio::ip::tcp::socket>", 
            "connectTimeoutEvent": "class scheduler::EventId", 
            "onConnectFailed": "class FaceCreationFailedCallback", 
            "error": "class boost::system::error_code", 
            "onFaceCreated": "class FaceCreatedCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "handleAccept(const boost::system::error_code &, const FaceCreatedCallback &, const FaceCreationFailedCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "onAcceptFailed": "class FaceCreationFailedCallback", 
            "onFaceCreated": "class FaceCreatedCallback", 
            "error": "class boost::system::error_code"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "connect(const tcp::Endpoint &, _Bool, const FaceCreatedCallback &, const FaceCreationFailedCallback &, const time::seconds &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "wantLocalFieldsEnabled": "class bool", 
            "onConnectFailed": "class FaceCreationFailedCallback", 
            "onFaceCreated": "class FaceCreatedCallback", 
            "timeout": "class time::seconds", 
            "remoteEndpoint": "class tcp::Endpoint"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::Channel"
      ]
    }, 
    "class nfd::fw::RetxSuppressionExponential": {
      "fields": {
        "m_multiplier": "class float", 
        "m_maxInterval": "class Duration", 
        "m_initialInterval": "class Duration"
      }, 
      "methods": {
        "decide(const class nfd::face::Face &, const class ndn::Interest &, pit::Entry &)": {
          "return_type": "class RetxSuppression::Result", 
          "linesOfCode": 24, 
          "parameter": {
            "pitEntry": "class pit::Entry", 
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::RetxSuppression"
      ]
    }, 
    "class nfd::face::ProtocolFactory::Error": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::runtime_error"
      ]
    }, 
    "class nfd::rib::FibUpdater": {
      "fields": {
        "m_inheritedRoutes": "class RibUpdateList", 
        "m_controller": "class ndn::nfd::Controller", 
        "m_updatesForBatchFaceId": "class FibUpdateList", 
        "m_batchFaceId": "class uint64_t", 
        "m_rib": "class nfd::rib::Rib", 
        "m_updatesForNonBatchFaceId": "class FibUpdateList"
      }, 
      "methods": {
        "addInheritedRoutes(const class nfd::rib::RibEntry &, const class Rib::RouteSet &)": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {
            "entry": "class nfd::rib::RibEntry", 
            "routesToAdd": "class Rib::RouteSet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "removeInheritedRoute(const class ndn::Name &, const class nfd::rib::Route &)": {
          "return_type": "class void", 
          "linesOfCode": 10, 
          "parameter": {
            "route": "class nfd::rib::Route", 
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createFibUpdatesForUpdatedRoute(const class nfd::rib::RibEntry &, const class nfd::rib::Route &, const class nfd::rib::Route &)": {
          "return_type": "class void", 
          "linesOfCode": 98, 
          "parameter": {
            "entry": "class nfd::rib::RibEntry", 
            "route": "class nfd::rib::Route", 
            "existingRoute": "class nfd::rib::Route"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "computeUpdatesForUnregistration(const class nfd::rib::RibUpdate &)": {
          "return_type": "class void", 
          "linesOfCode": 41, 
          "parameter": {
            "update": "class nfd::rib::RibUpdate"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createFibUpdatesForErasedRibEntry(const class nfd::rib::RibEntry &)": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {
            "entry": "class nfd::rib::RibEntry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createFibUpdatesForNewRoute(const class nfd::rib::RibEntry &, const class nfd::rib::Route &, _Bool)": {
          "return_type": "class void", 
          "linesOfCode": 38, 
          "parameter": {
            "entry": "class nfd::rib::RibEntry", 
            "route": "class nfd::rib::Route", 
            "captureWasTurnedOn": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "traverseSubTree(const class nfd::rib::RibEntry &, class Rib::class Rib::RouteSet, class Rib::class Rib::RouteSet)": {
          "return_type": "class void", 
          "linesOfCode": 49, 
          "parameter": {
            "entry": "class nfd::rib::RibEntry", 
            "routesToAdd": "class Rib::Rib::RouteSet", 
            "routesToRemove": "class Rib::Rib::RouteSet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "addInheritedRoutes(const class ndn::Name &, const class Rib::RouteSet &, const class nfd::rib::Route &)": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {
            "ignore": "class nfd::rib::Route", 
            "name": "class ndn::Name", 
            "routesToAdd": "class Rib::RouteSet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "addInheritedRoute(const class ndn::Name &, const class nfd::rib::Route &)": {
          "return_type": "class void", 
          "linesOfCode": 10, 
          "parameter": {
            "route": "class nfd::rib::Route", 
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "addFibUpdate(class nfd::rib::FibUpdate)": {
          "return_type": "class void", 
          "linesOfCode": 22, 
          "parameter": {
            "update": "class nfd::rib::FibUpdate"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "addFibUpdate(const class nfd::rib::FibUpdate)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "update": "class nfd::rib::FibUpdate"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "sendUpdatesForNonBatchFaceId(const FibUpdateSuccessCallback &, const FibUpdateFailureCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 11, 
          "parameter": {
            "onSuccess": "class FibUpdateSuccessCallback", 
            "onFailure": "class FibUpdateFailureCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "sendUpdatesForBatchFaceId(const FibUpdateSuccessCallback &, const FibUpdateFailureCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 11, 
          "parameter": {
            "onSuccess": "class FibUpdateSuccessCallback", 
            "onFailure": "class FibUpdateFailureCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "computeUpdatesForRegistration(const class nfd::rib::RibUpdate &)": {
          "return_type": "class void", 
          "linesOfCode": 53, 
          "parameter": {
            "update": "class nfd::rib::RibUpdate"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "sendAddNextHopUpdate(const class nfd::rib::FibUpdate &, const FibUpdateSuccessCallback &, const FibUpdateFailureCallback &, uint32_t)": {
          "return_type": "class void", 
          "linesOfCode": 14, 
          "parameter": {
            "nTimeouts": "class uint32_t", 
            "update": "class nfd::rib::FibUpdate", 
            "onFailure": "class FibUpdateFailureCallback", 
            "onSuccess": "class FibUpdateSuccessCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createFibUpdatesForNewRoute(const class nfd::rib::RibEntry &, const class nfd::rib::Route &, const _Bool)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "entry": "class nfd::rib::RibEntry", 
            "route": "class nfd::rib::Route", 
            "captureWasTurnedOn": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "computeUpdates(const class nfd::rib::RibUpdateBatch &)": {
          "return_type": "class void", 
          "linesOfCode": 25, 
          "parameter": {
            "batch": "class nfd::rib::RibUpdateBatch"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "sendUpdates(const FibUpdateList &, const FibUpdateSuccessCallback &, const FibUpdateFailureCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 19, 
          "parameter": {
            "updates": "class FibUpdateList", 
            "onFailure": "class FibUpdateFailureCallback", 
            "onSuccess": "class FibUpdateSuccessCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onUpdateSuccess(const class nfd::rib::FibUpdate, const FibUpdateSuccessCallback &, const FibUpdateFailureCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 20, 
          "parameter": {
            "update": "class nfd::rib::FibUpdate", 
            "onFailure": "class FibUpdateFailureCallback", 
            "onSuccess": "class FibUpdateSuccessCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createFibUpdatesForErasedRoute(const class nfd::rib::RibEntry &, const class nfd::rib::Route &, const _Bool)": {
          "return_type": "class void", 
          "linesOfCode": 67, 
          "parameter": {
            "entry": "class nfd::rib::RibEntry", 
            "route": "class nfd::rib::Route", 
            "captureWasTurnedOff": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createFibUpdatesForNewRibEntry(const class ndn::Name &, const class nfd::rib::Route &, const class Rib::RibEntryList &)": {
          "return_type": "class void", 
          "linesOfCode": 46, 
          "parameter": {
            "route": "class nfd::rib::Route", 
            "name": "class ndn::Name", 
            "children": "class Rib::RibEntryList"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "sendRemoveNextHopUpdate(const class nfd::rib::FibUpdate &, const FibUpdateSuccessCallback &, const FibUpdateFailureCallback &, uint32_t)": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {
            "nTimeouts": "class uint32_t", 
            "update": "class nfd::rib::FibUpdate", 
            "onFailure": "class FibUpdateFailureCallback", 
            "onSuccess": "class FibUpdateSuccessCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "removeInheritedRoutes(const class nfd::rib::RibEntry &, const class Rib::RouteSet &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "entry": "class nfd::rib::RibEntry", 
            "routesToRemove": "class Rib::RouteSet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "removeInheritedRoutes(const class nfd::rib::RibEntry &, const class Rib::class Rib::RouteSet &)": {
          "return_type": "class void", 
          "linesOfCode": 11, 
          "parameter": {
            "entry": "class nfd::rib::RibEntry", 
            "routesToRemove": "class Rib::Rib::RouteSet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "traverseSubTree(const class nfd::rib::RibEntry &, class Rib::RouteSet, class Rib::RouteSet)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "entry": "class nfd::rib::RibEntry", 
            "routesToAdd": "class Rib::RouteSet", 
            "routesToRemove": "class Rib::RouteSet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "modifyChildrensInheritedRoutes(const class Rib::RibEntryList &, const class Rib::RouteSet &, const class Rib::RouteSet &)": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {
            "routesToRemove": "class Rib::RouteSet", 
            "children": "class Rib::RibEntryList", 
            "routesToAdd": "class Rib::RouteSet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "computeAndSendFibUpdates(const class nfd::rib::RibUpdateBatch &, const FibUpdateSuccessCallback &, const FibUpdateFailureCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 18, 
          "parameter": {
            "batch": "class nfd::rib::RibUpdateBatch", 
            "onFailure": "class FibUpdateFailureCallback", 
            "onSuccess": "class FibUpdateSuccessCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onUpdateError(const class nfd::rib::FibUpdate, const FibUpdateSuccessCallback &, const FibUpdateFailureCallback &, const ndn::nfd::ControlResponse &, uint32_t)": {
          "return_type": "class void", 
          "linesOfCode": 30, 
          "parameter": {
            "response": "class ndn::nfd::ControlResponse", 
            "nTimeouts": "class uint32_t", 
            "update": "class nfd::rib::FibUpdate", 
            "onFailure": "class FibUpdateFailureCallback", 
            "onSuccess": "class FibUpdateSuccessCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::name_tree::EnumerationImpl": {
      "fields": {
        "nt": "class nfd::name_tree::NameTree", 
        "ht": "class nfd::name_tree::Hashtable"
      }, 
      "methods": {
        "advance(class nfd::name_tree::Iterator &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "i": "class nfd::name_tree::Iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::UdpChannel": {
      "fields": {
        "m_channelFaces": "class std::map<udp::Endpoint, shared_ptr<Face> >", 
        "m_localEndpoint": "class udp::Endpoint", 
        "m_remoteEndpoint": "class udp::Endpoint", 
        "m_socket": "class boost::asio::ip::udp::socket", 
        "m_idleFaceTimeout": "class time::seconds", 
        "m_inputBuffer": "class uint8_t [8800]"
      }, 
      "methods": {
        "createFace(const udp::Endpoint &, ndn::nfd::FacePersistency)": {
          "return_type": "class std::pair<bool, shared_ptr<Face> >", 
          "linesOfCode": 0, 
          "parameter": {
            "persistency": "class ndn::nfd::FacePersistency", 
            "remoteEndpoint": "class udp::Endpoint"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "size()": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "connect(const udp::Endpoint &, ndn::nfd::FacePersistency, const FaceCreatedCallback &, const FaceCreationFailedCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "persistency": "class ndn::nfd::FacePersistency", 
            "onConnectFailed": "class FaceCreationFailedCallback", 
            "onFaceCreated": "class FaceCreatedCallback", 
            "remoteEndpoint": "class udp::Endpoint"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isListening()": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "waitForNewPeer(const FaceCreatedCallback &, const FaceCreationFailedCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "onReceiveFailed": "class FaceCreationFailedCallback", 
            "onFaceCreated": "class FaceCreatedCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "listen(const FaceCreatedCallback &, const FaceCreationFailedCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "onReceiveFailed": "class FaceCreationFailedCallback", 
            "onFaceCreated": "class FaceCreatedCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "handleNewPeer(const boost::system::error_code &, size_t, const FaceCreatedCallback &, const FaceCreationFailedCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "onReceiveFailed": "class FaceCreationFailedCallback", 
            "nBytesReceived": "class size_t", 
            "onFaceCreated": "class FaceCreatedCallback", 
            "error": "class boost::system::error_code"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::Channel"
      ]
    }, 
    "class nfd::fw::NfdAutoAdmitAllUnsolicitedDataPolicyUnsolicitedDataPolicyRegistrationClass": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::NetworkInterfacePredicate": {
      "fields": {
        "m_whitelist": "class std::set<std::string>", 
        "m_blacklist": "class std::set<std::string>"
      }, 
      "methods": {
        "clear()": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "parseWhitelist(const boost::property_tree::ptree &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "list": "class boost::property_tree::ptree"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "parseBlacklist(const boost::property_tree::ptree &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "list": "class boost::property_tree::ptree"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator==(const class nfd::NetworkInterfacePredicate &)": {
          "return_type": "class bool", 
          "linesOfCode": 6, 
          "parameter": {
            "other": "class nfd::NetworkInterfacePredicate"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator!=(const class nfd::NetworkInterfacePredicate &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "other": "class nfd::NetworkInterfacePredicate"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator()(const class nfd::NetworkInterfaceInfo &)": {
          "return_type": "class bool", 
          "linesOfCode": 6, 
          "parameter": {
            "netif": "class nfd::NetworkInterfaceInfo"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::fw::NfdAutoBestRouteStrategy2StrategyRegistrationClass": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class ndn::tools::autoconfig::Base::Error": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::runtime_error"
      ]
    }, 
    "class nfd::name_tree::FullEnumerationImpl": {
      "fields": {
        "m_pred": "class EntrySelector"
      }, 
      "methods": {
        "advance(class nfd::name_tree::Iterator &)": {
          "return_type": "class void", 
          "linesOfCode": 43, 
          "parameter": {
            "i": "class nfd::name_tree::Iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::name_tree::EnumerationImpl"
      ]
    }, 
    "class nfd::fw::ClientControlStrategy": {
      "fields": {}, 
      "methods": {
        "getStrategyName()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::BestRouteStrategyBase"
      ]
    }, 
    "class nfd::rib::NfdRibReadvertiseDestination": {
      "fields": {
        "m_commandPrefix": "class ndn::Name", 
        "m_controller": "class ndn::nfd::Controller"
      }, 
      "methods": {
        "advertise(nfd::rib::ReadvertisedRoute &, std::function<void (void)>, std::function<void (const std::string &)>)": {
          "return_type": "class void", 
          "linesOfCode": 11, 
          "parameter": {
            "failureCb": "class std::function<void ( std::string )>", 
            "successCb": "class std::function<void ()>", 
            "rr": "class nfd::rib::ReadvertisedRoute"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "withdraw(nfd::rib::ReadvertisedRoute &, std::function<void (void)>, std::function<void (const std::string &)>)": {
          "return_type": "class void", 
          "linesOfCode": 11, 
          "parameter": {
            "failureCb": "class std::function<void ( std::string )>", 
            "successCb": "class std::function<void ()>", 
            "rr": "class nfd::rib::ReadvertisedRoute"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::rib::ReadvertiseDestination"
      ]
    }, 
    "class nfd::Nfd": {
      "fields": {
        "m_dispatcher": "class unique_ptr<ndn::mgmt::Dispatcher>", 
        "m_forwarderStatusManager": "class unique_ptr<nfd::ForwarderStatusManager>", 
        "m_strategyChoiceManager": "class unique_ptr<nfd::StrategyChoiceManager>", 
        "m_fibManager": "class unique_ptr<nfd::FibManager>", 
        "m_authenticator": "class shared_ptr<nfd::CommandAuthenticator>", 
        "m_configFile": "class std::string", 
        "m_internalFace": "class shared_ptr<face::Face>", 
        "m_networkMonitor": "class unique_ptr<ndn::util::NetworkMonitor>", 
        "m_reloadConfigEvent": "class scheduler::ScopedEventId", 
        "m_forwarder": "class unique_ptr<nfd::Forwarder>", 
        "m_configSection": "class ConfigSection", 
        "m_internalClientFace": "class shared_ptr<ndn::Face>", 
        "m_keyChain": "class ndn::KeyChain", 
        "m_faceManager": "class unique_ptr<nfd::FaceManager>"
      }, 
      "methods": {
        "reloadConfigFile()": {
          "return_type": "class void", 
          "linesOfCode": 25, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "initializeManagement()": {
          "return_type": "class void", 
          "linesOfCode": 43, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "initialize()": {
          "return_type": "class void", 
          "linesOfCode": 27, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "reloadConfigFileFaceSection()": {
          "return_type": "class void", 
          "linesOfCode": 14, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "initializeLogging()": {
          "return_type": "class void", 
          "linesOfCode": 15, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::pit::FaceRecord": {
      "fields": {
        "m_lastRenewed": "class time::steady_clock::TimePoint", 
        "m_face": "class nfd::face::Face", 
        "m_lastNonce": "class uint32_t", 
        "m_expiry": "class time::steady_clock::TimePoint"
      }, 
      "methods": {
        "update(const class ndn::Interest &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getLastRenewed()": {
          "return_type": "class time::steady_clock::TimePoint", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFace()": {
          "return_type": "class nfd::face::Face", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getLastNonce()": {
          "return_type": "class uint32_t", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getExpiry()": {
          "return_type": "class time::steady_clock::TimePoint", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::StrategyInfoHost"
      ]
    }, 
    "class nfd::face::TcpTransport": {
      "fields": {
        "m_remoteEndpoint": "class typename protocol::endpoint", 
        "m_reconnectEvent": "class scheduler::ScopedEventId", 
        "m_nextReconnectWait": "class time::milliseconds"
      }, 
      "methods": {
        "afterChangePersistency(ndn::nfd::FacePersistency)": {
          "return_type": "class void", 
          "linesOfCode": 12, 
          "parameter": {
            "oldPersistency": "class ndn::nfd::FacePersistency"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "handleReconnect(const boost::system::error_code &)": {
          "return_type": "class void", 
          "linesOfCode": 24, 
          "parameter": {
            "error": "class boost::system::error_code"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doClose()": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "canChangePersistencyToImpl(ndn::nfd::FacePersistency)": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {
            "newPersistency": "class ndn::nfd::FacePersistency"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "handleError(const boost::system::error_code &)": {
          "return_type": "class void", 
          "linesOfCode": 18, 
          "parameter": {
            "error": "class boost::system::error_code"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "reconnect()": {
          "return_type": "class void", 
          "linesOfCode": 25, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "handleReconnectTimeout()": {
          "return_type": "class void", 
          "linesOfCode": 15, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "StreamTransport<boost::asio::ip::tcp>"
      ]
    }, 
    "class nfd::Logger": {
      "fields": {
        "boostLogger": "class boost::log::sources::logger", 
        "m_moduleName": "class std::string", 
        "m_enabledLogLevel": "class nfd::LogLevel"
      }, 
      "methods": {
        "isEnabled(enum nfd::LogLevel)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "level": "class nfd::LogLevel"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setName(const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "name": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getName()": {
          "return_type": "class std::string", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setLogLevel(enum nfd::LogLevel)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "level": "class nfd::LogLevel"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::fib::NextHop": {
      "fields": {
        "m_cost": "class uint64_t", 
        "m_face": "class nfd::face::Face"
      }, 
      "methods": {
        "getCost()": {
          "return_type": "class uint64_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setCost(uint64_t)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "cost": "class uint64_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFace()": {
          "return_type": "class nfd::face::Face", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class ndn::tools::autoconfig::BaseDns::Error": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::runtime_error"
      ]
    }, 
    "class nfd::fw::NfdAutoNccStrategyStrategyRegistrationClass": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class ndn::NdnAutoconfigServer": {
      "fields": {
        "m_routablePrefixesData": "class shared_ptr<ndn::Data>", 
        "m_hubData": "class shared_ptr<ndn::Data>", 
        "m_face": "class ndn::Face"
      }, 
      "methods": {
        "onRegisterFailed(const class ndn::Name &, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name", 
            "reason": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onHubInterest(const class ndn::Name &, const class ndn::Interest &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "name": "class ndn::Name", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "run()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onRoutablePrefixesInterest(const class ndn::Name &, const class ndn::Interest &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "name": "class ndn::Name", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::face::LinkServiceCounters": {
      "fields": {
        "nInData": "class nfd::PacketCounter", 
        "nOutData": "class nfd::PacketCounter", 
        "nInNacks": "class nfd::PacketCounter", 
        "nOutInterests": "class nfd::PacketCounter", 
        "nOutNacks": "class nfd::PacketCounter", 
        "nInInterests": "class nfd::PacketCounter"
      }, 
      "methods": {}, 
      "base_list": []
    }, 
    "class ndn::tools::autoconfig::NdnFchDiscovery": {
      "fields": {
        "m_url": "class std::string"
      }, 
      "methods": {
        "start()": {
          "return_type": "class void", 
          "linesOfCode": 70, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class ndn::tools::autoconfig::Base"
      ]
    }, 
    "class nfd::fw::asf::AsfMeasurements": {
      "fields": {
        "m_measurements": "class nfd::measurements::MeasurementsAccessor"
      }, 
      "methods": {
        "getFaceInfo(const fib::Entry &, const class ndn::Interest &, const class nfd::face::Face &)": {
          "return_type": "class nfd::fw::asf::FaceInfo", 
          "linesOfCode": 6, 
          "parameter": {
            "fibEntry": "class fib::Entry", 
            "interest": "class ndn::Interest", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getOrCreateFaceInfo(const fib::Entry &, const class ndn::Interest &, const class nfd::face::Face &)": {
          "return_type": "class nfd::fw::asf::FaceInfo", 
          "linesOfCode": 6, 
          "parameter": {
            "fibEntry": "class fib::Entry", 
            "interest": "class ndn::Interest", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getNamespaceInfo(const class ndn::Name &)": {
          "return_type": "class nfd::fw::asf::NamespaceInfo", 
          "linesOfCode": 15, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "extendLifetime(measurements::Entry &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "me": "class measurements::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getOrCreateNamespaceInfo(const fib::Entry &, const class ndn::Interest &)": {
          "return_type": "class nfd::fw::asf::NamespaceInfo", 
          "linesOfCode": 22, 
          "parameter": {
            "fibEntry": "class fib::Entry", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::fw::NfdAutoBestRouteStrategyStrategyRegistrationClass": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::cs::lru::NfdAutoLruPolicyCsPolicyRegistrationClass": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::UnixStreamChannel": {
      "fields": {
        "m_endpoint": "class unix_stream::Endpoint", 
        "m_socket": "class boost::asio::local::stream_protocol::socket", 
        "m_acceptor": "class boost::asio::local::stream_protocol::acceptor"
      }, 
      "methods": {
        "accept(const FaceCreatedCallback &, const FaceCreationFailedCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "onAcceptFailed": "class FaceCreationFailedCallback", 
            "onFaceCreated": "class FaceCreatedCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isListening()": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "handleAccept(const boost::system::error_code &, const FaceCreatedCallback &, const FaceCreationFailedCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "onAcceptFailed": "class FaceCreationFailedCallback", 
            "onFaceCreated": "class FaceCreatedCallback", 
            "error": "class boost::system::error_code"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "listen(const FaceCreatedCallback &, const FaceCreationFailedCallback &, int)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "onAcceptFailed": "class FaceCreationFailedCallback", 
            "onFaceCreated": "class FaceCreatedCallback", 
            "backlog": "class int"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::Channel"
      ]
    }, 
    "class ndn::tools::autoconfig::GuessFromIdentityName": {
      "fields": {}, 
      "methods": {
        "start()": {
          "return_type": "class void", 
          "linesOfCode": 22, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class ndn::tools::autoconfig::BaseDns"
      ]
    }, 
    "class nfd::face::UnixStreamFactory": {
      "fields": {
        "m_channels": "class std::map<unix_stream::Endpoint, shared_ptr<UnixStreamChannel> >"
      }, 
      "methods": {
        "createChannel(const std::string &)": {
          "return_type": "class shared_ptr<nfd::UnixStreamChannel>", 
          "linesOfCode": 15, 
          "parameter": {
            "unixSocketPath": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createFace(const class ndn::util::FaceUri &, ndn::nfd::FacePersistency, _Bool, const FaceCreatedCallback &, const FaceCreationFailedCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {
            "wantLocalFieldsEnabled": "class bool", 
            "persistency": "class ndn::nfd::FacePersistency", 
            "onCreated": "class FaceCreatedCallback", 
            "uri": "class ndn::util::FaceUri", 
            "onFailure": "class FaceCreationFailedCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "processConfig(OptionalConfigSection, class FaceSystem::ConfigContext &)": {
          "return_type": "class void", 
          "linesOfCode": 37, 
          "parameter": {
            "context": "class FaceSystem::ConfigContext", 
            "configSection": "class OptionalConfigSection"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getChannels()": {
          "return_type": "class std::vector<shared_ptr< Channel> >", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getId()": {
          "return_type": "class std::string", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findChannel(const unix_stream::Endpoint &)": {
          "return_type": "class shared_ptr<nfd::UnixStreamChannel>", 
          "linesOfCode": 9, 
          "parameter": {
            "endpoint": "class unix_stream::Endpoint"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::face::ProtocolFactory"
      ]
    }, 
    "class nfd::face::NfdAutoUdpFactoryProtocolFactoryRegistrationClass": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::tools::nfdc::CommandParser": {
      "fields": {
        "m_commands": "class CommandContainer", 
        "m_commandOrder": "class std::vector<CommandContainer::_iterator>"
      }, 
      "methods": {
        "addCommand(const class nfd::tools::nfdc::CommandDefinition &, const ExecuteCommand &, std::underlying_type<enum AvailableIn>::type)": {
          "return_type": "class nfd::tools::nfdc::CommandParser", 
          "linesOfCode": 14, 
          "parameter": {
            "execute": "class ExecuteCommand", 
            "modes": "class std::underlying_type<AvailableIn>::type", 
            "def": "class nfd::tools::nfdc::CommandDefinition"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "addAlias(const std::string &, const std::string &, const std::string &)": {
          "return_type": "class nfd::tools::nfdc::CommandParser", 
          "linesOfCode": 6, 
          "parameter": {
            "verb2": "class std::string", 
            "verb": "class std::string", 
            "noun": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "parse(const std::vector<std::string> &, enum nfd::tools::nfdc::ParseMode)": {
          "return_type": "class std::tuple<std::string, std::string, CommandArguments, ExecuteCommand>", 
          "linesOfCode": 29, 
          "parameter": {
            "tokens": "class std::vector<std::string>", 
            "mode": "class nfd::tools::nfdc::ParseMode"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "listCommands(const std::string &, enum nfd::tools::nfdc::ParseMode)": {
          "return_type": "class std::vector< CommandDefinition >", 
          "linesOfCode": 13, 
          "parameter": {
            "noun": "class std::string", 
            "mode": "class nfd::tools::nfdc::ParseMode"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::FaceManager": {
      "fields": {
        "m_faceAddConn": "class signal::ScopedConnection", 
        "m_faceRemoveConn": "class signal::ScopedConnection", 
        "m_faceTable": "class nfd::FaceTable", 
        "m_faceSystem": "class nfd::face::FaceSystem", 
        "m_postNotification": "class ndn::mgmt::PostNotification", 
        "m_faceStateChangeConn": "class std::map<FaceId, signal::ScopedConnection>"
      }, 
      "methods": {
        "setConfigFile(class nfd::ConfigFile &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "configFile": "class nfd::ConfigFile"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterCreateFaceFailure(uint32_t, const std::string &, const ndn::mgmt::CommandContinuation &)": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {
            "status": "class uint32_t", 
            "reason": "class std::string", 
            "done": "class ndn::mgmt::CommandContinuation"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "enableLocalControl(const class ndn::Name &, const class ndn::Interest &, const class ndn::nfd::ControlParameters &, const ndn::mgmt::CommandContinuation &)": {
          "return_type": "class void", 
          "linesOfCode": 23, 
          "parameter": {
            "done": "class ndn::mgmt::CommandContinuation", 
            "topPrefix": "class ndn::Name", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "queryFaces(const class ndn::Name &, const class ndn::Interest &, ndn::mgmt::StatusDatasetContext &)": {
          "return_type": "class void", 
          "linesOfCode": 25, 
          "parameter": {
            "topPrefix": "class ndn::Name", 
            "context": "class ndn::mgmt::StatusDatasetContext", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "disableLocalControl(const class ndn::Name &, const class ndn::Interest &, const class ndn::nfd::ControlParameters &, const ndn::mgmt::CommandContinuation &)": {
          "return_type": "class void", 
          "linesOfCode": 23, 
          "parameter": {
            "done": "class ndn::mgmt::CommandContinuation", 
            "topPrefix": "class ndn::Name", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "destroyFace(const class ndn::Name &, const class ndn::Interest &, const class ndn::nfd::ControlParameters &, const ndn::mgmt::CommandContinuation &)": {
          "return_type": "class void", 
          "linesOfCode": 12, 
          "parameter": {
            "done": "class ndn::mgmt::CommandContinuation", 
            "topPrefix": "class ndn::Name", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "listFaces(const class ndn::Name &, const class ndn::Interest &, ndn::mgmt::StatusDatasetContext &)": {
          "return_type": "class void", 
          "linesOfCode": 11, 
          "parameter": {
            "topPrefix": "class ndn::Name", 
            "context": "class ndn::mgmt::StatusDatasetContext", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "notifyFaceEvent(const class nfd::face::Face &, ndn::nfd::FaceEventKind)": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {
            "kind": "class ndn::nfd::FaceEventKind", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setLinkServiceOptions(class nfd::face::Face &, const class ndn::nfd::ControlParameters &, class ndn::nfd::ControlParameters &)": {
          "return_type": "class void", 
          "linesOfCode": 18, 
          "parameter": {
            "response": "class ndn::nfd::ControlParameters", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "updateFace(const class ndn::Name &, const class ndn::Interest &, const class ndn::nfd::ControlParameters &, const ndn::mgmt::CommandContinuation &)": {
          "return_type": "class void", 
          "linesOfCode": 66, 
          "parameter": {
            "done": "class ndn::mgmt::CommandContinuation", 
            "topPrefix": "class ndn::Name", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "listChannels(const class ndn::Name &, const class ndn::Interest &, ndn::mgmt::StatusDatasetContext &)": {
          "return_type": "class void", 
          "linesOfCode": 14, 
          "parameter": {
            "topPrefix": "class ndn::Name", 
            "context": "class ndn::mgmt::StatusDatasetContext", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createFace(const class ndn::Name &, const class ndn::Interest &, const class ndn::nfd::ControlParameters &, const ndn::mgmt::CommandContinuation &)": {
          "return_type": "class void", 
          "linesOfCode": 44, 
          "parameter": {
            "done": "class ndn::mgmt::CommandContinuation", 
            "topPrefix": "class ndn::Name", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterCreateFaceSuccess(const class ndn::nfd::ControlParameters &, const shared_ptr<class nfd::face::Face> &, const ndn::mgmt::CommandContinuation &)": {
          "return_type": "class void", 
          "linesOfCode": 42, 
          "parameter": {
            "done": "class ndn::mgmt::CommandContinuation", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "face": "class shared_ptr<nfd::face::Face>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "connectFaceStateChangeSignal(const class nfd::face::Face &)": {
          "return_type": "class void", 
          "linesOfCode": 19, 
          "parameter": {
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "matchFilter(const ndn::nfd::FaceQueryFilter &, const class nfd::face::Face &)": {
          "return_type": "class bool", 
          "linesOfCode": 41, 
          "parameter": {
            "filter": "class ndn::nfd::FaceQueryFilter", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "collectFaceStatus(const class nfd::face::Face &, const time::class steady_clock::TimePoint &)": {
          "return_type": "class ndn::nfd::FaceStatus", 
          "linesOfCode": 25, 
          "parameter": {
            "now": "class time::steady_clock::TimePoint", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findFaceForLocalControl(const class ndn::Interest &, const class ndn::nfd::ControlParameters &, const ndn::mgmt::CommandContinuation &)": {
          "return_type": "class nfd::face::Face", 
          "linesOfCode": 26, 
          "parameter": {
            "done": "class ndn::mgmt::CommandContinuation", 
            "request": "class ndn::Interest", 
            "parameters": "class ndn::nfd::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::NfdManagerBase"
      ]
    }, 
    "class nfd::rib::RibUpdate": {
      "fields": {
        "m_route": "class nfd::rib::Route", 
        "m_action": "class nfd::rib::RibUpdate::Action", 
        "m_name": "class ndn::Name"
      }, 
      "methods": {
        "getAction()": {
          "return_type": "class RibUpdate::Action", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setName(const class ndn::Name &)": {
          "return_type": "class nfd::rib::RibUpdate", 
          "linesOfCode": 6, 
          "parameter": {
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRoute()": {
          "return_type": "class nfd::rib::Route", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getName()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setAction(enum nfd::rib::RibUpdate::Action)": {
          "return_type": "class nfd::rib::RibUpdate", 
          "linesOfCode": 6, 
          "parameter": {
            "action": "class nfd::rib::RibUpdate::Action"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setRoute(const class nfd::rib::Route &)": {
          "return_type": "class nfd::rib::RibUpdate", 
          "linesOfCode": 6, 
          "parameter": {
            "route": "class nfd::rib::Route"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::fw::DropAllUnsolicitedDataPolicy": {
      "fields": {}, 
      "methods": {
        "decide(const class nfd::face::Face &, const class ndn::Data &)": {
          "return_type": "class nfd::fw::UnsolicitedDataDecision", 
          "linesOfCode": 5, 
          "parameter": {
            "data": "class ndn::Data", 
            "inFace": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::UnsolicitedDataPolicy"
      ]
    }, 
    "class ndn::tools::autoconfig::GuessFromSearchDomains": {
      "fields": {}, 
      "methods": {
        "start()": {
          "return_type": "class void", 
          "linesOfCode": 12, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class ndn::tools::autoconfig::BaseDns"
      ]
    }, 
    "class ndn::tools::autoconfig::Url": {
      "fields": {
        "m_host": "class std::string", 
        "m_path": "class std::string", 
        "m_port": "class std::string", 
        "m_scheme": "class std::string", 
        "m_isValid": "class bool"
      }, 
      "methods": {
        "getPath()": {
          "return_type": "class std::string", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getHost()": {
          "return_type": "class std::string", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getScheme()": {
          "return_type": "class std::string", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getPort()": {
          "return_type": "class std::string", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isValid()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::Forwarder": {
      "fields": {
        "m_measurements": "class nfd::measurements::Measurements", 
        "m_counters": "class nfd::ForwarderCounters", 
        "m_unsolicitedDataPolicy": "class unique_ptr<fw::UnsolicitedDataPolicy>", 
        "m_faceTable": "class nfd::FaceTable", 
        "m_fib": "class nfd::fib::Fib", 
        "m_pit": "class nfd::pit::Pit", 
        "m_cs": "class nfd::cs::Cs", 
        "m_nameTree": "class nfd::name_tree::NameTree", 
        "m_deadNonceList": "class nfd::DeadNonceList", 
        "m_strategyChoice": "class nfd::strategy_choice::StrategyChoice", 
        "m_networkRegionTable": "class nfd::NetworkRegionTable"
      }, 
      "methods": {
        "getStrategyChoice()": {
          "return_type": "class nfd::strategy_choice::StrategyChoice", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onOutgoingNack(const shared_ptr<pit::Entry> &, const class nfd::face::Face &, const lp::NackHeader &)": {
          "return_type": "class void", 
          "linesOfCode": 45, 
          "parameter": {
            "outFace": "class nfd::face::Face", 
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "nack": "class lp::NackHeader"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onInterestUnsatisfied(const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 12, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onContentStoreHit(const class nfd::face::Face &, const shared_ptr<pit::Entry> &, const class ndn::Interest &, const class ndn::Data &)": {
          "return_type": "class void", 
          "linesOfCode": 15, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest", 
            "data": "class ndn::Data"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "cancelUnsatisfyAndStragglerTimer(pit::Entry &)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "pitEntry": "class pit::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onInterestReject(const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 16, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFaceTable()": {
          "return_type": "class nfd::FaceTable", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setUnsolicitedDataPolicy(unique_ptr<fw::UnsolicitedDataPolicy>)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "policy": "class unique_ptr<fw::UnsolicitedDataPolicy>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getNameTree()": {
          "return_type": "class nfd::name_tree::NameTree", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setUnsatisfyTimer(const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 16, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onIncomingInterest(class nfd::face::Face &, const class ndn::Interest &)": {
          "return_type": "class void", 
          "linesOfCode": 52, 
          "parameter": {
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFace(FaceId)": {
          "return_type": "class nfd::face::Face", 
          "linesOfCode": 0, 
          "parameter": {
            "id": "class FaceId"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "insertDeadNonceList(pit::Entry &, _Bool, time::milliseconds, class nfd::face::Face *)": {
          "return_type": "class void", 
          "linesOfCode": 35, 
          "parameter": {
            "dataFreshnessPeriod": "class time::milliseconds", 
            "pitEntry": "class pit::Entry", 
            "upstream": "class nfd::face::Face", 
            "isSatisfied": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onIncomingNack(class nfd::face::Face &, const lp::Nack &)": {
          "return_type": "class void", 
          "linesOfCode": 55, 
          "parameter": {
            "nack": "class lp::Nack", 
            "inFace": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onOutgoingData(const class ndn::Data &, class nfd::face::Face &)": {
          "return_type": "class void", 
          "linesOfCode": 25, 
          "parameter": {
            "outFace": "class nfd::face::Face", 
            "data": "class ndn::Data"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onInterestFinalize(const shared_ptr<pit::Entry> &, _Bool, time::milliseconds)": {
          "return_type": "class void", 
          "linesOfCode": 14, 
          "parameter": {
            "dataFreshnessPeriod": "class time::milliseconds", 
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "isSatisfied": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getDeadNonceList()": {
          "return_type": "class nfd::DeadNonceList", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "startProcessData(class nfd::face::Face &, const class ndn::Data &)": {
          "return_type": "class void", 
          "linesOfCode": 8, 
          "parameter": {
            "data": "class ndn::Data", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getNetworkRegionTable()": {
          "return_type": "class nfd::NetworkRegionTable", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getPit()": {
          "return_type": "class nfd::pit::Pit", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getCounters()": {
          "return_type": "class nfd::ForwarderCounters", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getUnsolicitedDataPolicy()": {
          "return_type": "class fw::UnsolicitedDataPolicy", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getMeasurements()": {
          "return_type": "class nfd::measurements::Measurements", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFib()": {
          "return_type": "class nfd::fib::Fib", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "addFace(shared_ptr<class nfd::face::Face>)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "face": "class shared_ptr<nfd::face::Face>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onDataUnsolicited(class nfd::face::Face &, const class ndn::Data &)": {
          "return_type": "class void", 
          "linesOfCode": 14, 
          "parameter": {
            "data": "class ndn::Data", 
            "inFace": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onInterestLoop(class nfd::face::Face &, const class ndn::Interest &)": {
          "return_type": "class void", 
          "linesOfCode": 21, 
          "parameter": {
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onIncomingData(class nfd::face::Face &, const class ndn::Data &)": {
          "return_type": "class void", 
          "linesOfCode": 69, 
          "parameter": {
            "data": "class ndn::Data", 
            "inFace": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "startProcessNack(class nfd::face::Face &, const lp::Nack &)": {
          "return_type": "class void", 
          "linesOfCode": 18, 
          "parameter": {
            "nack": "class lp::Nack", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setStragglerTimer(const shared_ptr<pit::Entry> &, _Bool, time::milliseconds)": {
          "return_type": "class void", 
          "linesOfCode": 10, 
          "parameter": {
            "dataFreshnessPeriod": "class time::milliseconds", 
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "isSatisfied": "class bool"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onContentStoreMiss(const class nfd::face::Face &, const shared_ptr<pit::Entry> &, const class ndn::Interest &)": {
          "return_type": "class void", 
          "linesOfCode": 30, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onOutgoingInterest(const shared_ptr<pit::Entry> &, class nfd::face::Face &, const class ndn::Interest &)": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {
            "outFace": "class nfd::face::Face", 
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "startProcessInterest(class nfd::face::Face &, const class ndn::Interest &)": {
          "return_type": "class void", 
          "linesOfCode": 18, 
          "parameter": {
            "interest": "class ndn::Interest", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getCs()": {
          "return_type": "class nfd::cs::Cs", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::strategy_choice::StrategyChoice": {
      "fields": {
        "m_forwarder": "class nfd::Forwarder", 
        "m_nItems": "class size_t", 
        "m_nameTree": "class nfd::name_tree::NameTree"
      }, 
      "methods": {
        "erase(const class ndn::Name &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "insert(const class ndn::Name &, const class ndn::Name &)": {
          "return_type": "class nfd::strategy_choice::StrategyChoice::InsertResult", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name", 
            "strategyName": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findEffectiveStrategy(const pit::Entry &)": {
          "return_type": "class fw::Strategy", 
          "linesOfCode": 0, 
          "parameter": {
            "pitEntry": "class pit::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "size()": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setDefaultStrategy(const class ndn::Name &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "strategyName": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findEffectiveStrategy(const class ndn::Name &)": {
          "return_type": "class fw::Strategy", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "changeStrategy(class nfd::strategy_choice::Entry &, fw::Strategy &, fw::Strategy &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "entry": "class nfd::strategy_choice::Entry", 
            "newStrategy": "class fw::Strategy", 
            "oldStrategy": "class fw::Strategy"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "begin()": {
          "return_type": "class _iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRange()": {
          "return_type": "class Range", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getStrategyChoice()": {
          "return_type": "class nfd::strategy_choice::StrategyChoice", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "end()": {
          "return_type": "class _iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findEffectiveStrategy(const measurements::Entry &)": {
          "return_type": "class fw::Strategy", 
          "linesOfCode": 0, 
          "parameter": {
            "measurementsEntry": "class measurements::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "get(const class ndn::Name &)": {
          "return_type": "class std::pair<bool, Name>", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::face::InternalTransportBase": {
      "fields": {
        "afterSend": "class signal::Signal<InternalTransportBase, Block>"
      }, 
      "methods": {
        "receiveFromLink(const class ndn::Block &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "packet": "class ndn::Block"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::rib::AutoPrefixPropagator::Error": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::runtime_error"
      ]
    }, 
    "class nfd::face::GenericLinkService::Options": {
      "fields": {
        "fragmenterOptions": "class LpFragmenter::Options", 
        "allowLocalFields": "class bool", 
        "allowFragmentation": "class bool", 
        "reassemblerOptions": "class LpReassembler::Options", 
        "allowReassembly": "class bool"
      }, 
      "methods": {}, 
      "base_list": []
    }, 
    "class ndn::tools::autoconfig::BaseDns": {
      "fields": {}, 
      "methods": {
        "parseSrvRr(const union ndn::tools::autoconfig::BaseDns::QueryAnswer &, int)": {
          "return_type": "class std::string", 
          "linesOfCode": 62, 
          "parameter": {
            "queryAnswer": "class ndn::tools::autoconfig::BaseDns::QueryAnswer", 
            "answerSize": "class int"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "querySrvRr(const std::string &)": {
          "return_type": "class std::string", 
          "linesOfCode": 23, 
          "parameter": {
            "fqdn": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "querySrvRrSearch()": {
          "return_type": "class std::string", 
          "linesOfCode": 25, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class ndn::tools::autoconfig::Base"
      ]
    }, 
    "class nfd::fw::BestRouteStrategyBase": {
      "fields": {}, 
      "methods": {
        "afterReceiveInterest(const class nfd::face::Face &, const class ndn::Interest &, const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 23, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::Strategy"
      ]
    }, 
    "class ndn::PrefixCollection": {
      "fields": {
        "m_prefixes": "class std::vector<Name>"
      }, 
      "methods": {
        "add(const class ndn::Name &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "wireEncode()": {
          "return_type": "class ndn::Block", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "empty()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::fib::Entry": {
      "fields": {
        "m_nameTreeEntry": "class name_tree::Entry", 
        "m_prefix": "class ndn::Name", 
        "m_nextHops": "class NextHopList"
      }, 
      "methods": {
        "getPrefix()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "sortNextHops()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "addNextHop(class nfd::face::Face &, uint64_t)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "cost": "class uint64_t", 
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasNextHops()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "removeNextHop(const class nfd::face::Face &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getNextHops()": {
          "return_type": "class NextHopList", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFibEntry()": {
          "return_type": "class fib::Entry", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasNextHop(const class nfd::face::Face &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findNextHop(const class nfd::face::Face &)": {
          "return_type": "class NextHopList::iterator", 
          "linesOfCode": 0, 
          "parameter": {
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::ForwarderStatusManager": {
      "fields": {
        "m_forwarder": "class nfd::Forwarder", 
        "m_dispatcher": "class ndn::mgmt::Dispatcher", 
        "m_startTimestamp": "class time::system_clock::TimePoint"
      }, 
      "methods": {
        "listGeneralStatus(const class ndn::Name &, const class ndn::Interest &, ndn::mgmt::StatusDatasetContext &)": {
          "return_type": "class void", 
          "linesOfCode": 14, 
          "parameter": {
            "topPrefix": "class ndn::Name", 
            "context": "class ndn::mgmt::StatusDatasetContext", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "collectGeneralStatus()": {
          "return_type": "class ndn::nfd::ForwarderStatus", 
          "linesOfCode": 25, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::face::TcpFactory": {
      "fields": {
        "m_prohibitedEndpoints": "class std::set<tcp::Endpoint>", 
        "m_channels": "class std::map<tcp::Endpoint, shared_ptr<TcpChannel> >"
      }, 
      "methods": {
        "createFace(const class ndn::util::FaceUri &, ndn::nfd::FacePersistency, _Bool, const FaceCreatedCallback &, const FaceCreationFailedCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 49, 
          "parameter": {
            "wantLocalFieldsEnabled": "class bool", 
            "persistency": "class ndn::nfd::FacePersistency", 
            "onCreated": "class FaceCreatedCallback", 
            "uri": "class ndn::util::FaceUri", 
            "onFailure": "class FaceCreationFailedCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createChannel(const tcp::Endpoint &)": {
          "return_type": "class shared_ptr<nfd::TcpChannel>", 
          "linesOfCode": 14, 
          "parameter": {
            "endpoint": "class tcp::Endpoint"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "prohibitAllIpv4Endpoints(uint16_t)": {
          "return_type": "class void", 
          "linesOfCode": 12, 
          "parameter": {
            "port": "class uint16_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "processConfig(OptionalConfigSection, class FaceSystem::ConfigContext &)": {
          "return_type": "class void", 
          "linesOfCode": 78, 
          "parameter": {
            "context": "class FaceSystem::ConfigContext", 
            "configSection": "class OptionalConfigSection"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getChannels()": {
          "return_type": "class std::vector<shared_ptr< Channel> >", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getId()": {
          "return_type": "class std::string", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "prohibitAllIpv6Endpoints(uint16_t)": {
          "return_type": "class void", 
          "linesOfCode": 12, 
          "parameter": {
            "port": "class uint16_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "prohibitEndpoint(const tcp::Endpoint &)": {
          "return_type": "class void", 
          "linesOfCode": 15, 
          "parameter": {
            "endpoint": "class tcp::Endpoint"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createChannel(const std::string &, const std::string &)": {
          "return_type": "class shared_ptr<nfd::TcpChannel>", 
          "linesOfCode": 7, 
          "parameter": {
            "localIp": "class std::string", 
            "localPort": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findChannel(const tcp::Endpoint &)": {
          "return_type": "class shared_ptr<nfd::TcpChannel>", 
          "linesOfCode": 9, 
          "parameter": {
            "localEndpoint": "class tcp::Endpoint"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::face::ProtocolFactory"
      ]
    }, 
    "class nfd::NetworkRegionTable": {
      "fields": {}, 
      "methods": {
        "getNetworkRegionTable()": {
          "return_type": "class nfd::NetworkRegionTable", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isInProducerRegion(const class ndn::Link &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "link": "class ndn::Link"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "std::set<Name>"
      ]
    }, 
    "class ndn::nfd_autoreg::AutoregServer": {
      "fields": {
        "m_whiteList": "class std::vector<Network>", 
        "m_face": "class ndn::Face", 
        "m_blackList": "class std::vector<Network>", 
        "m_controller": "class ndn::nfd::Controller", 
        "m_faceMonitor": "class ndn::nfd::FaceMonitor", 
        "m_autoregPrefixes": "class std::vector<ndn::Name>", 
        "m_allFacesPrefixes": "class std::vector<ndn::Name>", 
        "m_cost": "class uint64_t", 
        "m_keyChain": "class ndn::security::v1::KeyChain"
      }, 
      "methods": {
        "isWhitelisted(const boost::asio::ip::address &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "address": "class boost::asio::ip::address"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isBlacklisted(const boost::asio::ip::address &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "address": "class boost::asio::ip::address"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "signalHandler()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "registerPrefixesForFace(uint64_t, const std::vector<ndn::Name> &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "prefixes": "class std::vector<ndn::Name>", 
            "faceId": "class uint64_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onRegisterCommandFailure(uint64_t, const class ndn::Name &, const nfd::ControlResponse &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "faceId": "class uint64_t", 
            "prefix": "class ndn::Name", 
            "response": "class nfd::ControlResponse"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "startProcessing()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasAllowedSchema(const class ndn::util::FaceUri &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "uri": "class ndn::util::FaceUri"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "startFetchingFaceStatusDataset()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onNotification(const class ndn::nfd::FaceEventNotification &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "notification": "class ndn::nfd::FaceEventNotification"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "usage(std::ostream &, const po::options_description &, const char *)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "os": "class std::ostream", 
            "optionDesciption": "class po::options_description", 
            "programName": "class char"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onRegisterCommandSuccess(uint64_t, const class ndn::Name &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "faceId": "class uint64_t", 
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "registerPrefixesIfNeeded(uint64_t, const class ndn::util::FaceUri &, enum ndn::nfd::FacePersistency)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "faceId": "class uint64_t", 
            "uri": "class ndn::util::FaceUri", 
            "facePersistency": "class ndn::nfd::FacePersistency"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "main(int, char **)": {
          "return_type": "class int", 
          "linesOfCode": 0, 
          "parameter": {
            "argc": "class int", 
            "argv": "class char []"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "boost::noncopyable"
      ]
    }, 
    "class ndn::tools::autoconfig::NdnAutoconfig": {
      "fields": {
        "m_face": "class ndn::Face", 
        "m_io": "class boost::asio::io_service", 
        "m_stage2": "class ndn::tools::autoconfig::GuessFromSearchDomains", 
        "m_scheduler": "class util::Scheduler", 
        "m_networkMonitor": "class unique_ptr<util::NetworkMonitor>", 
        "m_startStagesEvent": "class util::scheduler::ScopedEventId", 
        "m_stage4": "class ndn::tools::autoconfig::GuessFromIdentityName", 
        "m_isDaemonMode": "class bool", 
        "m_terminationSignalSet": "class boost::asio::signal_set", 
        "m_stage3": "class ndn::tools::autoconfig::NdnFchDiscovery", 
        "m_keyChain": "class ndn::security::v1::KeyChain", 
        "m_stage1": "class ndn::tools::autoconfig::MulticastDiscovery"
      }, 
      "methods": {
        "usage(std::ostream &, const po::options_description &, const char *)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "os": "class std::ostream", 
            "programName": "class char", 
            "optionDescription": "class po::options_description"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "run()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "startStages()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "terminate(const boost::system::error_code &, int)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "signalNo": "class int", 
            "error": "class boost::system::error_code"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "boost::noncopyable"
      ]
    }, 
    "class nfd::rib::FibUpdate": {
      "fields": {
        "action": "class nfd::rib::FibUpdate::Action", 
        "faceId": "class uint64_t", 
        "cost": "class uint64_t", 
        "name": "class ndn::Name"
      }, 
      "methods": {
        "operator==(const class nfd::rib::FibUpdate &)": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {
            "other": "class nfd::rib::FibUpdate"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createAddUpdate(const class ndn::Name &, const uint64_t, const uint64_t)": {
          "return_type": "class nfd::rib::FibUpdate", 
          "linesOfCode": 12, 
          "parameter": {
            "faceId": "class uint64_t", 
            "cost": "class uint64_t", 
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "createRemoveUpdate(const class ndn::Name &, const uint64_t)": {
          "return_type": "class nfd::rib::FibUpdate", 
          "linesOfCode": 11, 
          "parameter": {
            "faceId": "class uint64_t", 
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::measurements::Measurements": {
      "fields": {
        "m_nItems": "class size_t", 
        "m_nameTree": "class nfd::name_tree::NameTree"
      }, 
      "methods": {
        "getParent(const class nfd::measurements::Entry &)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "child": "class nfd::measurements::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findExactMatch(const class ndn::Name &)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "size()": {
          "return_type": "class size_t", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "cleanup(class nfd::measurements::Entry &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "entry": "class nfd::measurements::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getInitialLifetime()": {
          "return_type": "class time::nanoseconds", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findLongestPrefixMatch(const pit::Entry &, const EntryPredicate &)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "pitEntry": "class pit::Entry", 
            "pred": "class EntryPredicate"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findLongestPrefixMatch(const class ndn::Name &, const EntryPredicate &)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "pred": "class EntryPredicate", 
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "get(const pit::Entry &)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "pitEntry": "class pit::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getMeasurements()": {
          "return_type": "class nfd::measurements::Measurements", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "get(const fib::Entry &)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "fibEntry": "class fib::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "extendLifetime(class nfd::measurements::Entry &, const time::nanoseconds &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "entry": "class nfd::measurements::Entry", 
            "lifetime": "class time::nanoseconds"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "get(name_tree::Entry &)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "nte": "class name_tree::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "get(const class ndn::Name &)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::ByteCounter": {
      "fields": {}, 
      "methods": {
        "operator+=(rep)": {
          "return_type": "class nfd::ByteCounter", 
          "linesOfCode": 6, 
          "parameter": {
            "n": "class rep"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::SimpleCounter"
      ]
    }, 
    "class nfd::cs::Policy": {
      "fields": {
        "beforeEvict": "class signal::Signal<Policy, iterator>", 
        "m_cs": "class nfd::cs::Cs", 
        "m_limit": "class size_t", 
        "m_policyName": "class std::string"
      }, 
      "methods": {
        "setLimit(size_t)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "nMaxEntries": "class size_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "create(const std::string &)": {
          "return_type": "class unique_ptr<nfd::cs::Policy>", 
          "linesOfCode": 0, 
          "parameter": {
            "policyName": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getPolicyNames()": {
          "return_type": "class std::set<std::string>", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getLimit()": {
          "return_type": "class size_t", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getCs()": {
          "return_type": "class nfd::cs::Cs", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setCs(class nfd::cs::Cs *)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "cs": "class nfd::cs::Cs"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doAfterInsert(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getName()": {
          "return_type": "class std::string", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getRegistry()": {
          "return_type": "class Registry", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doBeforeUse(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doBeforeErase(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterInsert(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "beforeUse(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doAfterRefresh(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getPolicy()": {
          "return_type": "class nfd::cs::Policy", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "evictEntries()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "beforeErase(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterRefresh(iterator)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "i": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::tools::nfdc::Module": {
      "fields": {}, 
      "methods": {
        "fetchStatus(class ndn::nfd::Controller &, const function<void (void)> &, const class Controller::DatasetFailCallback &, const class ndn::nfd::CommandOptions &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "controller": "class ndn::nfd::Controller", 
            "onSuccess": "class function<void ()>", 
            "onFailure": "class Controller::DatasetFailCallback", 
            "options": "class ndn::nfd::CommandOptions"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatStatusXml(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatStatusText(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::fw::NccStrategy::PitEntryInfo": {
      "fields": {
        "bestFaceTimeout": "class scheduler::EventId", 
        "propagateTimer": "class scheduler::EventId", 
        "maxInterval": "class time::microseconds"
      }, 
      "methods": {
        "getTypeId()": {
          "return_type": "class int", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::StrategyInfo"
      ]
    }, 
    "class nfd::FibManager": {
      "fields": {
        "m_faceTable": "class nfd::FaceTable", 
        "m_fib": "class nfd::fib::Fib"
      }, 
      "methods": {
        "addNextHop(const class ndn::Name &, const class ndn::Interest &, class ndn::nfd::ControlParameters, const ndn::mgmt::CommandContinuation &)": {
          "return_type": "class void", 
          "linesOfCode": 32, 
          "parameter": {
            "done": "class ndn::mgmt::CommandContinuation", 
            "topPrefix": "class ndn::Name", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "listEntries(const class ndn::Name &, const class ndn::Interest &, ndn::mgmt::StatusDatasetContext &)": {
          "return_type": "class void", 
          "linesOfCode": 23, 
          "parameter": {
            "topPrefix": "class ndn::Name", 
            "context": "class ndn::mgmt::StatusDatasetContext", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setFaceForSelfRegistration(const class ndn::Interest &, class ndn::nfd::ControlParameters &)": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {
            "request": "class ndn::Interest", 
            "parameters": "class ndn::nfd::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "removeNextHop(const class ndn::Name &, const class ndn::Interest &, class ndn::nfd::ControlParameters, const ndn::mgmt::CommandContinuation &)": {
          "return_type": "class void", 
          "linesOfCode": 32, 
          "parameter": {
            "done": "class ndn::mgmt::CommandContinuation", 
            "topPrefix": "class ndn::Name", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::NfdManagerBase"
      ]
    }, 
    "class nfd::measurements::MeasurementsAccessor": {
      "fields": {
        "m_measurements": "class nfd::measurements::Measurements", 
        "m_strategyChoice": "class nfd::strategy_choice::StrategyChoice", 
        "m_strategy": "class fw::Strategy"
      }, 
      "methods": {
        "getParent(const class nfd::measurements::Entry &)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 5, 
          "parameter": {
            "child": "class nfd::measurements::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findExactMatch(const class ndn::Name &)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 5, 
          "parameter": {
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "filter(class nfd::measurements::Entry *)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 0, 
          "parameter": {
            "entry": "class nfd::measurements::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findLongestPrefixMatch(const pit::Entry &, const EntryPredicate &)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 6, 
          "parameter": {
            "pitEntry": "class pit::Entry", 
            "pred": "class EntryPredicate"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findLongestPrefixMatch(const class ndn::Name &, const EntryPredicate &)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 6, 
          "parameter": {
            "pred": "class EntryPredicate", 
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "get(const pit::Entry &)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 5, 
          "parameter": {
            "pitEntry": "class pit::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getMeasurements()": {
          "return_type": "class nfd::measurements::MeasurementsAccessor", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "get(const fib::Entry &)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 5, 
          "parameter": {
            "fibEntry": "class fib::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "extendLifetime(class nfd::measurements::Entry &, const time::nanoseconds &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "entry": "class nfd::measurements::Entry", 
            "lifetime": "class time::nanoseconds"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "filter(class nfd::measurements::Entry &)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 5, 
          "parameter": {
            "entry": "class nfd::measurements::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "get(const class ndn::Name &)": {
          "return_type": "class nfd::measurements::Entry", 
          "linesOfCode": 5, 
          "parameter": {
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::tools::nfdc::NfdIdCollector": {
      "fields": {
        "m_nfdId": "class ndn::Name", 
        "m_hasNfdId": "class bool", 
        "m_inner": "class unique_ptr<ndn::Validator>"
      }, 
      "methods": {
        "getNfdId()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 9, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "checkPolicy(const class ndn::Data &, int, const ndn::OnDataValidated &, const ndn::OnDataValidationFailed &, std::vector<shared_ptr<ndn::ValidationRequest> > &)": {
          "return_type": "class void", 
          "linesOfCode": 30, 
          "parameter": {
            "nextSteps": "class std::vector<shared_ptr<ndn::ValidationRequest> >", 
            "data": "class ndn::Data", 
            "nSteps": "class int", 
            "accept": "class ndn::OnDataValidated", 
            "reject": "class ndn::OnDataValidationFailed"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasNfdId()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "checkPolicy(const class ndn::Interest &, int, const ndn::OnInterestValidated &, const ndn::OnInterestValidationFailed &, std::vector<shared_ptr<ndn::ValidationRequest> > &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "nextSteps": "class std::vector<shared_ptr<ndn::ValidationRequest> >", 
            "accept": "class ndn::OnInterestValidated", 
            "nSteps": "class int", 
            "interest": "class ndn::Interest", 
            "reject": "class ndn::OnInterestValidationFailed"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "ndn::Validator"
      ]
    }, 
    "class nfd::fw::AccessStrategy::PitInfo": {
      "fields": {
        "rtoTimer": "class scheduler::ScopedEventId"
      }, 
      "methods": {
        "getTypeId()": {
          "return_type": "class int", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::StrategyInfo"
      ]
    }, 
    "class nfd::tools::nfdc::FibModule": {
      "fields": {
        "m_status": "class std::vector<FibEntry>"
      }, 
      "methods": {
        "fetchStatus(class ndn::nfd::Controller &, const function<void (void)> &, const class Controller::DatasetFailCallback &, const class ndn::nfd::CommandOptions &)": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {
            "controller": "class ndn::nfd::Controller", 
            "onSuccess": "class function<void ()>", 
            "onFailure": "class Controller::DatasetFailCallback", 
            "options": "class ndn::nfd::CommandOptions"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatStatusXml(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatItemText(std::ostream &, const class ndn::nfd::FibEntry &)": {
          "return_type": "class void", 
          "linesOfCode": 15, 
          "parameter": {
            "item": "class ndn::nfd::FibEntry", 
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatItemXml(std::ostream &, const class ndn::nfd::FibEntry &)": {
          "return_type": "class void", 
          "linesOfCode": 18, 
          "parameter": {
            "item": "class ndn::nfd::FibEntry", 
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatStatusText(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 8, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::tools::nfdc::Module", 
        "noncopyable"
      ]
    }, 
    "class nfd::fw::NccStrategy::MeasurementsEntryInfo": {
      "fields": {
        "previousFace": "class weak_ptr<nfd::face::Face>", 
        "bestFace": "class weak_ptr<nfd::face::Face>", 
        "prediction": "class time::microseconds"
      }, 
      "methods": {
        "getTypeId()": {
          "return_type": "class int", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "inheritFrom(const class nfd::fw::NccStrategy::MeasurementsEntryInfo &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "other": "class nfd::fw::NccStrategy::MeasurementsEntryInfo"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getBestFace()": {
          "return_type": "class shared_ptr<nfd::face::Face>", 
          "linesOfCode": 10, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "updateBestFace(const class nfd::face::Face &)": {
          "return_type": "class void", 
          "linesOfCode": 16, 
          "parameter": {
            "face": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "adjustPredictUp()": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "ageBestFace()": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "adjustPredictDown()": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::StrategyInfo"
      ]
    }, 
    "class nfd::rib::RibManager": {
      "fields": {
        "m_rib": "class nfd::rib::Rib", 
        "m_face": "class ndn::Face", 
        "m_registeredFaces": "class FaceIdSet", 
        "m_isLocalhopEnabled": "class bool", 
        "m_localhopValidator": "class ndn::ValidatorConfig", 
        "m_prefixPropagator": "class nfd::rib::AutoPrefixPropagator", 
        "m_faceMonitor": "class ndn::nfd::FaceMonitor", 
        "m_activeFaceFetchEvent": "class scheduler::EventId", 
        "m_fibUpdater": "class nfd::rib::FibUpdater", 
        "m_localhostValidator": "class ndn::ValidatorConfig", 
        "m_nfdController": "class ndn::nfd::Controller", 
        "m_addTopPrefix": "class std::function<void ( Name )>", 
        "m_keyChain": "class ndn::KeyChain"
      }, 
      "methods": {
        "registerTopPrefix(const class ndn::Name &)": {
          "return_type": "class void", 
          "linesOfCode": 14, 
          "parameter": {
            "topPrefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onCommandPrefixAddNextHopError(const class ndn::Name &, const ndn::nfd::ControlResponse &)": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {
            "name": "class ndn::Name", 
            "response": "class ndn::nfd::ControlResponse"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onEnableLocalFieldsSuccess()": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "removeInvalidFaces(const std::vector<ndn::nfd::FaceStatus> &)": {
          "return_type": "class void", 
          "linesOfCode": 24, 
          "parameter": {
            "activeFaces": "class std::vector<ndn::nfd::FaceStatus>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "enableLocalFields()": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onRibUpdateSuccess(const class nfd::rib::RibUpdate &)": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {
            "update": "class nfd::rib::RibUpdate"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "fetchActiveFaces()": {
          "return_type": "class void", 
          "linesOfCode": 10, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onRibUpdateFailure(const class nfd::rib::RibUpdate &, uint32_t, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {
            "code": "class uint32_t", 
            "update": "class nfd::rib::RibUpdate", 
            "error": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "registerWithNfd()": {
          "return_type": "class void", 
          "linesOfCode": 15, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "registerEntry(const class ndn::Name &, const class ndn::Interest &, class ndn::nfd::ControlParameters, const ndn::mgmt::CommandContinuation &)": {
          "return_type": "class void", 
          "linesOfCode": 50, 
          "parameter": {
            "done": "class ndn::mgmt::CommandContinuation", 
            "topPrefix": "class ndn::Name", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onConfig(const ConfigSection &, _Bool, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 35, 
          "parameter": {
            "isDryRun": "class bool", 
            "configSection": "class ConfigSection", 
            "filename": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onFetchActiveFacesFailure(uint32_t, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "reason": "class std::string", 
            "code": "class uint32_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "scheduleActiveFaceFetch(const time::seconds &)": {
          "return_type": "class void", 
          "linesOfCode": 8, 
          "parameter": {
            "timeToWait": "class time::seconds"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onEnableLocalFieldsError(const ndn::nfd::ControlResponse &)": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {
            "response": "class ndn::nfd::ControlResponse"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onNotification(const class ndn::nfd::FaceEventNotification &)": {
          "return_type": "class void", 
          "linesOfCode": 12, 
          "parameter": {
            "notification": "class ndn::nfd::FaceEventNotification"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setConfigFile(class nfd::ConfigFile &)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "configFile": "class nfd::ConfigFile"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onCommandPrefixAddNextHopSuccess(const class ndn::Name &, const ndn::nfd::ControlParameters &)": {
          "return_type": "class void", 
          "linesOfCode": 17, 
          "parameter": {
            "prefix": "class ndn::Name", 
            "result": "class ndn::nfd::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "listEntries(const class ndn::Name &, const class ndn::Interest &, ndn::mgmt::StatusDatasetContext &)": {
          "return_type": "class void", 
          "linesOfCode": 29, 
          "parameter": {
            "topPrefix": "class ndn::Name", 
            "context": "class ndn::mgmt::StatusDatasetContext", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onFaceDestroyedEvent(uint64_t)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "faceId": "class uint64_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setFaceForSelfRegistration(const class ndn::Interest &, class ndn::nfd::ControlParameters &)": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {
            "request": "class ndn::Interest", 
            "parameters": "class ndn::nfd::ControlParameters"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "makeAuthorization(const std::string &)": {
          "return_type": "class ndn::mgmt::Authorization", 
          "linesOfCode": 18, 
          "parameter": {
            "verb": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "unregisterEntry(const class ndn::Name &, const class ndn::Interest &, class ndn::nfd::ControlParameters, const ndn::mgmt::CommandContinuation &)": {
          "return_type": "class void", 
          "linesOfCode": 26, 
          "parameter": {
            "done": "class ndn::mgmt::CommandContinuation", 
            "topPrefix": "class ndn::Name", 
            "parameters": "class ndn::nfd::ControlParameters", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "nfd::ManagerBase"
      ]
    }, 
    "class nfd::fw::NfdAutoAccessStrategyStrategyRegistrationClass": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::rib::Rib": {
      "fields": {
        "m_nItems": "class size_t", 
        "afterEraseEntry": "class ndn::util::signal::Signal<Rib, Name>", 
        "beforeRemoveRoute": "class ndn::util::signal::Signal<Rib, RibRouteRef>", 
        "m_isUpdateInProgress": "class bool", 
        "m_updateBatches": "class UpdateQueue", 
        "m_onSendBatchFromQueue": "class function<void (nfd::rib::RibUpdateBatch)>", 
        "afterInsertEntry": "class ndn::util::signal::Signal<Rib, Name>", 
        "m_rib": "class RibTable", 
        "m_fibUpdater": "class nfd::rib::FibUpdater", 
        "afterAddRoute": "class ndn::util::signal::Signal<Rib, RibRouteRef>", 
        "m_faceMap": "class FaceLookupTable"
      }, 
      "methods": {
        "addUpdateToQueue(const class nfd::rib::RibUpdate &, const class Rib::UpdateSuccessCallback &, const class Rib::UpdateFailureCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "update": "class nfd::rib::RibUpdate", 
            "onFailure": "class Rib::UpdateFailureCallback", 
            "onSuccess": "class Rib::UpdateSuccessCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "beginRemoveFace(uint64_t)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "faceId": "class uint64_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getAncestorRoutes(const class ndn::Name &)": {
          "return_type": "class RouteSet", 
          "linesOfCode": 0, 
          "parameter": {
            "name": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "sendBatchFromQueue()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "eraseEntry(RibTable::iterator)": {
          "return_type": "class RibTable::iterator", 
          "linesOfCode": 0, 
          "parameter": {
            "it": "class RibTable::iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setFibUpdater(class nfd::rib::FibUpdater *)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "updater": "class nfd::rib::FibUpdater"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "size()": {
          "return_type": "class size_t", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "modifyInheritedRoutes(const RibUpdateList &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "inheritedRoutes": "class RibUpdateList"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findParent(const class ndn::Name &)": {
          "return_type": "class shared_ptr<nfd::rib::RibEntry>", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getAncestorRoutes(const class nfd::rib::RibEntry &)": {
          "return_type": "class RouteSet", 
          "linesOfCode": 0, 
          "parameter": {
            "entry": "class nfd::rib::RibEntry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findDescendantsForNonInsertedName(const class ndn::Name &)": {
          "return_type": "class std::list<shared_ptr<RibEntry> >", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "find(const class ndn::Name &, const class nfd::rib::Route &)": {
          "return_type": "class nfd::rib::Route", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name", 
            "route": "class nfd::rib::Route"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "insert(const class ndn::Name &, const class nfd::rib::Route &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name", 
            "route": "class nfd::rib::Route"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "end()": {
          "return_type": "class Rib::_iterator", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "updateRib(const class nfd::rib::RibUpdateBatch &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "batch": "class nfd::rib::RibUpdateBatch"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "beginApplyUpdate(const class nfd::rib::RibUpdate &, const UpdateSuccessCallback &, const UpdateFailureCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "update": "class nfd::rib::RibUpdate", 
            "onFailure": "class UpdateFailureCallback", 
            "onSuccess": "class UpdateSuccessCallback"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onFibUpdateFailure(const class Rib::UpdateFailureCallback &, uint32_t, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "code": "class uint32_t", 
            "onFailure": "class Rib::UpdateFailureCallback", 
            "error": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onRouteExpiration(const class ndn::Name &, const class nfd::rib::Route &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name", 
            "route": "class nfd::rib::Route"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "onFibUpdateSuccess(const class nfd::rib::RibUpdateBatch &, const RibUpdateList &, const class Rib::UpdateSuccessCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "onSuccess": "class Rib::UpdateSuccessCallback", 
            "batch": "class nfd::rib::RibUpdateBatch", 
            "inheritedRoutes": "class RibUpdateList"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "begin()": {
          "return_type": "class Rib::_iterator", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findRoutesWithFaceId(uint64_t)": {
          "return_type": "class std::list<NameAndRoute>", 
          "linesOfCode": 0, 
          "parameter": {
            "faceId": "class uint64_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "find(const class ndn::Name &)": {
          "return_type": "class _iterator", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "empty()": {
          "return_type": "class bool", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findDescendants(const class ndn::Name &)": {
          "return_type": "class std::list<shared_ptr<RibEntry> >", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "erase(const class ndn::Name &, const class nfd::rib::Route &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "prefix": "class ndn::Name", 
            "route": "class nfd::rib::Route"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::fw::NccStrategy": {
      "fields": {}, 
      "methods": {
        "getMeasurementsEntryInfo(measurements::Entry *)": {
          "return_type": "class NccStrategy::MeasurementsEntryInfo", 
          "linesOfCode": 19, 
          "parameter": {
            "entry": "class measurements::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getStrategyName()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "timeoutOnBestFace(weak_ptr<pit::Entry>)": {
          "return_type": "class void", 
          "linesOfCode": 22, 
          "parameter": {
            "pitEntryWeak": "class weak_ptr<pit::Entry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "afterReceiveInterest(const class nfd::face::Face &, const class ndn::Interest &, const shared_ptr<pit::Entry> &)": {
          "return_type": "class void", 
          "linesOfCode": 73, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "beforeSatisfyInterest(const shared_ptr<pit::Entry> &, const class nfd::face::Face &, const class ndn::Data &)": {
          "return_type": "class void", 
          "linesOfCode": 37, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>", 
            "inFace": "class nfd::face::Face", 
            "data": "class ndn::Data"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getMeasurementsEntryInfo(const shared_ptr<pit::Entry> &)": {
          "return_type": "class NccStrategy::MeasurementsEntryInfo", 
          "linesOfCode": 6, 
          "parameter": {
            "entry": "class shared_ptr<pit::Entry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doPropagate(FaceId, weak_ptr<pit::Entry>)": {
          "return_type": "class void", 
          "linesOfCode": 51, 
          "parameter": {
            "inFaceId": "class FaceId", 
            "pitEntryWeak": "class weak_ptr<pit::Entry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::Strategy"
      ]
    }, 
    "class nfd::rib::Service": {
      "fields": {
        "m_dispatcher": "class unique_ptr<ndn::mgmt::Dispatcher>", 
        "m_face": "class unique_ptr<ndn::Face>", 
        "m_configFile": "class std::string", 
        "m_ribManager": "class unique_ptr<nfd::rib::RibManager>", 
        "m_configSection": "class ConfigSection", 
        "m_keyChain": "class ndn::KeyChain"
      }, 
      "methods": {
        "initialize()": {
          "return_type": "class void", 
          "linesOfCode": 37, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getLocalNfdTransport()": {
          "return_type": "class shared_ptr<ndn::Transport>", 
          "linesOfCode": 34, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "initializeLogging()": {
          "return_type": "class void", 
          "linesOfCode": 15, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::StrategyInfoHost": {
      "fields": {
        "m_items": "class std::unordered_map<int, unique_ptr<fw::StrategyInfo> >"
      }, 
      "methods": {
        "clearStrategyInfo()": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::LoggerFactory::Error": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::runtime_error"
      ]
    }, 
    "class nfd::name_tree::HashtableOptions": {
      "fields": {
        "minSize": "class size_t", 
        "shrinkFactor": "class float", 
        "initialSize": "class size_t", 
        "expandLoadFactor": "class float", 
        "shrinkLoadFactor": "class float", 
        "expandFactor": "class float"
      }, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::fw::NfdAutoMulticastStrategyStrategyRegistrationClass": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::fw::StrategyInfo": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::tools::nfdc::ChannelModule": {
      "fields": {
        "m_status": "class std::vector<ChannelStatus>"
      }, 
      "methods": {
        "fetchStatus(class ndn::nfd::Controller &, const function<void (void)> &, const class Controller::DatasetFailCallback &, const class ndn::nfd::CommandOptions &)": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {
            "controller": "class ndn::nfd::Controller", 
            "onSuccess": "class function<void ()>", 
            "onFailure": "class Controller::DatasetFailCallback", 
            "options": "class ndn::nfd::CommandOptions"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatStatusXml(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatItemXml(std::ostream &, const class ndn::nfd::ChannelStatus &)": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {
            "item": "class ndn::nfd::ChannelStatus", 
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatItemText(std::ostream &, const class ndn::nfd::ChannelStatus &)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "item": "class ndn::nfd::ChannelStatus", 
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatStatusText(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 8, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::tools::nfdc::Module", 
        "noncopyable"
      ]
    }, 
    "class nfd::fw::RetxSuppressionExponential::PitInfo": {
      "fields": {
        "suppressionInterval": "class Duration"
      }, 
      "methods": {
        "getTypeId()": {
          "return_type": "class int", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::StrategyInfo"
      ]
    }, 
    "class nfd::RttEstimator": {
      "fields": {
        "m_variance": "class double", 
        "m_multiplier": "class uint16_t", 
        "m_maxMultiplier": "class uint16_t", 
        "m_gain": "class double", 
        "m_nSamples": "class uint32_t", 
        "m_minRto": "class double", 
        "m_rtt": "class double"
      }, 
      "methods": {
        "doubleMultiplier()": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getInitialRtt()": {
          "return_type": "class Duration", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "addMeasurement(Duration)": {
          "return_type": "class void", 
          "linesOfCode": 17, 
          "parameter": {
            "measure": "class Duration"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "incrementMultiplier()": {
          "return_type": "class void", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "computeRto()": {
          "return_type": "class RttEstimator::Duration", 
          "linesOfCode": 7, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": []
    }, 
    "class nfd::fw::AdmitAllUnsolicitedDataPolicy": {
      "fields": {}, 
      "methods": {
        "decide(const class nfd::face::Face &, const class ndn::Data &)": {
          "return_type": "class nfd::fw::UnsolicitedDataDecision", 
          "linesOfCode": 5, 
          "parameter": {
            "data": "class ndn::Data", 
            "inFace": "class nfd::face::Face"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::UnsolicitedDataPolicy"
      ]
    }, 
    "class nfd::face::TransportCounters": {
      "fields": {
        "nInPackets": "class nfd::PacketCounter", 
        "nInBytes": "class nfd::ByteCounter", 
        "nOutBytes": "class nfd::ByteCounter", 
        "nOutPackets": "class nfd::PacketCounter"
      }, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::tools::nfdc::RibModule": {
      "fields": {
        "m_status": "class std::vector<RibEntry>"
      }, 
      "methods": {
        "fetchStatus(class ndn::nfd::Controller &, const function<void (void)> &, const class Controller::DatasetFailCallback &, const class ndn::nfd::CommandOptions &)": {
          "return_type": "class void", 
          "linesOfCode": 13, 
          "parameter": {
            "controller": "class ndn::nfd::Controller", 
            "onSuccess": "class function<void ()>", 
            "onFailure": "class Controller::DatasetFailCallback", 
            "options": "class ndn::nfd::CommandOptions"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatStatusXml(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatItemXml(std::ostream &, const class ndn::nfd::RibEntry &)": {
          "return_type": "class void", 
          "linesOfCode": 37, 
          "parameter": {
            "item": "class ndn::nfd::RibEntry", 
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatItemText(std::ostream &, const class ndn::nfd::RibEntry &)": {
          "return_type": "class void", 
          "linesOfCode": 26, 
          "parameter": {
            "item": "class ndn::nfd::RibEntry", 
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "formatStatusText(std::ostream &)": {
          "return_type": "class void", 
          "linesOfCode": 8, 
          "parameter": {
            "os": "class std::ostream"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::tools::nfdc::Module", 
        "noncopyable"
      ]
    }, 
    "class nfd::name_tree::Entry": {
      "fields": {
        "m_parent": "class nfd::name_tree::Entry", 
        "m_children": "class std::vector<Entry >", 
        "m_measurementsEntry": "class unique_ptr<measurements::Entry>", 
        "m_strategyChoiceEntry": "class unique_ptr<strategy_choice::Entry>", 
        "m_node": "class nfd::name_tree::Node", 
        "m_name": "class ndn::Name", 
        "m_pitEntries": "class std::vector<shared_ptr<pit::Entry> >", 
        "m_fibEntry": "class unique_ptr<fib::Entry>"
      }, 
      "methods": {
        "setStrategyChoiceEntry(unique_ptr<strategy_choice::Entry>)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "strategyChoiceEntry": "class unique_ptr<strategy_choice::Entry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getPitEntries()": {
          "return_type": "class std::vector<shared_ptr<pit::Entry> >", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getParent()": {
          "return_type": "class nfd::name_tree::Entry", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasChildren()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getMeasurementsEntry()": {
          "return_type": "class measurements::Entry", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasPitEntries()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "hasTableEntries()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getChildren()": {
          "return_type": "class std::vector<Entry >", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setMeasurementsEntry(unique_ptr<measurements::Entry>)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "measurementsEntry": "class unique_ptr<measurements::Entry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getName()": {
          "return_type": "class ndn::Name", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator*()": {
          "return_type": "class nfd::name_tree::Entry", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setFibEntry(unique_ptr<fib::Entry>)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "fibEntry": "class unique_ptr<fib::Entry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "isEmpty()": {
          "return_type": "class bool", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "operator->()": {
          "return_type": "class nfd::name_tree::Entry", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getFibEntry()": {
          "return_type": "class fib::Entry", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setParent(class nfd::name_tree::Entry &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "entry": "class nfd::name_tree::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getStrategyChoiceEntry()": {
          "return_type": "class strategy_choice::Entry", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "unsetParent()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "erasePitEntry(pit::Entry *)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "pitEntry": "class pit::Entry"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "insertPitEntry(shared_ptr<pit::Entry>)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "pitEntry": "class shared_ptr<pit::Entry>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::face::UnixStreamTransport": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "StreamTransport<boost::asio::local::stream_protocol>"
      ]
    }, 
    "class nfd::pit::InRecord": {
      "fields": {
        "m_interest": "class shared_ptr< ndn::Interest>"
      }, 
      "methods": {
        "update(const class ndn::Interest &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getInterest()": {
          "return_type": "class ndn::Interest", 
          "linesOfCode": 6, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::pit::FaceRecord"
      ]
    }, 
    "class nfd::face::LpFragmenter::Options": {
      "fields": {
        "nMaxFragments": "class size_t"
      }, 
      "methods": {}, 
      "base_list": []
    }, 
    "class ndn::tools::autoconfig::NdnAutoconfig::Error": {
      "fields": {}, 
      "methods": {}, 
      "base_list": [
        "std::runtime_error"
      ]
    }, 
    "class nfd::fw::NfdAutoAdmitLocalUnsolicitedDataPolicyUnsolicitedDataPolicyRegistrationClass": {
      "fields": {}, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::face::InternalForwarderTransport": {
      "fields": {}, 
      "methods": {
        "receiveFromLink(const class ndn::Block &)": {
          "return_type": "class void", 
          "linesOfCode": 9, 
          "parameter": {
            "packet": "class ndn::Block"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doClose()": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "doSend(class nfd::face::Transport::Packet &&)": {
          "return_type": "class void", 
          "linesOfCode": 7, 
          "parameter": {
            "packet": "class nfd::face::Transport::Packet"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "face::Transport", 
        "class nfd::face::InternalTransportBase"
      ]
    }, 
    "class nfd::fw::RetxSuppressionFixed": {
      "fields": {
        "m_minRetxInterval": "class time::milliseconds"
      }, 
      "methods": {
        "decide(const class nfd::face::Face &, const class ndn::Interest &, pit::Entry &)": {
          "return_type": "class RetxSuppression::Result", 
          "linesOfCode": 15, 
          "parameter": {
            "pitEntry": "class pit::Entry", 
            "inFace": "class nfd::face::Face", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::fw::RetxSuppression"
      ]
    }, 
    "class nfd::face::FaceCounters": {
      "fields": {
        "nInData": "class nfd::PacketCounter", 
        "m_transportCounters": "class Transport::Counters", 
        "m_linkServiceCounters": "class LinkService::Counters", 
        "nOutData": "class nfd::PacketCounter", 
        "nInNacks": "class nfd::PacketCounter", 
        "nOutInterests": "class nfd::PacketCounter", 
        "nInBytes": "class nfd::ByteCounter", 
        "nOutBytes": "class nfd::ByteCounter", 
        "nInPackets": "class nfd::PacketCounter", 
        "nOutNacks": "class nfd::PacketCounter", 
        "nInInterests": "class nfd::PacketCounter", 
        "nOutPackets": "class nfd::PacketCounter"
      }, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::pit::OutRecord": {
      "fields": {
        "m_incomingNack": "class unique_ptr<lp::NackHeader>"
      }, 
      "methods": {
        "setIncomingNack(const lp::Nack &)": {
          "return_type": "class bool", 
          "linesOfCode": 10, 
          "parameter": {
            "nack": "class lp::Nack"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "clearIncomingNack()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getIncomingNack()": {
          "return_type": "class lp::NackHeader", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "class nfd::pit::FaceRecord"
      ]
    }, 
    "class nfd::face::Transport::Packet": {
      "fields": {
        "packet": "class ndn::Block", 
        "remoteEndpoint": "class EndpointId"
      }, 
      "methods": {}, 
      "base_list": []
    }, 
    "class nfd::cs::Cs": {
      "fields": {
        "m_table": "class Table", 
        "m_policy": "class unique_ptr<nfd::cs::Policy>", 
        "m_beforeEvictConnection": "class ndn::util::signal::ScopedConnection"
      }, 
      "methods": {
        "setLimit(size_t)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "nMaxPackets": "class size_t"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "erase(const class ndn::Name &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "exactName": "class ndn::Name"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "size()": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "dump()": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getLimit()": {
          "return_type": "class size_t", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setPolicy(unique_ptr<class nfd::cs::Policy>)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "policy": "class unique_ptr<nfd::cs::Policy>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "find(const class ndn::Interest &, const HitCallback &, const MissCallback &)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "hitCallback": "class HitCallback", 
            "missCallback": "class MissCallback", 
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findRightmost(const class ndn::Interest &, iterator, iterator)": {
          "return_type": "class iterator", 
          "linesOfCode": 0, 
          "parameter": {
            "last": "class iterator", 
            "interest": "class ndn::Interest", 
            "first": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findLeftmost(const class ndn::Interest &, iterator, iterator)": {
          "return_type": "class iterator", 
          "linesOfCode": 0, 
          "parameter": {
            "right": "class iterator", 
            "interest": "class ndn::Interest", 
            "left": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getPolicy()": {
          "return_type": "class nfd::cs::Policy", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "insert(const class ndn::Data &, _Bool)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "isUnsolicited": "class bool", 
            "data": "class ndn::Data"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "begin()": {
          "return_type": "class _iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "getCs()": {
          "return_type": "class nfd::cs::Cs", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "findRightmostAmongExact(const class ndn::Interest &, iterator, iterator)": {
          "return_type": "class iterator", 
          "linesOfCode": 0, 
          "parameter": {
            "last": "class iterator", 
            "interest": "class ndn::Interest", 
            "first": "class iterator"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "end()": {
          "return_type": "class _iterator", 
          "linesOfCode": 0, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setPolicyImpl(unique_ptr<class nfd::cs::Policy>)": {
          "return_type": "class void", 
          "linesOfCode": 0, 
          "parameter": {
            "policy": "class unique_ptr<nfd::cs::Policy>"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "noncopyable"
      ]
    }, 
    "class nfd::CommandAuthenticator": {
      "fields": {
        "m_validator": "class ndn::security::CommandInterestValidator", 
        "m_moduleAuth": "class std::unordered_map<std::string, AuthorizedCerts>"
      }, 
      "methods": {
        "processConfig(const ConfigSection &, _Bool, const std::string &)": {
          "return_type": "class void", 
          "linesOfCode": 89, 
          "parameter": {
            "section": "class ConfigSection", 
            "isDryRun": "class bool", 
            "filename": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "setConfigFile(class nfd::ConfigFile &)": {
          "return_type": "class void", 
          "linesOfCode": 6, 
          "parameter": {
            "configFile": "class nfd::ConfigFile"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "extractKeyName(const class ndn::Interest &)": {
          "return_type": "class std::pair<bool, Name>", 
          "linesOfCode": 32, 
          "parameter": {
            "interest": "class ndn::Interest"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "create()": {
          "return_type": "class shared_ptr<nfd::CommandAuthenticator>", 
          "linesOfCode": 5, 
          "parameter": {}, 
          "calling-function": [], 
          "run-time-invokes": 0
        }, 
        "makeAuthorization(const std::string &, const std::string &)": {
          "return_type": "class ndn::mgmt::Authorization", 
          "linesOfCode": 51, 
          "parameter": {
            "verb": "class std::string", 
            "module": "class std::string"
          }, 
          "calling-function": [], 
          "run-time-invokes": 0
        }
      }, 
      "base_list": [
        "enable_shared_from_this<class nfd::CommandAuthenticator>", 
        "noncopyable"
      ]
    }
  }
}
