{"name":"base","children":[{"name":"nfd::fw::asf::ProbingModule","children":[{"name":"getFaceToProbe(const nfd::face::Face &, const ndn::Interest &, const fib::Entry &, const nfd::face::Face &)","size":47},{"name":"afterForwardingProbe(const fib::Entry &, const ndn::Interest &)","size":10},{"name":"scheduleProbe(const fib::Entry &, const time::milliseconds &)","size":19},{"name":"getFaceBasedOnProbability(const FaceInfoFacePairSet &)","size":33},{"name":"getProbingProbability(uint64_t, uint64_t, uint64_t)","size":8},{"name":"isProbingNeeded(const fib::Entry &, const ndn::Interest &)","size":17},{"name":"getRandomNumber(double, double)","size":6}]},{"name":"nfd::tools::nfdc::CommandDefinition","children":[{"name":"addArg(const std::string &, enum nfd::tools::nfdc::ArgValueType, enum nfd::tools::nfdc::Required, enum nfd::tools::nfdc::Positional, const std::string &)","size":0},{"name":"parse(const std::vector<std::string> &, size_t)","size":0},{"name":"parseValue(enum nfd::tools::nfdc::ArgValueType, const std::string &)","size":0},{"name":"getVerb()","size":0},{"name":"getNoun()","size":0},{"name":"setTitle(const std::string &)","size":6},{"name":"getTitle()","size":0}]},{"name":"nfd::rib::ReadvertisedRoute","children":[{"name":"getSigner()","size":0},{"name":"getPrefix()","size":0},{"name":"getRibRoutes()","size":0}]},{"name":"nfd::rib::AutoPrefixPropagator","children":[{"name":"afterRibInsert(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &)","size":19},{"name":"afterInsertRibEntry(const ndn::Name &)","size":32},{"name":"afterHubConnect()","size":22},{"name":"enable()","size":8},{"name":"getPrefixPropagationParameters(const ndn::Name &)","size":34},{"name":"afterPropagateSucceed(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, const ndn::Scheduler::Event &)","size":19},{"name":"afterRibErase(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &)","size":0},{"name":"afterHubDisconnect()","size":9},{"name":"afterRevokeFail(const ndn::nfd::ControlResponse &, const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &)","size":0},{"name":"afterPropagateSucceed(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, const ndn::Scheduler::Event &)","size":0},{"name":"advertise(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds)","size":0},{"name":"withdraw(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds)","size":0},{"name":"redoPropagation(PropagatedEntryIt, const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds)","size":22},{"name":"redoPropagation(PropagatedEntryIt, const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds)","size":0},{"name":"afterRevokeFail(const ndn::nfd::ControlResponse &, const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &)","size":8},{"name":"afterPropagateFail(const ndn::nfd::ControlResponse &, const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds, const ndn::Scheduler::Event &)","size":21},{"name":"onRefreshTimer(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &)","size":0},{"name":"afterRibErase(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &)","size":24},{"name":"afterRevokeSucceed(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds)","size":20},{"name":"doesCurrentPropagatedPrefixWork(const ndn::Name &)","size":14},{"name":"disable()","size":6},{"name":"afterRibInsert(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &)","size":0},{"name":"onRetryTimer(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds)","size":9},{"name":"afterEraseRibEntry(const ndn::Name &)","size":40},{"name":"onRefreshTimer(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &)","size":8},{"name":"loadConfig(const ConfigSection &)","size":41},{"name":"withdraw(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds)","size":13},{"name":"advertise(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds)","size":20},{"name":"afterRevokeSucceed(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds)","size":0},{"name":"afterPropagateFail(const ndn::nfd::ControlResponse &, const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds, const ndn::Scheduler::Event &)","size":0},{"name":"onRetryTimer(const ndn::nfd::ControlParameters &, const ndn::nfd::CommandOptions &, time::seconds)","size":0}]},{"name":"nfd::fw::asf::FaceInfo::Error","children":[]},{"name":"nfd::tools::nfdc::CommandDefinition::Error","children":[]},{"name":"nfd::ForwarderCounters","children":[{"name":"getCounters()","size":5}]},{"name":"nfd::face::Face","children":[{"name":"getLinkType()","size":5},{"name":"getExpirationTime()","size":5},{"name":"sendInterest(const ndn::Interest &)","size":5},{"name":"getCounters()","size":5},{"name":"setPersistency(ndn::nfd::FacePersistency)","size":5},{"name":"getPersistency()","size":5},{"name":"getFace(FaceId)","size":5},{"name":"sendData(const ndn::Data &)","size":5},{"name":"sendNack(const lp::Nack &)","size":5},{"name":"getLocalUri()","size":5},{"name":"getScope()","size":5},{"name":"getTransport()","size":5},{"name":"getId()","size":5},{"name":"setId(FaceId)","size":5},{"name":"getState()","size":5},{"name":"close()","size":5},{"name":"getRemoteUri()","size":5},{"name":"getLinkService()","size":5},{"name":"getFace()","size":5}]},{"name":"nfd::tools::nfdc::ForwarderGeneralModule","children":[{"name":"fetchStatus(ndn::nfd::Controller &, const function<void (void)> &, const Controller::DatasetFailCallback &, const ndn::nfd::CommandOptions &)","size":13},{"name":"formatItemXml(std::ostream &, const ndn::nfd::ForwarderStatus &, const ndn::Name &)","size":33},{"name":"formatStatusXml(std::ostream &)","size":5},{"name":"setNfdIdCollector(const nfd::tools::nfdc::NfdIdCollector &)","size":0},{"name":"formatStatusText(std::ostream &)","size":6},{"name":"formatItemText(std::ostream &, const ndn::nfd::ForwarderStatus &, const ndn::Name &)","size":23},{"name":"getNfdId()","size":10}]},{"name":"nfd::fw::AccessStrategy","children":[{"name":"sendToLastNexthop(const nfd::face::Face &, const ndn::Interest &, const shared_ptr<pit::Entry> &, nfd::fw::AccessStrategy::MtInfo &, const fib::Entry &)","size":40},{"name":"afterRtoTimeout(weak_ptr<pit::Entry>, FaceId, FaceId)","size":28},{"name":"afterReceiveNewInterest(const nfd::face::Face &, const ndn::Interest &, const shared_ptr<pit::Entry> &)","size":35},{"name":"afterReceiveInterest(const nfd::face::Face &, const ndn::Interest &, const shared_ptr<pit::Entry> &)","size":20},{"name":"removeFaceInfo(const nfd::face::Face &)","size":5},{"name":"afterReceiveRetxInterest(const nfd::face::Face &, const ndn::Interest &, const shared_ptr<pit::Entry> &)","size":8},{"name":"addPrefixMeasurements(const ndn::Data &)","size":18},{"name":"getStrategyName()","size":6},{"name":"multicast(const nfd::face::Face &, const ndn::Interest &, const shared_ptr<pit::Entry> &, const fib::Entry &, FaceId)","size":19},{"name":"beforeSatisfyInterest(const shared_ptr<pit::Entry> &, const nfd::face::Face &, const ndn::Data &)","size":27},{"name":"findPrefixMeasurements(const pit::Entry &)","size":14},{"name":"updateMeasurements(const nfd::face::Face &, const ndn::Data &, const RttEstimator::Duration &)","size":17}]},{"name":"nfd::pit::Pit","children":[{"name":"getPit()","size":5},{"name":"size()","size":0},{"name":"find(const ndn::Interest &)","size":0},{"name":"erase(nfd::pit::Entry *)","size":0},{"name":"findOrInsert(const ndn::Interest &, _Bool)","size":0},{"name":"deleteInOutRecords(nfd::pit::Entry *, const nfd::face::Face &)","size":0},{"name":"findAllDataMatches(const ndn::Data &)","size":0},{"name":"erase(nfd::pit::Entry *, _Bool)","size":0},{"name":"begin()","size":0},{"name":"end()","size":0},{"name":"insert(const ndn::Interest &)","size":0}]},{"name":"nfd::rib::RibUpdate","children":[{"name":"getAction()","size":5},{"name":"setRoute(const nfd::rib::Route &)","size":6},{"name":"getRoute()","size":5},{"name":"getName()","size":5},{"name":"setAction(enum nfd::rib::RibUpdate::Action)","size":6},{"name":"setName(const ndn::Name &)","size":6}]},{"name":"nfd::name_tree::Hash32","children":[{"name":"compute(const void *, size_t)","size":0}]},{"name":"nfd::Network","children":[{"name":"getMaxRangeV4()","size":7},{"name":"getMaxRangeV6()","size":9},{"name":"doesContain(const boost::asio::ip::address &)","size":0},{"name":"operator==(const nfd::Network &)","size":0},{"name":"isValidCidr(const std::string &)","size":31},{"name":"operator!=(const nfd::Network &)","size":0}]},{"name":"nfd::face::TcpTransport","children":[{"name":"afterChangePersistency(ndn::nfd::FacePersistency)","size":12},{"name":"handleReconnect(const boost::system::error_code &)","size":24},{"name":"doClose()","size":6},{"name":"canChangePersistencyToImpl(ndn::nfd::FacePersistency)","size":5},{"name":"handleError(const boost::system::error_code &)","size":18},{"name":"reconnect()","size":25},{"name":"handleReconnectTimeout()","size":15}]},{"name":"nfd::face::ProtocolFactory","children":[{"name":"getProvidedSchemes()","size":0},{"name":"create(const std::string &)","size":7},{"name":"createFace(const ndn::util::FaceUri &, ndn::nfd::FacePersistency, _Bool, const FaceCreatedCallback &, const FaceCreationFailedCallback &)","size":0},{"name":"processConfig(OptionalConfigSection, FaceSystem::ConfigContext &)","size":0},{"name":"getChannels()","size":0},{"name":"listRegistered()","size":8},{"name":"getRegistry()","size":6}]},{"name":"nfd::cs::lru::LruPolicy","children":[{"name":"doAfterInsert(iterator)","size":6},{"name":"insertToQueue(iterator, _Bool)","size":13},{"name":"doBeforeUse(iterator)","size":5},{"name":"doBeforeErase(iterator)","size":5},{"name":"doAfterRefresh(iterator)","size":5},{"name":"evictEntries()","size":11}]},{"name":"nfd::fw::asf::AsfStrategy","children":[{"name":"onTimeout(const ndn::Name &, face::FaceId)","size":21},{"name":"getStrategyName()","size":6},{"name":"sendNoRouteNack(const nfd::face::Face &, const ndn::Interest &, const shared_ptr<pit::Entry> &)","size":10},{"name":"afterReceiveInterest(const nfd::face::Face &, const ndn::Interest &, const shared_ptr<pit::Entry> &)","size":46},{"name":"forwardInterest(const ndn::Interest &, const fib::Entry &, const shared_ptr<pit::Entry> &, nfd::face::Face &, _Bool)","size":39},{"name":"beforeSatisfyInterest(const shared_ptr<pit::Entry> &, const nfd::face::Face &, const ndn::Data &)","size":22},{"name":"getBestFaceForForwarding(const fib::Entry &, const ndn::Interest &, const nfd::face::Face &)","size":58},{"name":"afterReceiveNack(const nfd::face::Face &, const lp::Nack &, const shared_ptr<pit::Entry> &)","size":7}]},{"name":"nfd::fw::asf::FaceInfo","children":[{"name":"cancelTimeoutEvent()","size":0},{"name":"recordTimeout(const ndn::Name &)","size":0},{"name":"isTimeoutScheduled()","size":0},{"name":"getMeasurementExpirationEventId()","size":0},{"name":"cancelTimeoutEvent(const ndn::Name &)","size":0},{"name":"doesNameMatchLastInterest(const ndn::Name &)","size":0},{"name":"computeRto()","size":0},{"name":"recordRtt(const shared_ptr<pit::Entry> &, const nfd::face::Face &)","size":0},{"name":"get(nfd::face::FaceId)","size":5},{"name":"getRtt()","size":0},{"name":"hasSrttMeasurement()","size":0},{"name":"setTimeoutEvent(const scheduler::EventId &, const ndn::Name &)","size":0},{"name":"isTimeout()","size":0},{"name":"setMeasurementExpirationEventId(const scheduler::EventId &)","size":0},{"name":"getSrtt()","size":0}]},{"name":"nfd::ForwarderStatusManager","children":[{"name":"listGeneralStatus(const ndn::Name &, const ndn::Interest &, ndn::mgmt::StatusDatasetContext &)","size":14},{"name":"collectGeneralStatus()","size":25}]},{"name":"nfd::name_tree::Iterator","children":[{"name":"operator!=(const nfd::name_tree::Iterator &)","size":0},{"name":"operator*()","size":0},{"name":"operator==(const nfd::name_tree::Iterator &)","size":5},{"name":"operator++()","size":8},{"name":"operator->()","size":0},{"name":"operator++(int)","size":7}]},{"name":"nfd::tools::nfdc::text::Separator","children":[{"name":"getCount()","size":0}]},{"name":"nfd::face::NfdAutoUnixStreamFactoryProtocolFactoryRegistrationClass","children":[]},{"name":"nfd::face::LpFragmenter","children":[{"name":"fragmentPacket(const lp::Packet &, size_t)","size":66},{"name":"getLinkService()","size":5},{"name":"setOptions(const nfd::face::LpFragmenter::Options &)","size":5}]},{"name":"nfd::tools::nfdc::FaceIdFetcher","children":[{"name":"start(ndn::Face &, ndn::nfd::Controller &, const std::string &, _Bool, const SuccessCallback &, const FailureCallback &)","size":42},{"name":"onFaceCreateError(const ndn::nfd::ControlResponse &, const std::string &)","size":8},{"name":"succeed(uint32_t)","size":6},{"name":"startFaceCreate(const ndn::util::FaceUri &)","size":10},{"name":"onQueryFailure(uint32_t, const ndn::util::FaceUri &)","size":8},{"name":"onQuerySuccess(const ndn::ConstBufferPtr &, const ndn::util::FaceUri &)","size":28},{"name":"fail(const std::string &)","size":6},{"name":"startGetFaceId(const ndn::util::FaceUri &)","size":7},{"name":"onCanonizeFailure(const std::string &)","size":5},{"name":"onCanonizeSuccess(const ndn::util::FaceUri &)","size":18}]},{"name":"nfd::fw::asf::NfdAutoAsfStrategyStrategyRegistrationClass","children":[]},{"name":"nfd::rib::ReadvertiseDestination","children":[{"name":"withdraw(nfd::rib::ReadvertisedRoute &, std::function<void (void)>, std::function<void (const std::string &)>)","size":0},{"name":"advertise(nfd::rib::ReadvertisedRoute &, std::function<void (void)>, std::function<void (const std::string &)>)","size":0}]},{"name":"nfd::rib::FibUpdater::Error","children":[]},{"name":"nfd::face::InternalClientTransport","children":[{"name":"pause()","size":0},{"name":"resume()","size":0},{"name":"send(const ndn::Block &, const ndn::Block &)","size":9},{"name":"connectToForwarder(nfd::face::InternalForwarderTransport *)","size":20},{"name":"send(const ndn::Block &)","size":5},{"name":"receiveFromLink(const ndn::Block &)","size":7},{"name":"close()","size":0}]},{"name":"nfd::face::LpReassembler::Options","children":[]},{"name":"nfd::fw::NfdAutoClientControlStrategyStrategyRegistrationClass","children":[]},{"name":"ndn::tools::autoconfig::Base","children":[{"name":"onHubConnectError(const ControlResponse &)","size":7},{"name":"onPrefixRegistrationError(const ControlResponse &)","size":6},{"name":"connectToHub(const std::string &)","size":11},{"name":"registerPrefix(const ndn::Name &, uint64_t)","size":14},{"name":"start()","size":0},{"name":"onPrefixRegistrationSuccess(const ndn::nfd::ControlParameters &)","size":5},{"name":"onCanonizeFailure(const std::string &)","size":5},{"name":"onHubConnectSuccess(const ndn::nfd::ControlParameters &)","size":11},{"name":"onCanonizeSuccess(const ndn::util::FaceUri &)","size":8}]},{"name":"nfd::strategy_choice::StrategyChoice::InsertResult","children":[{"name":"isRegistered()","size":0}]},{"name":"nfd::fw::AccessStrategy::MtInfo","children":[{"name":"getTypeId()","size":0}]},{"name":"nfd::PrivilegeHelper","children":[{"name":"drop()","size":27},{"name":"initialize(const std::string &, const std::string &)","size":95},{"name":"raise()","size":26},{"name":"runElevated(function<void (void)>)","size":16}]},{"name":"nfd::fw::BestRouteStrategy","children":[{"name":"getStrategyName()","size":6}]},{"name":"nfd::cs::priority_fifo::PriorityFifoPolicy","children":[{"name":"attachQueue(iterator)","size":25},{"name":"evictOne()","size":21},{"name":"doAfterInsert(iterator)","size":6},{"name":"moveToStaleQueue(iterator)","size":15},{"name":"doBeforeUse(iterator)","size":5},{"name":"doBeforeErase(iterator)","size":5},{"name":"doAfterRefresh(iterator)","size":6},{"name":"detachQueue(iterator)","size":14},{"name":"evictEntries()","size":9}]},{"name":"nfd::fw::AccessStrategy::FaceInfo","children":[]},{"name":"nfd::pit::Iterator","children":[{"name":"operator==(const nfd::pit::Iterator &)","size":0},{"name":"operator!=(const nfd::pit::Iterator &)","size":0},{"name":"operator*()","size":0},{"name":"operator++()","size":14},{"name":"operator->()","size":0},{"name":"operator++(int)","size":7}]},{"name":"nfd::fw::NfdAutoDropAllUnsolicitedDataPolicyUnsolicitedDataPolicyRegistrationClass","children":[]},{"name":"nfd::tools::nfdc::CommandParser::Error","children":[]},{"name":"nfd::cs::Entry","children":[{"name":"setData(shared_ptr<const ndn::Data>, _Bool)","size":0},{"name":"hasData()","size":0},{"name":"isUnsolicited()","size":0},{"name":"setData(const ndn::Data &, _Bool)","size":0},{"name":"getName()","size":0},{"name":"updateStaleTime()","size":0},{"name":"getFullName()","size":0},{"name":"operator()(const nfd::cs::EntryImpl &)","size":5},{"name":"getData()","size":0},{"name":"isStale()","size":0},{"name":"canSatisfy(const ndn::Interest &)","size":0},{"name":"reset()","size":0},{"name":"getStaleTime()","size":0}]},{"name":"nfd::face::GenericLinkServiceCounters","children":[]},{"name":"nfd::fw::AdmitLocalUnsolicitedDataPolicy","children":[{"name":"decide(const nfd::face::Face &, const ndn::Data &)","size":8}]},{"name":"nfd::tools::nfdc::StrategyChoiceModule","children":[{"name":"fetchStatus(ndn::nfd::Controller &, const function<void (void)> &, const Controller::DatasetFailCallback &, const ndn::nfd::CommandOptions &)","size":13},{"name":"formatStatusXml(std::ostream &)","size":9},{"name":"formatItemXml(std::ostream &, const ndn::nfd::StrategyChoice &)","size":8},{"name":"formatItemText(std::ostream &, const ndn::nfd::StrategyChoice &)","size":7},{"name":"formatStatusText(std::ostream &)","size":8}]},{"name":"nfd::fw::asf::RttStats","children":[{"name":"computeSrtt(Rtt, Rtt)","size":9},{"name":"addRttMeasurement(RttEstimator::Duration &)","size":9},{"name":"recordTimeout()","size":0},{"name":"getRtt()","size":0},{"name":"computeRto()","size":0},{"name":"getSrtt()","size":0}]},{"name":"nfd::tools::nfdc::LegacyNfdc::Error","children":[]},{"name":"nfd::face::LinkService","children":[{"name":"sendNack(const ndn::lp::Nack &)","size":0},{"name":"receiveNack(const lp::Nack &)","size":0},{"name":"sendInterest(const ndn::Interest &)","size":0},{"name":"doSendInterest(const ndn::Interest &)","size":0},{"name":"receiveData(const ndn::Data &)","size":0},{"name":"getCounters()","size":5},{"name":"receivePacket(Transport::Packet &&)","size":5},{"name":"sendPacket(Transport::Packet &&)","size":5},{"name":"sendData(const ndn::Data &)","size":0},{"name":"doSendData(const ndn::Data &)","size":0},{"name":"getTransport()","size":5},{"name":"receiveInterest(const ndn::Interest &)","size":0},{"name":"doSendNack(const lp::Nack &)","size":0},{"name":"doReceivePacket(Transport::Packet &&)","size":0},{"name":"setFaceAndTransport(nfd::face::Face &, nfd::face::Transport &)","size":0},{"name":"getFace()","size":5}]},{"name":"nfd::rib::PropagatedEntry","children":[{"name":"fail(const scheduler::EventId &)","size":6},{"name":"getSigningIdentity()","size":5},{"name":"isNew()","size":5},{"name":"operator=(const nfd::rib::PropagatedEntry &)","size":0},{"name":"isPropagating()","size":5},{"name":"startPropagation()","size":5},{"name":"isPropagateFail()","size":5},{"name":"initialize()","size":6},{"name":"succeed(const scheduler::EventId &)","size":6},{"name":"isPropagated()","size":5},{"name":"setSigningIdentity(const ndn::Name &)","size":6}]},{"name":"nfd::fib::Fib","children":[{"name":"findExactMatch(const ndn::Name &)","size":0},{"name":"size()","size":0},{"name":"insert(const ndn::Name &)","size":0},{"name":"end()","size":0},{"name":"findLongestPrefixMatch(const ndn::Name &)","size":0},{"name":"findLongestPrefixMatch(const pit::Entry &)","size":0},{"name":"findLongestPrefixMatch(const measurements::Entry &)","size":0},{"name":"getRange()","size":0},{"name":"getFib()","size":5},{"name":"erase(name_tree::Entry *, _Bool)","size":0},{"name":"begin()","size":0},{"name":"erase(const ndn::Name &)","size":0},{"name":"erase(const nfd::fib::Entry &)","size":0},{"name":"removeNextHop(nfd::fib::Entry &, const nfd::face::Face &)","size":0}]},{"name":"nfd::rib::RibEntry","children":[{"name":"getNRoutes()","size":0},{"name":"getChildren()","size":5},{"name":"getRouteWithSecondLowestCostByFaceId(uint64_t)","size":0},{"name":"eraseRoute(RouteList::iterator)","size":0},{"name":"hasChildInheritOnFaceId(uint64_t)","size":0},{"name":"getRouteWithLowestCostByFaceId(uint64_t)","size":0},{"name":"hasChildren()","size":0},{"name":"hasRoute(const nfd::rib::Route &)","size":0},{"name":"getName()","size":5},{"name":"insertRoute(const nfd::rib::Route &)","size":0},{"name":"end()","size":5},{"name":"setParent(shared_ptr<nfd::rib::RibEntry>)","size":5},{"name":"hasCapture()","size":0},{"name":"addChild(shared_ptr<nfd::rib::RibEntry>)","size":0},{"name":"addInheritedRoute(const nfd::rib::Route &)","size":0},{"name":"hasParent()","size":0},{"name":"findRoute(const nfd::rib::Route &)","size":0},{"name":"findInheritedRoute(const nfd::rib::Route &)","size":0},{"name":"hasFaceId(const uint64_t)","size":0},{"name":"begin()","size":5},{"name":"hasInheritedRoute(const nfd::rib::Route &)","size":0},{"name":"setName(const ndn::Name &)","size":5},{"name":"removeChild(shared_ptr<nfd::rib::RibEntry>)","size":0},{"name":"getParent()","size":5},{"name":"getRoutes()","size":5},{"name":"eraseRoute(const nfd::rib::Route &)","size":0},{"name":"removeInheritedRoute(const nfd::rib::Route &)","size":0},{"name":"getRouteWithLowestCostAndChildInheritByFaceId(uint64_t)","size":0},{"name":"getInheritedRoutes()","size":5}]},{"name":"nfd::TablesConfigSection","children":[{"name":"processStrategyChoiceSection(const ConfigSection &, _Bool)","size":37},{"name":"setConfigFile(nfd::ConfigFile &)","size":6},{"name":"processConfig(const ConfigSection &, _Bool)","size":58},{"name":"processNetworkRegionSection(const ConfigSection &, _Bool)","size":14},{"name":"ensureConfigured()","size":13}]},{"name":"nfd::name_tree::Hashtable","children":[{"name":"size()","size":0},{"name":"getBucket(size_t)","size":0},{"name":"attach(size_t, nfd::name_tree::Node *)","size":13},{"name":"insert(const ndn::Name &, size_t, const HashSequence &)","size":6},{"name":"find(const ndn::Name &, size_t)","size":6},{"name":"getNBuckets()","size":0},{"name":"findOrInsert(const ndn::Name &, size_t, HashValue, _Bool)","size":28},{"name":"computeBucketIndex(HashValue)","size":0},{"name":"computeThresholds()","size":7},{"name":"find(const ndn::Name &, size_t, const HashSequence &)","size":6},{"name":"detach(size_t, nfd::name_tree::Node *)","size":19},{"name":"erase(nfd::name_tree::Node *)","size":19},{"name":"resize(size_t)","size":21}]},{"name":"nfd::ManagerBase::Error","children":[]},{"name":"nfd::name_tree::Node","children":[{"name":"getBucket(size_t)","size":6}]},{"name":"nfd::cs::EntryImpl","children":[{"name":"unsetUnsolicited()","size":6},{"name":"isQuery()","size":5},{"name":"operator<(const nfd::cs::EntryImpl &)","size":20},{"name":"canStale()","size":6}]},{"name":"nfd::rib::RibManager","children":[{"name":"registerTopPrefix(const ndn::Name &)","size":14},{"name":"onFetchActiveFacesFailure(uint32_t, const std::string &)","size":6},{"name":"onEnableLocalFieldsSuccess()","size":5},{"name":"removeInvalidFaces(const std::vector<ndn::nfd::FaceStatus> &)","size":24},{"name":"enableLocalFields()","size":9},{"name":"onRibUpdateSuccess(const nfd::rib::RibUpdate &)","size":5},{"name":"fetchActiveFaces()","size":10},{"name":"onRibUpdateFailure(const nfd::rib::RibUpdate &, uint32_t, const std::string &)","size":9},{"name":"registerWithNfd()","size":15},{"name":"registerEntry(const ndn::Name &, const ndn::Interest &, ndn::nfd::ControlParameters, const ndn::mgmt::CommandContinuation &)","size":50},{"name":"onConfig(const ConfigSection &, _Bool, const std::string &)","size":35},{"name":"onCommandPrefixAddNextHopError(const ndn::Name &, const ndn::nfd::ControlResponse &)","size":7},{"name":"scheduleActiveFaceFetch(const time::seconds &)","size":8},{"name":"onEnableLocalFieldsError(const ndn::nfd::ControlResponse &)","size":7},{"name":"onNotification(const ndn::nfd::FaceEventNotification &)","size":12},{"name":"setConfigFile(nfd::ConfigFile &)","size":6},{"name":"onCommandPrefixAddNextHopSuccess(const ndn::Name &, const ndn::nfd::ControlParameters &)","size":17},{"name":"listEntries(const ndn::Name &, const ndn::Interest &, ndn::mgmt::StatusDatasetContext &)","size":29},{"name":"onFaceDestroyedEvent(uint64_t)","size":6},{"name":"setFaceForSelfRegistration(const ndn::Interest &, ndn::nfd::ControlParameters &)","size":13},{"name":"makeAuthorization(const std::string &)","size":18},{"name":"unregisterEntry(const ndn::Name &, const ndn::Interest &, ndn::nfd::ControlParameters, const ndn::mgmt::CommandContinuation &)","size":26}]},{"name":"nfd::face::NfdAutoTcpFactoryProtocolFactoryRegistrationClass","children":[]},{"name":"ndn::tools::autoconfig::NdnFchDiscovery","children":[{"name":"start()","size":70}]},{"name":"nfd::fw::BestRouteStrategy2","children":[{"name":"afterReceiveInterest(const nfd::face::Face &, const ndn::Interest &, const shared_ptr<pit::Entry> &)","size":63},{"name":"getStrategyName()","size":6},{"name":"afterReceiveNack(const nfd::face::Face &, const lp::Nack &, const shared_ptr<pit::Entry> &)","size":48}]},{"name":"nfd::face::MulticastUdpTransport","children":[{"name":"doSend(Transport::Packet &&)","size":11},{"name":"doClose()","size":15}]},{"name":"nfd::NfdRunner","children":[{"name":"printModules(std::ostream &)","size":0},{"name":"reload(const boost::system::error_code &, int)","size":0},{"name":"printUsage(std::ostream &, const std::string &)","size":0},{"name":"terminate(const boost::system::error_code &, int)","size":0},{"name":"run()","size":0},{"name":"initialize()","size":0}]},{"name":"nfd::cs::priority_fifo::NfdAutoPriorityFifoPolicyCsPolicyRegistrationClass","children":[]},{"name":"nfd::face::UdpFactory::Error","children":[]},{"name":"nfd::name_tree::PrefixMatchImpl","children":[{"name":"advance(nfd::name_tree::Iterator &)","size":25}]},{"name":"nfd::fw::Strategy","children":[{"name":"sendNacks(const shared_ptr<pit::Entry> &, const lp::NackHeader &, std::initializer_list<const Face *>)","size":21},{"name":"parseInstanceName(const ndn::Name &)","size":10},{"name":"getFaceTable()","size":0},{"name":"sendInterest(const shared_ptr<pit::Entry> &, nfd::face::Face &, const ndn::Interest &)","size":0},{"name":"setInstanceName(const ndn::Name &)","size":0},{"name":"getFace(FaceId)","size":0},{"name":"afterReceiveInterest(const nfd::face::Face &, const ndn::Interest &, const shared_ptr<pit::Entry> &)","size":0},{"name":"listRegistered()","size":8},{"name":"create(const ndn::Name &, nfd::Forwarder &)","size":15},{"name":"canCreate(const ndn::Name &)","size":5},{"name":"beforeExpirePendingInterest(const shared_ptr<pit::Entry> &)","size":5},{"name":"beforeSatisfyInterest(const shared_ptr<pit::Entry> &, const nfd::face::Face &, const ndn::Data &)","size":7},{"name":"afterReceiveNack(const nfd::face::Face &, const lp::Nack &, const shared_ptr<pit::Entry> &)","size":7},{"name":"find(const ndn::Name &)","size":37},{"name":"sendNack(const shared_ptr<pit::Entry> &, const nfd::face::Face &, const lp::NackHeader &)","size":0},{"name":"areSameType(const ndn::Name &, const ndn::Name &)","size":5},{"name":"lookupFib(const pit::Entry &)","size":61},{"name":"rejectPendingInterest(const shared_ptr<pit::Entry> &)","size":0},{"name":"getRegistry()","size":6},{"name":"getMeasurements()","size":0},{"name":"makeInstanceName(const ndn::Name &, const ndn::Name &)","size":9},{"name":"getInstanceName()","size":0}]},{"name":"nfd::rib::Rib","children":[{"name":"addUpdateToQueue(const nfd::rib::RibUpdate &, const Rib::UpdateSuccessCallback &, const Rib::UpdateFailureCallback &)","size":0},{"name":"beginRemoveFace(uint64_t)","size":0},{"name":"getAncestorRoutes(const ndn::Name &)","size":0},{"name":"sendBatchFromQueue()","size":0},{"name":"eraseEntry(RibTable::iterator)","size":0},{"name":"setFibUpdater(nfd::rib::FibUpdater *)","size":0},{"name":"onFibUpdateFailure(const Rib::UpdateFailureCallback &, uint32_t, const std::string &)","size":0},{"name":"modifyInheritedRoutes(const RibUpdateList &)","size":0},{"name":"findParent(const ndn::Name &)","size":0},{"name":"getAncestorRoutes(const nfd::rib::RibEntry &)","size":0},{"name":"findDescendantsForNonInsertedName(const ndn::Name &)","size":0},{"name":"findRoutesWithFaceId(uint64_t)","size":0},{"name":"insert(const ndn::Name &, const nfd::rib::Route &)","size":0},{"name":"end()","size":5},{"name":"updateRib(const nfd::rib::RibUpdateBatch &)","size":0},{"name":"beginApplyUpdate(const nfd::rib::RibUpdate &, const UpdateSuccessCallback &, const UpdateFailureCallback &)","size":0},{"name":"size()","size":5},{"name":"onRouteExpiration(const ndn::Name &, const nfd::rib::Route &)","size":0},{"name":"onFibUpdateSuccess(const nfd::rib::RibUpdateBatch &, const RibUpdateList &, const Rib::UpdateSuccessCallback &)","size":0},{"name":"begin()","size":5},{"name":"find(const ndn::Name &, const nfd::rib::Route &)","size":0},{"name":"find(const ndn::Name &)","size":0},{"name":"empty()","size":5},{"name":"findDescendants(const ndn::Name &)","size":0},{"name":"erase(const ndn::Name &, const nfd::rib::Route &)","size":0}]},{"name":"nfd::cs::lru::NfdAutoLruPolicyCsPolicyRegistrationClass","children":[]},{"name":"nfd::PacketCounter","children":[{"name":"operator++()","size":6}]},{"name":"nfd::cs::Cs","children":[{"name":"setLimit(size_t)","size":0},{"name":"end()","size":0},{"name":"size()","size":0},{"name":"dump()","size":0},{"name":"getLimit()","size":0},{"name":"find(const ndn::Interest &, const HitCallback &, const MissCallback &)","size":0},{"name":"findRightmost(const ndn::Interest &, iterator, iterator)","size":0},{"name":"findLeftmost(const ndn::Interest &, iterator, iterator)","size":0},{"name":"setPolicyImpl(unique_ptr<nfd::cs::Policy>)","size":0},{"name":"getCs()","size":5},{"name":"insert(const ndn::Data &, _Bool)","size":0},{"name":"findRightmostAmongExact(const ndn::Interest &, iterator, iterator)","size":0},{"name":"getPolicy()","size":0},{"name":"begin()","size":0},{"name":"erase(const ndn::Name &)","size":0},{"name":"setPolicy(unique_ptr<nfd::cs::Policy>)","size":0}]},{"name":"nfd::face::UdpFactory","children":[{"name":"applyMulticastConfig(const FaceSystem::ConfigContext &)","size":48},{"name":"createFace(const ndn::util::FaceUri &, ndn::nfd::FacePersistency, _Bool, const FaceCreatedCallback &, const FaceCreationFailedCallback &)","size":50},{"name":"findMulticastFace(const udp::Endpoint &)","size":9},{"name":"createChannel(const std::string &, const std::string &, const time::seconds &)","size":8},{"name":"findChannel(const udp::Endpoint &)","size":9},{"name":"prohibitAllIpv4Endpoints(uint16_t)","size":18},{"name":"processConfig(OptionalConfigSection, FaceSystem::ConfigContext &)","size":140},{"name":"getChannels()","size":5},{"name":"getId()","size":6},{"name":"prohibitAllIpv6Endpoints(uint16_t)","size":11},{"name":"prohibitEndpoint(const udp::Endpoint &)","size":15},{"name":"createChannel(const udp::Endpoint &, const time::seconds &)","size":28},{"name":"createMulticastFace(const std::string &, const std::string &, const std::string &, const std::string &)","size":12},{"name":"createMulticastFace(const udp::Endpoint &, const udp::Endpoint &, const std::string &)","size":90}]},{"name":"nfd::name_tree::Hash64","children":[{"name":"compute(const void *, size_t)","size":0}]},{"name":"nfd::rib::RibUpdateBatch","children":[{"name":"begin()","size":0},{"name":"getFaceId()","size":5},{"name":"end()","size":0},{"name":"size()","size":0},{"name":"add(const nfd::rib::RibUpdate &)","size":0}]},{"name":"nfd::name_tree::PartialEnumerationImpl","children":[{"name":"advance(nfd::name_tree::Iterator &)","size":63}]},{"name":"nfd::StrategyChoiceManager","children":[{"name":"unsetStrategy(ndn::nfd::ControlParameters, const ndn::mgmt::CommandContinuation &)","size":12},{"name":"setStrategy(ndn::nfd::ControlParameters, const ndn::mgmt::CommandContinuation &)","size":21},{"name":"listChoices(ndn::mgmt::StatusDatasetContext &)","size":11}]},{"name":"nfd::Channel","children":[{"name":"setUri(const ndn::util::FaceUri &)","size":0},{"name":"getUri()","size":5}]},{"name":"nfd::scheduler::ScopedEventId","children":[{"name":"release()","size":5},{"name":"operator=(const ndn::util::scheduler::EventId &)","size":9},{"name":"cancel()","size":5}]},{"name":"nfd::DeadNonceList","children":[{"name":"size()","size":0},{"name":"add(const ndn::Name &, uint32_t)","size":0},{"name":"adjustCapacity()","size":0},{"name":"getLifetime()","size":5},{"name":"has(const ndn::Name &, uint32_t)","size":0},{"name":"mark()","size":0},{"name":"getDeadNonceList()","size":5},{"name":"evictEntries()","size":0},{"name":"countMarks()","size":0},{"name":"makeEntry(const ndn::Name &, uint32_t)","size":0}]},{"name":"nfd::PrivilegeHelper::Error","children":[{"name":"what()","size":0}]},{"name":"nfd::StrategyInfoHost","children":[{"name":"clearStrategyInfo()","size":5}]},{"name":"nfd::tools::nfdc::FibModule","children":[{"name":"fetchStatus(ndn::nfd::Controller &, const function<void (void)> &, const Controller::DatasetFailCallback &, const ndn::nfd::CommandOptions &)","size":13},{"name":"formatStatusXml(std::ostream &)","size":9},{"name":"formatItemText(std::ostream &, const ndn::nfd::FibEntry &)","size":15},{"name":"formatItemXml(std::ostream &, const ndn::nfd::FibEntry &)","size":18},{"name":"formatStatusText(std::ostream &)","size":8}]},{"name":"nfd::fw::UnsolicitedDataPolicy","children":[{"name":"getUnsolicitedDataPolicy()","size":5},{"name":"create(const std::string &)","size":0},{"name":"getRegistry()","size":0},{"name":"decide(const nfd::face::Face &, const ndn::Data &)","size":0},{"name":"getPolicyNames()","size":0}]},{"name":"nfd::face::FaceCounters","children":[]},{"name":"nfd::tools::nfdc::FaceModule","children":[{"name":"fetchStatus(ndn::nfd::Controller &, const function<void (void)> &, const Controller::DatasetFailCallback &, const ndn::nfd::CommandOptions &)","size":13},{"name":"formatStatusXml(std::ostream &)","size":9},{"name":"formatStatusText(std::ostream &)","size":8},{"name":"formatItemText(std::ostream &, const ndn::nfd::FaceStatus &)","size":34},{"name":"formatItemXml(std::ostream &, const ndn::nfd::FaceStatus &)","size":48}]},{"name":"nfd::fw::NfdAutoAdmitNetworkUnsolicitedDataPolicyUnsolicitedDataPolicyRegistrationClass","children":[]},{"name":"nfd::measurements::Entry","children":[{"name":"getMeasurementsEntry()","size":5},{"name":"getName()","size":0}]},{"name":"nfd::SimpleCounter","children":[{"name":"operator=(const nfd::SimpleCounter &)","size":0},{"name":"set(rep)","size":0}]},{"name":"nfd::NfdManagerBase","children":[{"name":"makeAuthorization(const std::string &)","size":5}]},{"name":"nfd::rib::Service::Error","children":[]},{"name":"nfd::tools::nfdc::StatusReport","children":[{"name":"formatXml(std::ostream &)","size":9},{"name":"processEvents(ndn::Face &)","size":5},{"name":"collect(ndn::Face &, ndn::security::v1::KeyChain &, ndn::security::Validator &, const ndn::nfd::CommandOptions &)","size":20},{"name":"formatText(std::ostream &)","size":7}]},{"name":"nfd::name_tree::NameTree","children":[{"name":"lookup(const fib::Entry &)","size":0},{"name":"findExactMatch(const ndn::Name &)","size":0},{"name":"size()","size":0},{"name":"lookup(const strategy_choice::Entry &)","size":0},{"name":"fullEnumerate(const EntrySelector &)","size":0},{"name":"findLongestPrefixMatch(const pit::Entry &, const EntrySelector &)","size":0},{"name":"eraseIfEmpty(nfd::name_tree::Entry *, _Bool)","size":0},{"name":"findLongestPrefixMatch(const nfd::name_tree::Entry &, const EntrySelector &)","size":0},{"name":"lookup(const ndn::Name &)","size":0},{"name":"getNameTree()","size":5},{"name":"lookup(const pit::Entry &)","size":0},{"name":"getNBuckets()","size":0},{"name":"begin()","size":0},{"name":"lookup(const measurements::Entry &)","size":0},{"name":"end()","size":0},{"name":"findAllMatches(const ndn::Name &, const EntrySelector &)","size":0},{"name":"findLongestPrefixMatch(const ndn::Name &, const EntrySelector &)","size":0},{"name":"partialEnumerate(const ndn::Name &, const EntrySubTreeSelector &)","size":0}]},{"name":"nfd::fw::asf::NamespaceInfo","children":[{"name":"isProbingDue()","size":0},{"name":"getTypeId()","size":0},{"name":"setHasFirstProbeBeenScheduled(_Bool)","size":0},{"name":"expireFaceInfo(nfd::face::FaceId)","size":5},{"name":"getFaceInfo(const fib::Entry &, const nfd::face::Face &)","size":12},{"name":"isFirstProbeScheduled()","size":0},{"name":"insert(nfd::face::FaceId)","size":0},{"name":"get(nfd::face::FaceId)","size":0},{"name":"extendFaceInfoLifetime(nfd::fw::asf::FaceInfo &, const nfd::face::Face &)","size":12},{"name":"getOrCreateFaceInfo(const fib::Entry &, const nfd::face::Face &)","size":19},{"name":"setIsProbingDue(_Bool)","size":0},{"name":"find(nfd::face::FaceId)","size":0},{"name":"end()","size":0}]},{"name":"nfd::strategy_choice::Entry","children":[{"name":"getStrategy()","size":0},{"name":"setStrategy(unique_ptr<fw::Strategy>)","size":5},{"name":"getPrefix()","size":0},{"name":"getStrategyInstanceName()","size":5},{"name":"getStrategyChoiceEntry()","size":5}]},{"name":"nfd::fw::NfdAutoAdmitLocalUnsolicitedDataPolicyUnsolicitedDataPolicyRegistrationClass","children":[]},{"name":"nfd::face::LpReassembler","children":[{"name":"size()","size":5},{"name":"receiveFragment(Transport::EndpointId, const lp::Packet &)","size":0},{"name":"doReassembly(const Key &)","size":0},{"name":"setOptions(const nfd::face::LpReassembler::Options &)","size":5},{"name":"timeoutPartialPacket(const Key &)","size":0},{"name":"getLinkService()","size":5}]},{"name":"nfd::ManagerBase","children":[{"name":"registerNotificationStream(const std::string &)","size":0},{"name":"handleCommand(shared_ptr<nfd::ControlCommand>, const ControlCommandHandler &, const ndn::Name &, const ndn::Interest &, const ndn::mgmt::ControlParameters &, ndn::mgmt::CommandContinuation)","size":0},{"name":"extractRequester(const ndn::Interest &, ndn::mgmt::AcceptContinuation)","size":0},{"name":"validateParameters(const nfd::ControlCommand &, const ndn::mgmt::ControlParameters &)","size":0},{"name":"makeAuthorization(const std::string &)","size":0},{"name":"makeRelPrefix(const std::string &)","size":5},{"name":"getModule()","size":0},{"name":"registerStatusDatasetHandler(const std::string &, const ndn::mgmt::StatusDatasetHandler &)","size":0}]},{"name":"nfd::fw::MulticastStrategy","children":[{"name":"afterReceiveInterest(const nfd::face::Face &, const ndn::Interest &, const shared_ptr<pit::Entry> &)","size":19},{"name":"getStrategyName()","size":6}]},{"name":"nfd::tools::nfdc::CommandArguments","children":[]},{"name":"nfd::NetworkInterfaceInfo","children":[{"name":"isUp()","size":5},{"name":"isLoopback()","size":5},{"name":"isMulticastCapable()","size":5},{"name":"listNetifs()","size":6},{"name":"isBroadcastCapable()","size":5}]},{"name":"nfd::fw::AdmitNetworkUnsolicitedDataPolicy","children":[{"name":"decide(const nfd::face::Face &, const ndn::Data &)","size":8}]},{"name":"nfd::LoggerFactory","children":[{"name":"setConfigFile(nfd::ConfigFile &)","size":0},{"name":"flushBackend()","size":0},{"name":"setDefaultLevel(enum nfd::LogLevel)","size":0},{"name":"createLogger(const std::string &)","size":0},{"name":"onConfig(const ConfigSection &, _Bool, const std::string &)","size":0},{"name":"getInstance()","size":0},{"name":"create(const std::string &)","size":0},{"name":"getModules()","size":0},{"name":"extractLevel(const ConfigSection &, const std::string &)","size":0},{"name":"parseLevel(const std::string &)","size":0},{"name":"getDefaultLevel()","size":5}]},{"name":"nfd::face::UnicastUdpTransport","children":[{"name":"canChangePersistencyToImpl(ndn::nfd::FacePersistency)","size":5},{"name":"scheduleClosureWhenIdle()","size":15},{"name":"afterChangePersistency(ndn::nfd::FacePersistency)","size":12}]},{"name":"nfd::ConfigFile","children":[{"name":"parseYesNo(const ConfigSection &, const std::string &, const std::string &)","size":16},{"name":"parseYesNo(const ConfigSection::value_type &, const std::string &)","size":0},{"name":"parse(const std::string &, _Bool, const std::string &)","size":6},{"name":"addSectionHandler(const std::string &, ConfigSectionHandler)","size":6},{"name":"parse(const std::string &, _Bool)","size":10},{"name":"parse(const ConfigSection &, _Bool, const std::string &)","size":6},{"name":"parse(std::istream &, _Bool, const std::string &)","size":16},{"name":"throwErrorOnUnknownSection(const std::string &, const std::string &, const ConfigSection &, _Bool)","size":12},{"name":"ignoreUnknownSection(const std::string &, const std::string &, const ConfigSection &, _Bool)","size":8},{"name":"process(_Bool, const std::string &)","size":22}]},{"name":"nfd::rib::Route","children":[{"name":"isCapture()","size":0},{"name":"setExpirationEvent(const scheduler::EventId)","size":0},{"name":"getExpirationEvent()","size":0},{"name":"operator==(const nfd::rib::Route &)","size":9},{"name":"isChildInherit()","size":0}]},{"name":"nfd::face::FaceSystem","children":[{"name":"listProtocolFactories()","size":9},{"name":"getFactoryById(const std::string &)","size":6},{"name":"processConfig(const ConfigSection &, _Bool, const std::string &)","size":51},{"name":"getFactoryByScheme(const std::string &)","size":6},{"name":"setConfigFile(nfd::ConfigFile &)","size":5}]},{"name":"nfd::pit::Entry","children":[{"name":"getPitEntries()","size":5},{"name":"hasOutRecords()","size":0},{"name":"getInRecords()","size":0},{"name":"operator*()","size":5},{"name":"out_begin()","size":0},{"name":"insert(const ndn::Interest &)","size":5},{"name":"getInterest()","size":0},{"name":"getName()","size":0},{"name":"getOutRecord(const nfd::face::Face &)","size":0},{"name":"insertOrUpdateOutRecord(nfd::face::Face &, const ndn::Interest &)","size":0},{"name":"deleteOutRecord(const nfd::face::Face &)","size":0},{"name":"deleteInRecord(const nfd::face::Face &)","size":0},{"name":"in_end()","size":0},{"name":"operator->()","size":7},{"name":"insertOrUpdateInRecord(nfd::face::Face &, const ndn::Interest &)","size":0},{"name":"getInRecord(const nfd::face::Face &)","size":0},{"name":"find(const ndn::Interest &)","size":5},{"name":"out_end()","size":0},{"name":"clearInRecords()","size":0},{"name":"canMatch(const ndn::Interest &, size_t)","size":0},{"name":"in_begin()","size":0},{"name":"getOutRecords()","size":0},{"name":"hasInRecords()","size":0}]},{"name":"ndn::tools::autoconfig::MulticastDiscovery","children":[{"name":"requestHubData()","size":12},{"name":"onRegisterFailure(const ControlResponse &)","size":16},{"name":"onSuccess(const ndn::Data &)","size":15},{"name":"onRegisterSuccess()","size":9},{"name":"start()","size":7},{"name":"setStrategy()","size":13},{"name":"onSetStrategyFailure(const ControlResponse &)","size":7},{"name":"collectMulticastFaces()","size":11},{"name":"registerHubDiscoveryPrefix(const std::vector<ndn::nfd::FaceStatus> &)","size":29}]},{"name":"nfd::TcpChannel","children":[{"name":"accept(const FaceCreatedCallback &, const FaceCreationFailedCallback &)","size":0},{"name":"size()","size":0},{"name":"listen(const FaceCreatedCallback &, const FaceCreationFailedCallback &, int)","size":0},{"name":"createFace(boost::asio::ip::tcp::socket &&, _Bool, _Bool, const FaceCreatedCallback &)","size":0},{"name":"isListening()","size":5},{"name":"handleConnectTimeout(const shared_ptr<boost::asio::ip::tcp::socket> &, const FaceCreationFailedCallback &)","size":0},{"name":"handleAccept(const boost::system::error_code &, const FaceCreatedCallback &, const FaceCreationFailedCallback &)","size":0},{"name":"handleConnect(const boost::system::error_code &, const shared_ptr<boost::asio::ip::tcp::socket> &, _Bool, const scheduler::EventId &, const FaceCreatedCallback &, const FaceCreationFailedCallback &)","size":0},{"name":"connect(const tcp::Endpoint &, _Bool, const FaceCreatedCallback &, const FaceCreationFailedCallback &, const time::seconds &)","size":0}]},{"name":"nfd::fw::RetxSuppressionExponential","children":[{"name":"decide(const nfd::face::Face &, const ndn::Interest &, pit::Entry &)","size":24}]},{"name":"nfd::face::ProtocolFactory::Error","children":[]},{"name":"nfd::tools::nfdc::NfdIdCollector","children":[{"name":"getNfdId()","size":9},{"name":"checkPolicy(const ndn::Data &, int, const ndn::OnDataValidated &, const ndn::OnDataValidationFailed &, std::vector<shared_ptr<ndn::ValidationRequest> > &)","size":30},{"name":"hasNfdId()","size":0},{"name":"checkPolicy(const ndn::Interest &, int, const ndn::OnInterestValidated &, const ndn::OnInterestValidationFailed &, std::vector<shared_ptr<ndn::ValidationRequest> > &)","size":0}]},{"name":"nfd::rib::FibUpdater","children":[{"name":"addInheritedRoutes(const nfd::rib::RibEntry &, const Rib::RouteSet &)","size":13},{"name":"removeInheritedRoute(const ndn::Name &, const nfd::rib::Route &)","size":10},{"name":"createFibUpdatesForUpdatedRoute(const nfd::rib::RibEntry &, const nfd::rib::Route &, const nfd::rib::Route &)","size":98},{"name":"computeUpdatesForUnregistration(const nfd::rib::RibUpdate &)","size":41},{"name":"createFibUpdatesForErasedRibEntry(const nfd::rib::RibEntry &)","size":7},{"name":"createFibUpdatesForNewRoute(const nfd::rib::RibEntry &, const nfd::rib::Route &, _Bool)","size":38},{"name":"traverseSubTree(const nfd::rib::RibEntry &, Rib::Rib::RouteSet, Rib::Rib::RouteSet)","size":49},{"name":"addInheritedRoutes(const ndn::Name &, const Rib::RouteSet &, const nfd::rib::Route &)","size":13},{"name":"addInheritedRoute(const ndn::Name &, const nfd::rib::Route &)","size":10},{"name":"addFibUpdate(nfd::rib::FibUpdate)","size":22},{"name":"addFibUpdate(const nfd::rib::FibUpdate)","size":0},{"name":"sendUpdatesForNonBatchFaceId(const FibUpdateSuccessCallback &, const FibUpdateFailureCallback &)","size":11},{"name":"sendUpdatesForBatchFaceId(const FibUpdateSuccessCallback &, const FibUpdateFailureCallback &)","size":11},{"name":"computeUpdatesForRegistration(const nfd::rib::RibUpdate &)","size":53},{"name":"sendAddNextHopUpdate(const nfd::rib::FibUpdate &, const FibUpdateSuccessCallback &, const FibUpdateFailureCallback &, uint32_t)","size":14},{"name":"createFibUpdatesForNewRoute(const nfd::rib::RibEntry &, const nfd::rib::Route &, const _Bool)","size":0},{"name":"computeUpdates(const nfd::rib::RibUpdateBatch &)","size":25},{"name":"sendUpdates(const FibUpdateList &, const FibUpdateSuccessCallback &, const FibUpdateFailureCallback &)","size":19},{"name":"onUpdateSuccess(const nfd::rib::FibUpdate, const FibUpdateSuccessCallback &, const FibUpdateFailureCallback &)","size":20},{"name":"createFibUpdatesForErasedRoute(const nfd::rib::RibEntry &, const nfd::rib::Route &, const _Bool)","size":67},{"name":"createFibUpdatesForNewRibEntry(const ndn::Name &, const nfd::rib::Route &, const Rib::RibEntryList &)","size":46},{"name":"sendRemoveNextHopUpdate(const nfd::rib::FibUpdate &, const FibUpdateSuccessCallback &, const FibUpdateFailureCallback &, uint32_t)","size":13},{"name":"removeInheritedRoutes(const nfd::rib::RibEntry &, const Rib::RouteSet &)","size":0},{"name":"removeInheritedRoutes(const nfd::rib::RibEntry &, const Rib::Rib::RouteSet &)","size":11},{"name":"traverseSubTree(const nfd::rib::RibEntry &, Rib::RouteSet, Rib::RouteSet)","size":0},{"name":"modifyChildrensInheritedRoutes(const Rib::RibEntryList &, const Rib::RouteSet &, const Rib::RouteSet &)","size":9},{"name":"computeAndSendFibUpdates(const nfd::rib::RibUpdateBatch &, const FibUpdateSuccessCallback &, const FibUpdateFailureCallback &)","size":18},{"name":"onUpdateError(const nfd::rib::FibUpdate, const FibUpdateSuccessCallback &, const FibUpdateFailureCallback &, const ndn::nfd::ControlResponse &, uint32_t)","size":30}]},{"name":"nfd::name_tree::EnumerationImpl","children":[{"name":"advance(nfd::name_tree::Iterator &)","size":0}]},{"name":"nfd::UdpChannel","children":[{"name":"createFace(const udp::Endpoint &, ndn::nfd::FacePersistency)","size":0},{"name":"size()","size":0},{"name":"connect(const udp::Endpoint &, ndn::nfd::FacePersistency, const FaceCreatedCallback &, const FaceCreationFailedCallback &)","size":0},{"name":"isListening()","size":5},{"name":"waitForNewPeer(const FaceCreatedCallback &, const FaceCreationFailedCallback &)","size":0},{"name":"listen(const FaceCreatedCallback &, const FaceCreationFailedCallback &)","size":0},{"name":"handleNewPeer(const boost::system::error_code &, size_t, const FaceCreatedCallback &, const FaceCreationFailedCallback &)","size":0}]},{"name":"nfd::fw::NfdAutoAdmitAllUnsolicitedDataPolicyUnsolicitedDataPolicyRegistrationClass","children":[]},{"name":"nfd::NetworkInterfacePredicate","children":[{"name":"clear()","size":6},{"name":"parseWhitelist(const boost::property_tree::ptree &)","size":5},{"name":"parseBlacklist(const boost::property_tree::ptree &)","size":5},{"name":"operator==(const nfd::NetworkInterfacePredicate &)","size":6},{"name":"operator!=(const nfd::NetworkInterfacePredicate &)","size":0},{"name":"operator()(const nfd::NetworkInterfaceInfo &)","size":6}]},{"name":"nfd::fw::NfdAutoBestRouteStrategy2StrategyRegistrationClass","children":[]},{"name":"ndn::tools::autoconfig::Base::Error","children":[]},{"name":"nfd::name_tree::FullEnumerationImpl","children":[{"name":"advance(nfd::name_tree::Iterator &)","size":43}]},{"name":"nfd::fw::ClientControlStrategy","children":[{"name":"getStrategyName()","size":6}]},{"name":"nfd::rib::NfdRibReadvertiseDestination","children":[{"name":"withdraw(nfd::rib::ReadvertisedRoute &, std::function<void (void)>, std::function<void (const std::string &)>)","size":11},{"name":"advertise(nfd::rib::ReadvertisedRoute &, std::function<void (void)>, std::function<void (const std::string &)>)","size":11}]},{"name":"nfd::Nfd","children":[{"name":"reloadConfigFile()","size":25},{"name":"initializeManagement()","size":43},{"name":"initializeLogging()","size":15},{"name":"reloadConfigFileFaceSection()","size":14},{"name":"initialize()","size":27}]},{"name":"nfd::pit::FaceRecord","children":[{"name":"update(const ndn::Interest &)","size":0},{"name":"getLastRenewed()","size":5},{"name":"getExpiry()","size":5},{"name":"getLastNonce()","size":5},{"name":"getFace()","size":5}]},{"name":"ndn::tools::autoconfig::HttpException","children":[]},{"name":"nfd::tools::nfdc::LegacyNfdc","children":[{"name":"fibAddNextHop()","size":20},{"name":"onObtainFaceIdFailure(const std::string &)","size":5},{"name":"onError(const ndn::nfd::ControlResponse &, const std::string &)","size":7},{"name":"strategyChoiceSet()","size":15},{"name":"ribUnregisterPrefix()","size":20},{"name":"startFaceCreate(const ndn::util::FaceUri &)","size":0},{"name":"onSuccess(const ndn::nfd::ControlParameters &, const std::string &)","size":5},{"name":"faceCreate()","size":14},{"name":"onCanonizeFailure(const std::string &)","size":5},{"name":"startFaceCreate(const ndn::util::FaceUri &)","size":11},{"name":"fibRemoveNextHop()","size":19},{"name":"dispatch(const std::string &)","size":48},{"name":"faceDestroy()","size":17},{"name":"strategyChoiceUnset()","size":12},{"name":"ribRegisterPrefix()","size":25},{"name":"onSuccess(const ndn::nfd::ControlParameters &, const std::string &)","size":0}]},{"name":"nfd::Logger","children":[{"name":"setLogLevel(enum nfd::LogLevel)","size":0},{"name":"setName(const std::string &)","size":0},{"name":"getName()","size":0},{"name":"isEnabled(enum nfd::LogLevel)","size":0}]},{"name":"nfd::fib::NextHop","children":[{"name":"getCost()","size":0},{"name":"setCost(uint64_t)","size":0},{"name":"getFace()","size":0}]},{"name":"ndn::tools::autoconfig::BaseDns::Error","children":[]},{"name":"nfd::fw::NfdAutoNccStrategyStrategyRegistrationClass","children":[]},{"name":"ndn::NdnAutoconfigServer","children":[{"name":"onRegisterFailed(const ndn::Name &, const std::string &)","size":0},{"name":"onHubInterest(const ndn::Name &, const ndn::Interest &)","size":0},{"name":"run()","size":0},{"name":"onRoutablePrefixesInterest(const ndn::Name &, const ndn::Interest &)","size":0}]},{"name":"nfd::face::LinkServiceCounters","children":[]},{"name":"nfd::face::FaceSystem::ConfigContext","children":[{"name":"listNetifs()","size":0}]},{"name":"nfd::fw::asf::AsfMeasurements","children":[{"name":"getFaceInfo(const fib::Entry &, const ndn::Interest &, const nfd::face::Face &)","size":6},{"name":"getOrCreateFaceInfo(const fib::Entry &, const ndn::Interest &, const nfd::face::Face &)","size":6},{"name":"getOrCreateNamespaceInfo(const fib::Entry &, const ndn::Interest &)","size":22},{"name":"extendLifetime(measurements::Entry &)","size":5},{"name":"getNamespaceInfo(const ndn::Name &)","size":15}]},{"name":"nfd::UnixStreamChannel","children":[{"name":"accept(const FaceCreatedCallback &, const FaceCreationFailedCallback &)","size":0},{"name":"isListening()","size":5},{"name":"handleAccept(const boost::system::error_code &, const FaceCreatedCallback &, const FaceCreationFailedCallback &)","size":0},{"name":"listen(const FaceCreatedCallback &, const FaceCreationFailedCallback &, int)","size":0}]},{"name":"ndn::tools::autoconfig::GuessFromIdentityName","children":[{"name":"start()","size":22}]},{"name":"nfd::face::UnixStreamFactory","children":[{"name":"createChannel(const std::string &)","size":15},{"name":"createFace(const ndn::util::FaceUri &, ndn::nfd::FacePersistency, _Bool, const FaceCreatedCallback &, const FaceCreationFailedCallback &)","size":9},{"name":"processConfig(OptionalConfigSection, FaceSystem::ConfigContext &)","size":37},{"name":"getChannels()","size":5},{"name":"getId()","size":6},{"name":"findChannel(const unix_stream::Endpoint &)","size":9}]},{"name":"nfd::face::NfdAutoUdpFactoryProtocolFactoryRegistrationClass","children":[]},{"name":"nfd::tools::nfdc::CommandParser","children":[{"name":"addCommand(const nfd::tools::nfdc::CommandDefinition &, const ExecuteCommand &, std::underlying_type<enum AvailableIn>::type)","size":14},{"name":"addAlias(const std::string &, const std::string &, const std::string &)","size":6},{"name":"parse(const std::vector<std::string> &, enum nfd::tools::nfdc::ParseMode)","size":29},{"name":"listCommands(const std::string &, enum nfd::tools::nfdc::ParseMode)","size":13}]},{"name":"nfd::FaceManager","children":[{"name":"setConfigFile(nfd::ConfigFile &)","size":5},{"name":"afterCreateFaceFailure(uint32_t, const std::string &, const ndn::mgmt::CommandContinuation &)","size":9},{"name":"enableLocalControl(const ndn::Name &, const ndn::Interest &, const ndn::nfd::ControlParameters &, const ndn::mgmt::CommandContinuation &)","size":23},{"name":"queryFaces(const ndn::Name &, const ndn::Interest &, ndn::mgmt::StatusDatasetContext &)","size":25},{"name":"listFaces(const ndn::Name &, const ndn::Interest &, ndn::mgmt::StatusDatasetContext &)","size":11},{"name":"destroyFace(const ndn::Name &, const ndn::Interest &, const ndn::nfd::ControlParameters &, const ndn::mgmt::CommandContinuation &)","size":12},{"name":"disableLocalControl(const ndn::Name &, const ndn::Interest &, const ndn::nfd::ControlParameters &, const ndn::mgmt::CommandContinuation &)","size":23},{"name":"notifyFaceEvent(const nfd::face::Face &, ndn::nfd::FaceEventKind)","size":9},{"name":"setLinkServiceOptions(nfd::face::Face &, const ndn::nfd::ControlParameters &, ndn::nfd::ControlParameters &)","size":18},{"name":"updateFace(const ndn::Name &, const ndn::Interest &, const ndn::nfd::ControlParameters &, const ndn::mgmt::CommandContinuation &)","size":66},{"name":"listChannels(const ndn::Name &, const ndn::Interest &, ndn::mgmt::StatusDatasetContext &)","size":14},{"name":"createFace(const ndn::Name &, const ndn::Interest &, const ndn::nfd::ControlParameters &, const ndn::mgmt::CommandContinuation &)","size":44},{"name":"afterCreateFaceSuccess(const ndn::nfd::ControlParameters &, const shared_ptr<nfd::face::Face> &, const ndn::mgmt::CommandContinuation &)","size":42},{"name":"connectFaceStateChangeSignal(const nfd::face::Face &)","size":19},{"name":"matchFilter(const ndn::nfd::FaceQueryFilter &, const nfd::face::Face &)","size":41},{"name":"collectFaceStatus(const nfd::face::Face &, const time::steady_clock::TimePoint &)","size":25},{"name":"findFaceForLocalControl(const ndn::Interest &, const ndn::nfd::ControlParameters &, const ndn::mgmt::CommandContinuation &)","size":26}]},{"name":"nfd::measurements::AnyEntry","children":[{"name":"operator()(const nfd::measurements::Entry &)","size":0}]},{"name":"nfd::fw::DropAllUnsolicitedDataPolicy","children":[{"name":"decide(const nfd::face::Face &, const ndn::Data &)","size":5}]},{"name":"ndn::tools::autoconfig::GuessFromSearchDomains","children":[{"name":"start()","size":12}]},{"name":"ndn::tools::autoconfig::Url","children":[{"name":"getPath()","size":0},{"name":"getHost()","size":0},{"name":"getScheme()","size":0},{"name":"getPort()","size":0},{"name":"isValid()","size":0}]},{"name":"nfd::Forwarder","children":[{"name":"setStragglerTimer(const shared_ptr<pit::Entry> &, _Bool, time::milliseconds)","size":10},{"name":"getStrategyChoice()","size":0},{"name":"onOutgoingNack(const shared_ptr<pit::Entry> &, const nfd::face::Face &, const lp::NackHeader &)","size":45},{"name":"onInterestUnsatisfied(const shared_ptr<pit::Entry> &)","size":12},{"name":"onContentStoreHit(const nfd::face::Face &, const shared_ptr<pit::Entry> &, const ndn::Interest &, const ndn::Data &)","size":15},{"name":"cancelUnsatisfyAndStragglerTimer(pit::Entry &)","size":6},{"name":"onInterestReject(const shared_ptr<pit::Entry> &)","size":16},{"name":"getFaceTable()","size":0},{"name":"setUnsolicitedDataPolicy(unique_ptr<fw::UnsolicitedDataPolicy>)","size":0},{"name":"getNameTree()","size":0},{"name":"startProcessData(nfd::face::Face &, const ndn::Data &)","size":8},{"name":"onIncomingInterest(nfd::face::Face &, const ndn::Interest &)","size":52},{"name":"onOutgoingInterest(const shared_ptr<pit::Entry> &, nfd::face::Face &, const ndn::Interest &)","size":13},{"name":"getFace(FaceId)","size":0},{"name":"insertDeadNonceList(pit::Entry &, _Bool, time::milliseconds, nfd::face::Face *)","size":35},{"name":"onIncomingNack(nfd::face::Face &, const lp::Nack &)","size":55},{"name":"onOutgoingData(const ndn::Data &, nfd::face::Face &)","size":25},{"name":"onInterestFinalize(const shared_ptr<pit::Entry> &, _Bool, time::milliseconds)","size":14},{"name":"getDeadNonceList()","size":0},{"name":"setUnsatisfyTimer(const shared_ptr<pit::Entry> &)","size":16},{"name":"getNetworkRegionTable()","size":0},{"name":"getPit()","size":0},{"name":"getUnsolicitedDataPolicy()","size":0},{"name":"getFib()","size":0},{"name":"addFace(shared_ptr<nfd::face::Face>)","size":0},{"name":"onDataUnsolicited(nfd::face::Face &, const ndn::Data &)","size":14},{"name":"getCounters()","size":0},{"name":"onIncomingData(nfd::face::Face &, const ndn::Data &)","size":69},{"name":"startProcessNack(nfd::face::Face &, const lp::Nack &)","size":18},{"name":"onInterestLoop(nfd::face::Face &, const ndn::Interest &)","size":21},{"name":"onContentStoreMiss(const nfd::face::Face &, const shared_ptr<pit::Entry> &, const ndn::Interest &)","size":30},{"name":"getMeasurements()","size":0},{"name":"startProcessInterest(nfd::face::Face &, const ndn::Interest &)","size":18},{"name":"getCs()","size":0}]},{"name":"nfd::strategy_choice::StrategyChoice","children":[{"name":"insert(const ndn::Name &, const ndn::Name &)","size":0},{"name":"findEffectiveStrategy(const pit::Entry &)","size":0},{"name":"size()","size":0},{"name":"setDefaultStrategy(const ndn::Name &)","size":0},{"name":"end()","size":0},{"name":"getStrategyChoice()","size":5},{"name":"getRange()","size":0},{"name":"changeStrategy(nfd::strategy_choice::Entry &, fw::Strategy &, fw::Strategy &)","size":0},{"name":"findEffectiveStrategy(const ndn::Name &)","size":0},{"name":"begin()","size":0},{"name":"erase(const ndn::Name &)","size":0},{"name":"findEffectiveStrategy(const measurements::Entry &)","size":0},{"name":"get(const ndn::Name &)","size":0}]},{"name":"nfd::face::LpFragmenter::Options","children":[]},{"name":"nfd::rib::AutoPrefixPropagator::Error","children":[]},{"name":"nfd::face::GenericLinkService::Options","children":[]},{"name":"ndn::tools::autoconfig::BaseDns","children":[{"name":"parseSrvRr(const union ndn::tools::autoconfig::BaseDns::QueryAnswer &, int)","size":62},{"name":"querySrvRr(const std::string &)","size":23},{"name":"querySrvRrSearch()","size":25}]},{"name":"nfd::fw::BestRouteStrategyBase","children":[{"name":"afterReceiveInterest(const nfd::face::Face &, const ndn::Interest &, const shared_ptr<pit::Entry> &)","size":23}]},{"name":"ndn::PrefixCollection","children":[{"name":"add(const ndn::Name &)","size":0},{"name":"wireEncode()","size":0},{"name":"empty()","size":0}]},{"name":"nfd::fib::Entry","children":[{"name":"getPrefix()","size":0},{"name":"sortNextHops()","size":0},{"name":"addNextHop(nfd::face::Face &, uint64_t)","size":0},{"name":"hasNextHops()","size":0},{"name":"removeNextHop(const nfd::face::Face &)","size":0},{"name":"getNextHops()","size":0},{"name":"getFibEntry()","size":5},{"name":"hasNextHop(const nfd::face::Face &)","size":0},{"name":"findNextHop(const nfd::face::Face &)","size":0}]},{"name":"nfd::face::GenericLinkService","children":[{"name":"assignSequences(std::vector<lp::Packet> &)","size":0},{"name":"decodeNetPacket(const ndn::Block &, const lp::Packet &)","size":0},{"name":"assignSequence(lp::Packet &)","size":0},{"name":"doSendInterest(const ndn::Interest &)","size":0},{"name":"getCounters()","size":5},{"name":"sendNetPacket(lp::Packet &&)","size":0},{"name":"doSendNack(const ndn::lp::Nack &)","size":0},{"name":"decodeNack(const ndn::Block &, const lp::Packet &)","size":0},{"name":"setOptions(const nfd::face::GenericLinkService::Options &)","size":0},{"name":"setOptions(const GenericLinkService::Options &)","size":5},{"name":"doSendData(const ndn::Data &)","size":0},{"name":"decodeInterest(const ndn::Block &, const lp::Packet &)","size":0},{"name":"decodeData(const ndn::Block &, const lp::Packet &)","size":0},{"name":"getOptions()","size":5},{"name":"encodeLpFields(const ndn::TagHost &, lp::Packet &)","size":0},{"name":"doReceivePacket(Transport::Packet &&)","size":0}]},{"name":"nfd::face::TcpFactory","children":[{"name":"createFace(const ndn::util::FaceUri &, ndn::nfd::FacePersistency, _Bool, const FaceCreatedCallback &, const FaceCreationFailedCallback &)","size":49},{"name":"createChannel(const tcp::Endpoint &)","size":14},{"name":"prohibitAllIpv4Endpoints(uint16_t)","size":12},{"name":"processConfig(OptionalConfigSection, FaceSystem::ConfigContext &)","size":78},{"name":"getChannels()","size":5},{"name":"getId()","size":6},{"name":"prohibitAllIpv6Endpoints(uint16_t)","size":12},{"name":"prohibitEndpoint(const tcp::Endpoint &)","size":15},{"name":"createChannel(const std::string &, const std::string &)","size":7},{"name":"findChannel(const tcp::Endpoint &)","size":9}]},{"name":"nfd::NetworkRegionTable","children":[{"name":"getNetworkRegionTable()","size":5},{"name":"isInProducerRegion(const ndn::Link &)","size":0}]},{"name":"ndn::nfd_autoreg::AutoregServer","children":[{"name":"isWhitelisted(const boost::asio::ip::address &)","size":0},{"name":"isBlacklisted(const boost::asio::ip::address &)","size":0},{"name":"signalHandler()","size":0},{"name":"registerPrefixesForFace(uint64_t, const std::vector<ndn::Name> &)","size":0},{"name":"onRegisterCommandFailure(uint64_t, const ndn::Name &, const nfd::ControlResponse &)","size":0},{"name":"startProcessing()","size":0},{"name":"hasAllowedSchema(const ndn::util::FaceUri &)","size":0},{"name":"startFetchingFaceStatusDataset()","size":0},{"name":"onNotification(const ndn::nfd::FaceEventNotification &)","size":0},{"name":"usage(std::ostream &, const po::options_description &, const char *)","size":0},{"name":"onRegisterCommandSuccess(uint64_t, const ndn::Name &)","size":0},{"name":"registerPrefixesIfNeeded(uint64_t, const ndn::util::FaceUri &, enum ndn::nfd::FacePersistency)","size":0},{"name":"main(int, char **)","size":0}]},{"name":"ndn::tools::autoconfig::NdnAutoconfig","children":[{"name":"usage(std::ostream &, const po::options_description &, const char *)","size":0},{"name":"run()","size":0},{"name":"startStages()","size":0},{"name":"terminate(const boost::system::error_code &, int)","size":0}]},{"name":"nfd::fw::NfdAutoBestRouteStrategyStrategyRegistrationClass","children":[]},{"name":"nfd::measurements::Measurements","children":[{"name":"getParent(const nfd::measurements::Entry &)","size":0},{"name":"findExactMatch(const ndn::Name &)","size":0},{"name":"size()","size":5},{"name":"cleanup(nfd::measurements::Entry &)","size":0},{"name":"getInitialLifetime()","size":5},{"name":"findLongestPrefixMatch(const pit::Entry &, const EntryPredicate &)","size":0},{"name":"findLongestPrefixMatch(const ndn::Name &, const EntryPredicate &)","size":0},{"name":"get(const pit::Entry &)","size":0},{"name":"getMeasurements()","size":5},{"name":"get(const fib::Entry &)","size":0},{"name":"extendLifetime(nfd::measurements::Entry &, const time::nanoseconds &)","size":0},{"name":"get(name_tree::Entry &)","size":0},{"name":"get(const ndn::Name &)","size":0}]},{"name":"nfd::ByteCounter","children":[{"name":"operator+=(rep)","size":6}]},{"name":"nfd::cs::Policy","children":[{"name":"getPolicy()","size":5},{"name":"setLimit(size_t)","size":0},{"name":"setCs(nfd::cs::Cs *)","size":5},{"name":"getLimit()","size":5},{"name":"create(const std::string &)","size":0},{"name":"doAfterInsert(iterator)","size":0},{"name":"getName()","size":5},{"name":"getRegistry()","size":0},{"name":"doAfterRefresh(iterator)","size":0},{"name":"doBeforeUse(iterator)","size":0},{"name":"doBeforeErase(iterator)","size":0},{"name":"afterInsert(iterator)","size":0},{"name":"beforeUse(iterator)","size":0},{"name":"getPolicyNames()","size":0},{"name":"getCs()","size":5},{"name":"evictEntries()","size":0},{"name":"beforeErase(iterator)","size":0},{"name":"afterRefresh(iterator)","size":0}]},{"name":"nfd::tools::nfdc::Module","children":[{"name":"fetchStatus(ndn::nfd::Controller &, const function<void (void)> &, const Controller::DatasetFailCallback &, const ndn::nfd::CommandOptions &)","size":0},{"name":"formatStatusXml(std::ostream &)","size":0},{"name":"formatStatusText(std::ostream &)","size":0}]},{"name":"nfd::fw::NccStrategy::PitEntryInfo","children":[{"name":"getTypeId()","size":0}]},{"name":"nfd::FibManager","children":[{"name":"removeNextHop(const ndn::Name &, const ndn::Interest &, ndn::nfd::ControlParameters, const ndn::mgmt::CommandContinuation &)","size":32},{"name":"listEntries(const ndn::Name &, const ndn::Interest &, ndn::mgmt::StatusDatasetContext &)","size":23},{"name":"setFaceForSelfRegistration(const ndn::Interest &, ndn::nfd::ControlParameters &)","size":13},{"name":"addNextHop(const ndn::Name &, const ndn::Interest &, ndn::nfd::ControlParameters, const ndn::mgmt::CommandContinuation &)","size":32}]},{"name":"nfd::measurements::MeasurementsAccessor","children":[{"name":"getParent(const nfd::measurements::Entry &)","size":5},{"name":"findExactMatch(const ndn::Name &)","size":5},{"name":"filter(nfd::measurements::Entry *)","size":0},{"name":"findLongestPrefixMatch(const pit::Entry &, const EntryPredicate &)","size":6},{"name":"findLongestPrefixMatch(const ndn::Name &, const EntryPredicate &)","size":6},{"name":"get(const pit::Entry &)","size":5},{"name":"getMeasurements()","size":5},{"name":"get(const fib::Entry &)","size":5},{"name":"extendLifetime(nfd::measurements::Entry &, const time::nanoseconds &)","size":5},{"name":"filter(nfd::measurements::Entry &)","size":5},{"name":"get(const ndn::Name &)","size":5}]},{"name":"nfd::ConfigFile::Error","children":[]},{"name":"nfd::FaceTable","children":[{"name":"add(shared_ptr<nfd::face::Face>)","size":0},{"name":"remove(FaceId)","size":0},{"name":"addImpl(shared_ptr<nfd::face::Face>, FaceId)","size":0},{"name":"get(FaceId)","size":0},{"name":"addReserved(shared_ptr<nfd::face::Face>, FaceId)","size":0},{"name":"size()","size":0},{"name":"begin()","size":0},{"name":"getFaceTable()","size":5},{"name":"end()","size":0},{"name":"getForwardRange()","size":0}]},{"name":"nfd::fw::NccStrategy::MeasurementsEntryInfo","children":[{"name":"getTypeId()","size":0},{"name":"inheritFrom(const nfd::fw::NccStrategy::MeasurementsEntryInfo &)","size":5},{"name":"getBestFace()","size":10},{"name":"updateBestFace(const nfd::face::Face &)","size":16},{"name":"adjustPredictUp()","size":6},{"name":"ageBestFace()","size":6},{"name":"adjustPredictDown()","size":6}]},{"name":"nfd::fw::RetxSuppression","children":[{"name":"decide(const nfd::face::Face &, const ndn::Interest &, pit::Entry &)","size":0},{"name":"getLastOutgoing(const pit::Entry &)","size":12}]},{"name":"nfd::fw::NfdAutoAccessStrategyStrategyRegistrationClass","children":[]},{"name":"nfd::face::Transport","children":[{"name":"getExpirationTime()","size":5},{"name":"canChangePersistencyTo(ndn::nfd::FacePersistency)","size":0},{"name":"afterChangePersistency(ndn::nfd::FacePersistency)","size":0},{"name":"getPersistency()","size":5},{"name":"setExpirationTime(const time::steady_clock::TimePoint &)","size":5},{"name":"setRemoteUri(const ndn::util::FaceUri &)","size":5},{"name":"setState(enum nfd::face::TransportState)","size":0},{"name":"doSend(nfd::face::Transport::Packet &&)","size":0},{"name":"setLocalUri(const ndn::util::FaceUri &)","size":5},{"name":"setScope(ndn::nfd::FaceScope)","size":5},{"name":"getLinkType()","size":5},{"name":"getScope()","size":5},{"name":"receive(nfd::face::Transport::Packet &&)","size":0},{"name":"setLinkType(ndn::nfd::LinkType)","size":5},{"name":"getRemoteUri()","size":5},{"name":"getLinkService()","size":5},{"name":"setMtu(ssize_t)","size":6},{"name":"setFaceAndLinkService(nfd::face::Face &, nfd::face::LinkService &)","size":0},{"name":"send(nfd::face::Transport::Packet &&)","size":0},{"name":"close()","size":0},{"name":"getFace()","size":5},{"name":"getCounters()","size":5},{"name":"getMtu()","size":5},{"name":"doClose()","size":0},{"name":"getLocalUri()","size":5},{"name":"canChangePersistencyToImpl(ndn::nfd::FacePersistency)","size":0},{"name":"getState()","size":5},{"name":"setPersistency(ndn::nfd::FacePersistency)","size":0}]},{"name":"nfd::fw::NccStrategy","children":[{"name":"getMeasurementsEntryInfo(const shared_ptr<pit::Entry> &)","size":6},{"name":"afterReceiveInterest(const nfd::face::Face &, const ndn::Interest &, const shared_ptr<pit::Entry> &)","size":73},{"name":"timeoutOnBestFace(weak_ptr<pit::Entry>)","size":22},{"name":"getStrategyName()","size":6},{"name":"beforeSatisfyInterest(const shared_ptr<pit::Entry> &, const nfd::face::Face &, const ndn::Data &)","size":37},{"name":"getMeasurementsEntryInfo(measurements::Entry *)","size":19},{"name":"doPropagate(FaceId, weak_ptr<pit::Entry>)","size":51}]},{"name":"nfd::rib::Service","children":[{"name":"initializeLogging()","size":15},{"name":"getLocalNfdTransport()","size":34},{"name":"initialize()","size":37}]},{"name":"nfd::rib::RibManager::Error","children":[]},{"name":"nfd::LoggerFactory::Error","children":[]},{"name":"nfd::name_tree::HashtableOptions","children":[]},{"name":"nfd::fw::NfdAutoMulticastStrategyStrategyRegistrationClass","children":[]},{"name":"nfd::fw::StrategyInfo","children":[]},{"name":"nfd::tools::nfdc::ChannelModule","children":[{"name":"fetchStatus(ndn::nfd::Controller &, const function<void (void)> &, const Controller::DatasetFailCallback &, const ndn::nfd::CommandOptions &)","size":13},{"name":"formatStatusXml(std::ostream &)","size":9},{"name":"formatItemText(std::ostream &, const ndn::nfd::ChannelStatus &)","size":6},{"name":"formatStatusText(std::ostream &)","size":8},{"name":"formatItemXml(std::ostream &, const ndn::nfd::ChannelStatus &)","size":7}]},{"name":"nfd::RttEstimator","children":[{"name":"doubleMultiplier()","size":5},{"name":"getInitialRtt()","size":0},{"name":"incrementMultiplier()","size":5},{"name":"addMeasurement(Duration)","size":17},{"name":"computeRto()","size":7}]},{"name":"nfd::fw::AdmitAllUnsolicitedDataPolicy","children":[{"name":"decide(const nfd::face::Face &, const ndn::Data &)","size":5}]},{"name":"nfd::face::TransportCounters","children":[]},{"name":"nfd::tools::nfdc::RibModule","children":[{"name":"fetchStatus(ndn::nfd::Controller &, const function<void (void)> &, const Controller::DatasetFailCallback &, const ndn::nfd::CommandOptions &)","size":13},{"name":"formatStatusXml(std::ostream &)","size":9},{"name":"formatStatusText(std::ostream &)","size":8},{"name":"formatItemText(std::ostream &, const ndn::nfd::RibEntry &)","size":26},{"name":"formatItemXml(std::ostream &, const ndn::nfd::RibEntry &)","size":37}]},{"name":"nfd::name_tree::Entry","children":[{"name":"erasePitEntry(pit::Entry *)","size":0},{"name":"operator*()","size":6},{"name":"getPitEntries()","size":0},{"name":"getParent()","size":5},{"name":"hasChildren()","size":0},{"name":"getMeasurementsEntry()","size":0},{"name":"getStrategyChoiceEntry()","size":0},{"name":"hasTableEntries()","size":0},{"name":"getChildren()","size":5},{"name":"setMeasurementsEntry(unique_ptr<measurements::Entry>)","size":0},{"name":"getName()","size":0},{"name":"setStrategyChoiceEntry(unique_ptr<strategy_choice::Entry>)","size":0},{"name":"setFibEntry(unique_ptr<fib::Entry>)","size":0},{"name":"isEmpty()","size":0},{"name":"getFibEntry()","size":0},{"name":"setParent(nfd::name_tree::Entry &)","size":0},{"name":"hasPitEntries()","size":0},{"name":"unsetParent()","size":0},{"name":"operator->()","size":6},{"name":"insertPitEntry(shared_ptr<pit::Entry>)","size":0}]},{"name":"nfd::face::UnixStreamTransport","children":[]},{"name":"nfd::pit::InRecord","children":[{"name":"update(const ndn::Interest &)","size":0},{"name":"getInterest()","size":6}]},{"name":"nfd::face::InternalTransportBase","children":[{"name":"receiveFromLink(const ndn::Block &)","size":0}]},{"name":"ndn::tools::autoconfig::NdnAutoconfig::Error","children":[]},{"name":"nfd::rib::FibUpdate","children":[{"name":"operator==(const nfd::rib::FibUpdate &)","size":0},{"name":"createAddUpdate(const ndn::Name &, const uint64_t, const uint64_t)","size":12},{"name":"createRemoveUpdate(const ndn::Name &, const uint64_t)","size":11}]},{"name":"nfd::face::InternalForwarderTransport","children":[{"name":"receiveFromLink(const ndn::Block &)","size":9},{"name":"doClose()","size":7},{"name":"doSend(nfd::face::Transport::Packet &&)","size":7}]},{"name":"nfd::fw::RetxSuppressionFixed","children":[{"name":"decide(const nfd::face::Face &, const ndn::Interest &, pit::Entry &)","size":15}]},{"name":"nfd::fw::AccessStrategy::PitInfo","children":[{"name":"getTypeId()","size":0}]},{"name":"nfd::pit::OutRecord","children":[{"name":"setIncomingNack(const lp::Nack &)","size":10},{"name":"clearIncomingNack()","size":0},{"name":"getIncomingNack()","size":0}]},{"name":"nfd::face::Transport::Packet","children":[]},{"name":"nfd::fw::RetxSuppressionExponential::PitInfo","children":[{"name":"getTypeId()","size":0}]},{"name":"nfd::CommandAuthenticator","children":[{"name":"processConfig(const ConfigSection &, _Bool, const std::string &)","size":89},{"name":"setConfigFile(nfd::ConfigFile &)","size":6},{"name":"extractKeyName(const ndn::Interest &)","size":32},{"name":"create()","size":5},{"name":"makeAuthorization(const std::string &, const std::string &)","size":51}]}]}